#! /usr/local/Nuke13.0v2/libnuke-13.0.2.so -nx
version 13.0 v2
define_window_layout_xml {<?xml version="1.0" encoding="UTF-8"?>
<layout version="1.0">
    <window x="1976" y="188" w="2504" h="1376" maximized="1" screen="0">
        <splitter orientation="1">
            <split size="40"/>
            <dock id="" hideTitles="1" activePageId="Toolbar.1">
                <page id="Toolbar.1"/>
            </dock>
            <split size="1841" stretch="1"/>
            <splitter orientation="2">
                <split size="783"/>
                <dock id="" activePageId="Viewer.1">
                    <page id="Viewer.1"/>
                </dock>
                <split size="550"/>
                <dock id="" activePageId="DAG.1" focus="true">
                    <page id="DAG.1"/>
                    <page id="Curve Editor.1"/>
                    <page id="DopeSheet.1"/>
                </dock>
            </splitter>
            <split size="615"/>
            <dock id="" activePageId="Properties.1">
                <page id="Properties.1"/>
                <page id="uk.co.thefoundry.backgroundrenderview.1"/>
            </dock>
        </splitter>
    </window>
</layout>
}
Root {
 inputs 0
 name /home/ob1/software/nuke/dev/raymarch/examples/raymarch_test.nk
 frame 33
 last_frame 63
 colorManagement Nuke
 workingSpaceLUT linear
 monitorLut sRGB
 monitorOutLUT rec709
 int8Lut sRGB
 int16Lut sRGB
 logLut Cineon
 floatLut linear
}
Read {
 inputs 0
 file_type exr
 file /home/ob1/software/nuke/dev/raymarch/images/kloppenheim_02_4k.exr
 format "4096 2048 0 0 4096 2048 1 4K_LatLong"
 origset true
 auto_alpha true
 name Read8
 xpos 840
 ypos 8
}
Read {
 inputs 0
 file_type exr
 file /home/ob1/software/nuke/dev/raymarch/images/studio_small_02_4k.exr
 format "4096 2048 0 0 4096 2048 1 4K_LatLong"
 origset true
 name Read6
 xpos 950
 ypos 8
}
Read {
 inputs 0
 file_type exr
 file /home/ob1/software/nuke/dev/raymarch/images/ninomaru_teien_4k.exr
 format "4096 2048 0 0 4096 2048 1 4K_LatLong"
 origset true
 auto_alpha true
 name Read7
 xpos 620
 ypos 8
}
Reformat {
 format "2048 1024 0 0 2048 1024 1 2K_LatLong"
 scale 0.25
 resize fill
 center false
 name Reformat1
 xpos 620
 ypos 127
}
Axis2 {
 inputs 0
 rotate {-90 0 0}
 name Axis2
 xpos 394
 ypos -6
}
Camera2 {
 translate {0 1 10}
 focal 58.5
 name Camera2
 xpos 394
 ypos 94
}
Group {
 inputs 0
 name sdf_light1
 onCreate "__import__('sdf.light', fromlist='SDFLight').SDFLight().handle_node_created()"
 knobChanged "__import__('sdf.light', fromlist='SDFLight').SDFLight().handle_knob_changed()"
 tile_color 0xffffffff
 label ambient
 xpos 98
 ypos -9
 addUserKnob {20 User l "SDF LIght"}
 addUserKnob {4 type t "The type of light." M {ambient directional point "ambient occlusion"}}
 addUserKnob {7 dimension_x l iterations t "The number of iterations to compute." +HIDDEN R 1 10}
 dimension_x 5
 addUserKnob {7 dimension_y l "y position" t "The y position of the light." +HIDDEN R -10 10}
 dimension_y 1
 addUserKnob {7 dimension_z l "z position" t "The z position of the light." +HIDDEN R -10 10}
 dimension_z -4
 addUserKnob {7 intensity t "The intensity of the light." R 0 10}
 intensity 0.1
 addUserKnob {7 falloff t "The power of the light's intensity falloff. Four is physically accurate." +DISABLED R 0 5}
 falloff 4
 addUserKnob {18 colour t "The colour of the light."}
 colour {1 1 1}
 addUserKnob {6 colour_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {7 shadow_hardness l "shadow hardness" t "The hardness of the shadows, this is a non-physically accurate effect, but can look nice." +DISABLED R 1 100}
 shadow_hardness 10
 addUserKnob {6 soften_shadows l "soften shadows" t "Soften the shadows using a non-phisically accurate effect." -STARTLINE +DISABLED}
 addUserKnob {26 ""}
 addUserKnob {26 info l "" +STARTLINE T "v1.0.0 - (c) Owen Bulka - 2022"}
}
 Input {
  inputs 0
  name siblings
  xpos 803
  ypos 30
 }
 Dot {
  name Dot1
  xpos 837
  ypos 488
 }
add_layer {sdf_light sdf_light.light_pos_dir_x sdf_light.light_pos_dir_y sdf_light.light_pos_dir_z sdf_light.intensity}
 Constant {
  inputs 0
  channels sdf_light
  color {{parent.dimension_x} {parent.dimension_y} {parent.dimension_z} {parent.intensity}}
  format "1 1 0 0 1 1 1 1x1"
  name light
  xpos 363
  ypos 11
 }
 Dot {
  name Dot9
  xpos 397
  ypos 324
 }
add_layer {sdf_light_properties sdf_light_properties.colour_r sdf_light_properties.colour_g sdf_light_properties.colour_b sdf_light_properties.type}
 Constant {
  inputs 0
  channels sdf_light_properties
  color {{parent.colour.r} {parent.colour.g} {parent.colour.b} {"parent.soften_shadows ? -parent.type : parent.type"}}
  format "1 1 0 0 1 1 1 1x1"
  name light_props
  xpos 501
  ypos 11
 }
 Copy {
  inputs 2
  channels all
  name Copy1
  xpos 501
  ypos 380
 }
add_layer {sdf_light_properties1 sdf_light_properties1.shadow_hardness sdf_light_properties1.falloff}
 Constant {
  inputs 0
  channels sdf_light_properties1
  color {{parent.shadow_hardness} {parent.falloff} 0 0}
  format "1 1 0 0 1 1 1 1x1"
  name light_props1
  xpos 646
  ypos 12
 }
 Copy {
  inputs 2
  channels all
  name Copy2
  xpos 642
  ypos 380
 }
 Group {
  inputs 2
  name sdf_merge
  xpos 642
  ypos 484
  disable {{"!(\[exists parent.input0] && !(parent.input0.disable && !\[exists parent.input0.input0]))"}}
  addUserKnob {20 User}
  addUserKnob {26 warning l Warning: T "Only merge lights with lights, and primitives with primitives"}
 }
  Reformat {
   inputs 0
   type "to box"
   box_width 1
   box_height 1
   box_fixed true
   name Reformat1
   xpos -119
   ypos 440
  }
  Input {
   inputs 0
   name Input2
   xpos 158
   ypos -28
   number 1
  }
  Dot {
   name Dot2
   xpos 192
   ypos -2
  }
set N54403900 [stack 0]
  Dot {
   name Dot3
   xpos 329
   ypos -2
  }
  Dot {
   name Dot4
   xpos 329
   ypos 391
  }
  Input {
   inputs 0
   name Input1
   xpos 0
   ypos -32
  }
  Dot {
   name Dot1
   xpos 34
   ypos -6
  }
set N54401d00 [stack 0]
  Dot {
   name Dot6
   xpos -98
   ypos -6
  }
  Dot {
   name Dot5
   xpos -98
   ypos 336
  }
push $N54403900
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop3
   xpos 158
   ypos 69
  }
  Crop {
   box {0 0 {parent.Dot2.width} 1}
   name Crop4
   xpos 158
   ypos 95
  }
  Transform {
   translate {{parent.Dot1.width} 0}
   center {1 0.5}
   name Transform2
   xpos 158
   ypos 121
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop5
   xpos 158
   ypos 167
  }
push $N54401d00
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop6
   xpos 0
   ypos 66
  }
  Crop {
   box {0 0 {parent.Dot1.width} 1}
   name Crop7
   xpos 0
   ypos 92
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop8
   xpos 0
   ypos 164
  }
  Merge2 {
   inputs 2
   also_merge all
   name Merge1
   xpos 0
   ypos 262
   disable {{"\[exists parent.input1] ? 0:1"}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input1] ? 0:1"}}
   name Switch2
   xpos 0
   ypos 332
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:1"}}
   name Switch1
   xpos 0
   ypos 387
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:\[exists parent.input1] ? 0:1"}}
   name Switch3
   xpos 0
   ypos 456
  }
  Dot {
   name out_dot
   xpos 36
   ypos 518
  }
  Output {
   name Output1
   xpos 2
   ypos 661
  }
 end_group
 Output {
  name Output1
  xpos 642
  ypos 562
 }
end_group
Read {
 inputs 0
 file_type exr
 file /home/ob1/Downloads/winter_lake_01_4k.exr
 format "4096 2048 0 0 4096 2048 1 4K_LatLong"
 origset true
 name Read1
 xpos 510
 ypos 8
}
Reformat {
 format "2048 1024 0 0 2048 1024 1 2K_LatLong"
 scale 0.25
 resize fill
 center false
 name Reformat2
 xpos 510
 ypos 127
}
Dot {
 name Dot4
 xpos 544
 ypos 306
}
Axis2 {
 inputs 0
 rotate {-20 0 0}
 name Axis1
 xpos 300
 ypos -6
}
Camera2 {
 translate {0 1 10}
 rotate {-2.9 0 0}
 focal 58.5
 name Camera1
 xpos 300
 ypos 93
}
Dot {
 name Dot5
 xpos 324
 ypos 306
}
Group {
 inputs 0
 name sdf_light4
 onCreate "__import__('sdf.light', fromlist='SDFLight').SDFLight().handle_node_created()"
 knobChanged "__import__('sdf.light', fromlist='SDFLight').SDFLight().handle_knob_changed()"
 tile_color 0xffffffff
 label point
 xpos 70
 ypos 151
 addUserKnob {20 User l "SDF LIght"}
 addUserKnob {4 type t "The type of light." M {ambient directional point "ambient occlusion"}}
 type point
 addUserKnob {7 dimension_x l "x position" t "The x position of the light." R -10 10}
 dimension_x 3
 addUserKnob {7 dimension_y l "y position" t "The y position of the light." R -10 10}
 dimension_y 2
 addUserKnob {7 dimension_z l "z position" t "The z position of the light." R -10 10}
 dimension_z 4
 addUserKnob {7 intensity t "The intensity of the light." R 0 10}
 intensity 750
 addUserKnob {7 falloff t "The power of the light's intensity falloff. Four is physically accurate." R 0 5}
 falloff 4
 addUserKnob {18 colour t "The colour of the light."}
 colour {1 1 1}
 addUserKnob {6 colour_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {7 shadow_hardness l "shadow hardness" t "The hardness of the shadows, this is a non-physically accurate effect, but can look nice." +DISABLED R 1 100}
 shadow_hardness 10
 addUserKnob {6 soften_shadows l "soften shadows" t "Soften the shadows using a non-phisically accurate effect." -STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {26 info l "" +STARTLINE T "v1.0.0 - (c) Owen Bulka - 2022"}
}
 Input {
  inputs 0
  name siblings
  xpos 803
  ypos 30
 }
 Dot {
  name Dot1
  xpos 837
  ypos 488
 }
 Constant {
  inputs 0
  channels sdf_light
  color {{parent.dimension_x} {parent.dimension_y} {parent.dimension_z} {parent.intensity}}
  format "1 1 0 0 1 1 1 1x1"
  name light
  xpos 363
  ypos 11
 }
 Dot {
  name Dot9
  xpos 397
  ypos 324
 }
 Constant {
  inputs 0
  channels sdf_light_properties
  color {{parent.colour.r} {parent.colour.g} {parent.colour.b} {"parent.soften_shadows ? -parent.type : parent.type"}}
  format "1 1 0 0 1 1 1 1x1"
  name light_props
  xpos 501
  ypos 11
 }
 Copy {
  inputs 2
  channels all
  name Copy1
  xpos 501
  ypos 380
 }
 Constant {
  inputs 0
  channels sdf_light_properties1
  color {{parent.shadow_hardness} {parent.falloff} 0 0}
  format "1 1 0 0 1 1 1 1x1"
  name light_props1
  xpos 646
  ypos 12
 }
 Copy {
  inputs 2
  channels all
  name Copy2
  xpos 642
  ypos 380
 }
 Group {
  inputs 2
  name sdf_merge
  xpos 642
  ypos 484
  disable {{"!(\[exists parent.input0] && !(parent.input0.disable && !\[exists parent.input0.input0]))"}}
  addUserKnob {20 User}
  addUserKnob {26 warning l Warning: T "Only merge lights with lights, and primitives with primitives"}
 }
  Reformat {
   inputs 0
   type "to box"
   box_width 1
   box_height 1
   box_fixed true
   name Reformat1
   xpos -119
   ypos 440
  }
  Input {
   inputs 0
   name Input2
   xpos 158
   ypos -28
   number 1
  }
  Dot {
   name Dot2
   xpos 192
   ypos -2
  }
set N54337900 [stack 0]
  Dot {
   name Dot3
   xpos 329
   ypos -2
  }
  Dot {
   name Dot4
   xpos 329
   ypos 391
  }
  Input {
   inputs 0
   name Input1
   xpos 0
   ypos -32
  }
  Dot {
   name Dot1
   xpos 34
   ypos -6
  }
set N54335d00 [stack 0]
  Dot {
   name Dot6
   xpos -98
   ypos -6
  }
  Dot {
   name Dot5
   xpos -98
   ypos 336
  }
push $N54337900
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop3
   xpos 158
   ypos 69
  }
  Crop {
   box {0 0 {parent.Dot2.width} 1}
   name Crop4
   xpos 158
   ypos 95
  }
  Transform {
   translate {{parent.Dot1.width} 0}
   center {1 0.5}
   name Transform2
   xpos 158
   ypos 121
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop5
   xpos 158
   ypos 167
  }
push $N54335d00
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop6
   xpos 0
   ypos 66
  }
  Crop {
   box {0 0 {parent.Dot1.width} 1}
   name Crop7
   xpos 0
   ypos 92
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop8
   xpos 0
   ypos 164
  }
  Merge2 {
   inputs 2
   also_merge all
   name Merge1
   xpos 0
   ypos 262
   disable {{"\[exists parent.input1] ? 0:1"}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input1] ? 0:1"}}
   name Switch2
   xpos 0
   ypos 332
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:1"}}
   name Switch1
   xpos 0
   ypos 387
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:\[exists parent.input1] ? 0:1"}}
   name Switch3
   xpos 0
   ypos 456
  }
  Dot {
   name out_dot
   xpos 36
   ypos 518
  }
  Output {
   name Output1
   xpos 2
   ypos 661
  }
 end_group
 Output {
  name Output1
  xpos 642
  ypos 562
 }
end_group
Group {
 name sdf_light5
 onCreate "__import__('sdf.light', fromlist='SDFLight').SDFLight().handle_node_created()"
 knobChanged "__import__('sdf.light', fromlist='SDFLight').SDFLight().handle_knob_changed()"
 tile_color 0xffffffff
 label point
 xpos 70
 ypos 223
 addUserKnob {20 User l "SDF LIght"}
 addUserKnob {4 type t "The type of light." M {ambient directional point "ambient occlusion"}}
 type point
 addUserKnob {7 dimension_x l "x position" t "The x position of the light." R -10 10}
 dimension_x -1
 addUserKnob {7 dimension_y l "y position" t "The y position of the light." R -10 10}
 dimension_y 3
 addUserKnob {7 dimension_z l "z position" t "The z position of the light." R -10 10}
 addUserKnob {7 intensity t "The intensity of the light." R 0 10}
 intensity 0.15
 addUserKnob {7 falloff t "The power of the light's intensity falloff. Four is physically accurate." R 0 5}
 addUserKnob {18 colour t "The colour of the light."}
 colour {1 1 1}
 addUserKnob {6 colour_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {7 shadow_hardness l "shadow hardness" t "The hardness of the shadows, this is a non-physically accurate effect, but can look nice." +DISABLED R 1 100}
 shadow_hardness 10
 addUserKnob {6 soften_shadows l "soften shadows" t "Soften the shadows using a non-phisically accurate effect." -STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {26 info l "" +STARTLINE T "v1.0.0 - (c) Owen Bulka - 2022"}
}
 Input {
  inputs 0
  name siblings
  xpos 803
  ypos 30
 }
 Dot {
  name Dot1
  xpos 837
  ypos 488
 }
 Constant {
  inputs 0
  channels sdf_light
  color {{parent.dimension_x} {parent.dimension_y} {parent.dimension_z} {parent.intensity}}
  format "1 1 0 0 1 1 1 1x1"
  name light
  xpos 363
  ypos 11
 }
 Dot {
  name Dot9
  xpos 397
  ypos 324
 }
 Constant {
  inputs 0
  channels sdf_light_properties
  color {{parent.colour.r} {parent.colour.g} {parent.colour.b} {"parent.soften_shadows ? -parent.type : parent.type"}}
  format "1 1 0 0 1 1 1 1x1"
  name light_props
  xpos 501
  ypos 11
 }
 Copy {
  inputs 2
  channels all
  name Copy1
  xpos 501
  ypos 380
 }
 Constant {
  inputs 0
  channels sdf_light_properties1
  color {{parent.shadow_hardness} {parent.falloff} 0 0}
  format "1 1 0 0 1 1 1 1x1"
  name light_props1
  xpos 646
  ypos 12
 }
 Copy {
  inputs 2
  channels all
  name Copy2
  xpos 642
  ypos 380
 }
 Group {
  inputs 2
  name sdf_merge
  xpos 642
  ypos 484
  disable {{"!(\[exists parent.input0] && !(parent.input0.disable && !\[exists parent.input0.input0]))"}}
  addUserKnob {20 User}
  addUserKnob {26 warning l Warning: T "Only merge lights with lights, and primitives with primitives"}
 }
  Reformat {
   inputs 0
   type "to box"
   box_width 1
   box_height 1
   box_fixed true
   name Reformat1
   xpos -119
   ypos 440
  }
  Input {
   inputs 0
   name Input2
   xpos 158
   ypos -28
   number 1
  }
  Dot {
   name Dot2
   xpos 192
   ypos -2
  }
set N9c0c3200 [stack 0]
  Dot {
   name Dot3
   xpos 329
   ypos -2
  }
  Dot {
   name Dot4
   xpos 329
   ypos 391
  }
  Input {
   inputs 0
   name Input1
   xpos 0
   ypos -32
  }
  Dot {
   name Dot1
   xpos 34
   ypos -6
  }
set N9c0c1600 [stack 0]
  Dot {
   name Dot6
   xpos -98
   ypos -6
  }
  Dot {
   name Dot5
   xpos -98
   ypos 336
  }
push $N9c0c3200
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop3
   xpos 158
   ypos 69
  }
  Crop {
   box {0 0 {parent.Dot2.width} 1}
   name Crop4
   xpos 158
   ypos 95
  }
  Transform {
   translate {{parent.Dot1.width} 0}
   center {1 0.5}
   name Transform2
   xpos 158
   ypos 121
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop5
   xpos 158
   ypos 167
  }
push $N9c0c1600
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop6
   xpos 0
   ypos 66
  }
  Crop {
   box {0 0 {parent.Dot1.width} 1}
   name Crop7
   xpos 0
   ypos 92
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop8
   xpos 0
   ypos 164
  }
  Merge2 {
   inputs 2
   also_merge all
   name Merge1
   xpos 0
   ypos 262
   disable {{"\[exists parent.input1] ? 0:1"}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input1] ? 0:1"}}
   name Switch2
   xpos 0
   ypos 332
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:1"}}
   name Switch1
   xpos 0
   ypos 387
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:\[exists parent.input1] ? 0:1"}}
   name Switch3
   xpos 0
   ypos 456
  }
  Dot {
   name out_dot
   xpos 36
   ypos 518
  }
  Output {
   name Output1
   xpos 2
   ypos 661
  }
 end_group
 Output {
  name Output1
  xpos 642
  ypos 562
 }
end_group
Dot {
 name Dot6
 xpos 104
 ypos 330
}
Group {
 inputs 0
 name sdf_primitive14
 onCreate "__import__('sdf.primitive', fromlist='SDFPrimitive').SDFPrimitive().handle_node_created()"
 knobChanged "__import__('sdf.primitive', fromlist='SDFPrimitive').SDFPrimitive().handle_knob_changed()"
 tile_color 0xff0000ff
 label octahedron
 xpos -325
 ypos -466
 addUserKnob {20 User l "SDF Primitive"}
 addUserKnob {4 shape t "The shape of the object." M {sphere ellipsoid "cut sphere" "hollow sphere" "death star" "solid angle" "rectangular prism" "rectangular prism frame" rhombus "triangular prism" cylinder "infinite cylinder" plane capsule cone "infinite cone" "capped cone" "rounded cone" torus "capped torus" link "hexagonal prism" octahedron mandelbulb mandelbox ""}}
 shape octahedron
 addUserKnob {7 dimension_x l "radial extent" t "The maximum distance along the x, y, and z axes. ie. The vertices are at +/-radial_extent on the x, y, and z axes." R 0 10}
 dimension_x 0.15
 addUserKnob {7 dimension_y l "tube radius" t "The radius of the tube of the torus." +HIDDEN R 0 5}
 dimension_y 0.5
 addUserKnob {7 dimension_z l depth t "The depth (z) of the prism." +HIDDEN R 0 10}
 dimension_z 4.1
 addUserKnob {7 dimension_w l "orbital trap blend strength" t "Transition between orbital trap based colouring and the colour provided by the 'colour' knob." +HIDDEN}
 dimension_w 1
 addUserKnob {7 wall_thickness l "wall thickness" t "The thickness of the walls of the shape, if the shape is hollow." +DISABLED}
 wall_thickness 0.01
 addUserKnob {6 hollow t "If enabled, the object will be hollow, with a thickness of 'wall thickness'." -STARTLINE}
 addUserKnob {7 edge_radius l "edge radius" t "This parameter increases the hit tolerance by the specified amount for this specific object, having the effect of rounding off the edges."}
 addUserKnob {6 mirror_x l "mirror x" t "Mirror the shape in the yz-plane." +STARTLINE}
 addUserKnob {6 mirror_y l "mirror y" t "Mirror the shape in the xz-plane." -STARTLINE}
 addUserKnob {6 mirror_z l "mirror z" t "Mirror the shape in the xy-plane." -STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {18 colour t "The diffuse colour of the shape."}
 colour {1 0 0}
 addUserKnob {6 colour_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {7 reflection t "The amount of light that is reflected off the shape's surface. This plus 'transmission' should be less than or equal to one."}
 reflection 0.22
 addUserKnob {7 transmission t "The amount of light that is transmitted through the shape's surface. This plus 'reflection' should be less than or equal to one."}
 addUserKnob {7 refractive_index l "refractive index" t "The index of refraction of the object." R 1 4}
 refractive_index 1.5
 addUserKnob {7 roughness t "The object's surface will scatter the light more the higher this value is. Increase the 'pixel subdivisions' to make it look less aliased."}
 addUserKnob {7 emission t "The amount of light emitted by the object. Increase the 'hdri lighting samples' to give it less noise. This is more of a placeholder for when the path marched version is released :)"}
 emission 0.055
 addUserKnob {26 div0 l "" +STARTLINE}
 addUserKnob {13 translate t "The translation of the object in its local coordinate space."}
 translate {0 0.05 0}
 addUserKnob {13 rotate t "The rotation of the object in its local coordinate space."}
 rotate {10 {"45 + frame*2"} 0}
 addUserKnob {13 elongation t "The elongation of the object along the respective axes." +DISABLED}
 elongation {0.1 0 0}
 addUserKnob {6 elongate t "Enable the elongation of the object." -STARTLINE}
 addUserKnob {7 uniform_scale l "uniform scale" t "The scale of the object in its local coordinate space, along all axes." R 0 10}
 uniform_scale 1
 addUserKnob {26 div1 l "" +STARTLINE}
 addUserKnob {4 repetition t "Repeat objects in the scene with no extra memory consumption. Note that if the repeated objects overlap some strange things can occur." -STARTLINE M {none finite infinite "" ""}}
 addUserKnob {13 repetition_params l spacing t "The spacing along each positive axis to repeat the objects." +HIDDEN}
 repetition_params {1.1 1.1 100}
 addUserKnob {7 repetition_spacing l spacing t "The spacing between the objects." +HIDDEN R 0 10}
 repetition_spacing 1.1
 addUserKnob {26 ""}
 addUserKnob {4 blend_type l "blend type" t "The type of interaction this object will have with its children.\n    Union: All objects will appear as normal.\n    Subtraction: All children of this object will be subtracted from this object, leaving holes.\n    Intersection: Only the region where this object and its children overlap will remain.\n    Smooth Union: All children will smoothly blend together with this object according to the 'blend strength'.\n    Smooth Subtraction: All children of this object will be subtracted from this object, leaving holes that are smoothed according to the 'blend strength'.\n    Smooth Intersection: Only the region where this object and its children overlap will remain, and the remaining regions will be smoothed according to the 'blend strength'." +DISABLED M {union subtraction intersection "smooth union" "smooth subtraction" "smooth intersection"}}
 addUserKnob {7 blend_strength l "blend strength" t "The amount to blend between this and its child objects if one of the 'Smooth' blend types are selected." +DISABLED}
 blend_strength 0.125
 addUserKnob {6 is_bound l "is bound" t "If enabled, this object will act as a bounding volume for all its children. This means that until a ray hits the bounding volume, none of the child object's signed distance fields will be computed. This can vastly improve performance, especially when many complex objects are far from the camera." +DISABLED +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {26 info l "" +STARTLINE T "v1.0.0 - (c) Owen Bulka - 2022"}
}
 Input {
  inputs 0
  name siblings
  xpos 1484
  ypos 476
 }
 Dot {
  name Dot2
  xpos 1518
  ypos 904
 }
 Input {
  inputs 0
  name children
  xpos 1357
  ypos 475
  number 1
 }
 Dot {
  name Dot1
  xpos 1391
  ypos 826
 }
add_layer {sdf_position_scale sdf_position_scale.position_x sdf_position_scale.position_y sdf_position_scale.position_z sdf_position_scale.uniform_scale}
 Constant {
  inputs 0
  channels sdf_position_scale
  color {{parent.translate.x} {parent.translate.y} {parent.translate.z} {parent.uniform_scale}}
  format "1 1 0 0 1 1 1 1x1"
  name position_scale
  xpos 280
  ypos 455
 }
 Dot {
  name Dot17
  xpos 314
  ypos 647
 }
add_layer {sdf_rotation_wall_thickness sdf_rotation_wall_thickness.rotation_x sdf_rotation_wall_thickness.rotation_y sdf_rotation_wall_thickness.rotation_z sdf_rotation_wall_thickness.wall_thickness}
 Constant {
  inputs 0
  channels sdf_rotation_wall_thickness
  color {{"parent.rotate.x * pi / 180"} {"parent.rotate.y * pi / 180"} {"parent.rotate.z * pi / 180"} {parent.wall_thickness}}
  format "1 1 0 0 1 1 1 1x1"
  name rotation
  xpos 403
  ypos 457
 }
 Copy {
  inputs 2
  channels all
  name Copy1
  xpos 403
  ypos 726
 }
add_layer {sdf_dimensions sdf_dimensions.dimension_x sdf_dimensions.dimension_y sdf_dimensions.dimension_z sdf_dimensions.dimension_w}
 Constant {
  inputs 0
  channels sdf_dimensions
  color {{parent.dimension_x} {parent.dimension_y} {parent.dimension_z} {parent.dimension_w}}
  format "1 1 0 0 1 1 1 1x1"
  name dimensions
  xpos 540
  ypos 460
 }
 Copy {
  inputs 2
  channels all
  name Copy2
  xpos 540
  ypos 726
 }
add_layer {sdf_colour sdf_colour.colour_r sdf_colour.colour_g sdf_colour.colour_b sdf_colour.colour_a}
 Constant {
  inputs 0
  channels sdf_colour
  color {{parent.colour.r} {parent.colour.g} {parent.colour.b} {parent.refractive_index}}
  format "1 1 0 0 1 1 1 1x1"
  name colour
  xpos 669
  ypos 459
 }
 Copy {
  inputs 2
  channels all
  name Copy3
  xpos 669
  ypos 726
 }
add_layer {sdf_shape sdf_shape.shape_type sdf_shape.shape_operations sdf_shape.num_children sdf_shape.blend_strength}
 Constant {
  inputs 0
  channels sdf_shape
  color {{parent.shape} {"parent.repetition | (parent.elongate ? 4 : 0) | (parent.mirror_x ? 8 : 0) | (parent.mirror_y ? 16 : 0) | (parent.mirror_z ? 32 : 0) | (parent.hollow ? 64 : 0) | (parent.blend_type > 0 ? (1 << (parent.blend_type + 6)) : 0) | (parent.is_bound ? 4096 : 0)"} {"parent.sdf_merge.disable ? 0 : parent.sdf_merge.input1.width"} {parent.blend_strength}}
  format "1 1 0 0 1 1 1 1x1"
  name shape
  xpos 806
  ypos 462
 }
 Copy {
  inputs 2
  channels all
  name Copy4
  xpos 806
  ypos 726
 }
add_layer {sdf_surface sdf_surface.reflection sdf_surface.transmission sdf_surface.emission sdf_surface.roughness}
 Constant {
  inputs 0
  channels sdf_surface
  color {{parent.reflection} {parent.transmission} {parent.emission} {parent.roughness}}
  format "1 1 0 0 1 1 1 1x1"
  name surface
  xpos 935
  ypos 460
 }
 Copy {
  inputs 2
  channels all
  name Copy5
  xpos 936
  ypos 726
 }
add_layer {sdf_shape_mods_0 sdf_shape_mods_0.repetion_x sdf_shape_mods_0.repetion_y sdf_shape_mods_0.repetion_z sdf_shape_mods_0.repetion_w}
 Constant {
  inputs 0
  channels sdf_shape_mods_0
  color {{parent.repetition_params.x} {parent.repetition_params.y} {parent.repetition_params.z} {parent.repetition_spacing}}
  format "1 1 0 0 1 1 1 1x1"
  name shape_mods
  xpos 1056
  ypos 463
 }
 Copy {
  inputs 2
  channels all
  name Copy6
  xpos 1056
  ypos 726
 }
add_layer {sdf_shape_mods_1 sdf_shape_mods_1.elongation_x sdf_shape_mods_1.elongation_y sdf_shape_mods_1.elongation_z sdf_shape_mods_1.edge_radius}
 Constant {
  inputs 0
  channels sdf_shape_mods_1
  color {{parent.elongation.x} {parent.elongation.y} {parent.elongation.z} {parent.edge_radius}}
  format "1 1 0 0 1 1 1 1x1"
  name shape_mods1
  xpos 1183
  ypos 465
 }
 Copy {
  inputs 2
  channels all
  name Copy7
  xpos 1183
  ypos 726
 }
 Group {
  inputs 2
  name sdf_merge
  xpos 1183
  ypos 822
  disable {{"!(\[exists parent.input1] && !input1.parent.input1.disable)"}}
  addUserKnob {20 User}
  addUserKnob {26 warning l Warning: T "Only merge lights with lights, and primitives with primitives"}
 }
  Reformat {
   inputs 0
   type "to box"
   box_width 1
   box_height 1
   box_fixed true
   name Reformat1
   xpos -119
   ypos 440
  }
  Input {
   inputs 0
   name Input2
   xpos 158
   ypos -28
   number 1
  }
  Dot {
   name Dot2
   xpos 192
   ypos -2
  }
set N6c226b00 [stack 0]
  Dot {
   name Dot3
   xpos 329
   ypos -2
  }
  Dot {
   name Dot4
   xpos 329
   ypos 391
  }
  Input {
   inputs 0
   name Input1
   xpos 0
   ypos -32
  }
  Dot {
   name Dot1
   xpos 34
   ypos -6
  }
set N6c224f00 [stack 0]
  Dot {
   name Dot6
   xpos -98
   ypos -6
  }
  Dot {
   name Dot5
   xpos -98
   ypos 336
  }
push $N6c226b00
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop3
   xpos 158
   ypos 69
  }
  Crop {
   box {0 0 {parent.Dot2.width} 1}
   name Crop4
   xpos 158
   ypos 95
  }
  Transform {
   translate {{parent.Dot1.width} 0}
   center {1 0.5}
   name Transform2
   xpos 158
   ypos 121
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop5
   xpos 158
   ypos 167
  }
push $N6c224f00
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop6
   xpos 0
   ypos 66
  }
  Crop {
   box {0 0 {parent.Dot1.width} 1}
   name Crop7
   xpos 0
   ypos 92
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop8
   xpos 0
   ypos 164
  }
  Merge2 {
   inputs 2
   also_merge all
   name Merge1
   xpos 0
   ypos 262
   disable {{"\[exists parent.input1] ? 0:1"}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input1] ? 0:1"}}
   name Switch2
   xpos 0
   ypos 332
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:1"}}
   name Switch1
   xpos 0
   ypos 387
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:\[exists parent.input1] ? 0:1"}}
   name Switch3
   xpos 0
   ypos 456
  }
  Dot {
   name out_dot
   xpos 36
   ypos 518
  }
  Output {
   name Output1
   xpos 2
   ypos 661
  }
 end_group
 Group {
  inputs 2
  name sdf_merge1
  xpos 1183
  ypos 900
  disable {{"!(\[exists parent.input0] && !(parent.input0.disable && !\[exists parent.input0.input0]))"}}
  addUserKnob {20 User}
  addUserKnob {26 warning l Warning: T "Only merge lights with lights, and primitives with primitives"}
 }
  Reformat {
   inputs 0
   type "to box"
   box_width 1
   box_height 1
   box_fixed true
   name Reformat1
   xpos -119
   ypos 440
  }
  Input {
   inputs 0
   name Input2
   xpos 158
   ypos -28
   number 1
  }
  Dot {
   name Dot2
   xpos 192
   ypos -2
  }
set N6c1c0800 [stack 0]
  Dot {
   name Dot3
   xpos 329
   ypos -2
  }
  Dot {
   name Dot4
   xpos 329
   ypos 391
  }
  Input {
   inputs 0
   name Input1
   xpos 0
   ypos -32
  }
  Dot {
   name Dot1
   xpos 34
   ypos -6
  }
set N6c1a6b00 [stack 0]
  Dot {
   name Dot6
   xpos -98
   ypos -6
  }
  Dot {
   name Dot5
   xpos -98
   ypos 336
  }
push $N6c1c0800
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop3
   xpos 158
   ypos 69
  }
  Crop {
   box {0 0 {parent.Dot2.width} 1}
   name Crop4
   xpos 158
   ypos 95
  }
  Transform {
   translate {{parent.Dot1.width} 0}
   center {1 0.5}
   name Transform2
   xpos 158
   ypos 121
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop5
   xpos 158
   ypos 167
  }
push $N6c1a6b00
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop6
   xpos 0
   ypos 66
  }
  Crop {
   box {0 0 {parent.Dot1.width} 1}
   name Crop7
   xpos 0
   ypos 92
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop8
   xpos 0
   ypos 164
  }
  Merge2 {
   inputs 2
   also_merge all
   name Merge1
   xpos 0
   ypos 262
   disable {{"\[exists parent.input1] ? 0:1"}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input1] ? 0:1"}}
   name Switch2
   xpos 0
   ypos 332
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:1"}}
   name Switch1
   xpos 0
   ypos 387
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:\[exists parent.input1] ? 0:1"}}
   name Switch3
   xpos 0
   ypos 456
  }
  Dot {
   name out_dot
   xpos 36
   ypos 518
  }
  Output {
   name Output1
   xpos 2
   ypos 661
  }
 end_group
 Output {
  name Output1
  xpos 1183
  ypos 1002
 }
end_group
Group {
 name sdf_primitive5
 onCreate "__import__('sdf.primitive', fromlist='SDFPrimitive').SDFPrimitive().handle_node_created()"
 knobChanged "__import__('sdf.primitive', fromlist='SDFPrimitive').SDFPrimitive().handle_knob_changed()"
 tile_color 0x1a1a1aff
 label cylinder
 xpos -150
 ypos -466
 addUserKnob {20 User l "SDF Primitive"}
 addUserKnob {4 shape t "The shape of the object." M {sphere ellipsoid "cut sphere" "hollow sphere" "death star" "solid angle" "rectangular prism" "rectangular prism frame" rhombus "triangular prism" cylinder "infinite cylinder" plane capsule cone "infinite cone" "capped cone" "rounded cone" torus "capped torus" link "hexagonal prism" octahedron mandelbulb mandelbox ""}}
 shape cylinder
 addUserKnob {7 dimension_x l radius t "The radius (xz-plane) of the cylinder." R 0 10}
 dimension_x 0.3
 addUserKnob {7 dimension_y l height t "The height (y-axis) of the cylinder." R 0 10}
 dimension_y 0.01
 addUserKnob {7 dimension_z l "max square radius" t "When the square radius has reached this length, stop iterating." +HIDDEN R 1 9}
 dimension_z 4
 addUserKnob {7 dimension_w l "orbital trap blend strength" t "Transition between orbital trap based colouring and the colour provided by the 'colour' knob." +HIDDEN}
 dimension_w 1
 addUserKnob {7 wall_thickness l "wall thickness" t "The thickness of the walls of the shape, if the shape is hollow." +DISABLED}
 wall_thickness 0.01
 addUserKnob {6 hollow t "If enabled, the object will be hollow, with a thickness of 'wall thickness'." -STARTLINE}
 addUserKnob {7 edge_radius l "edge radius" t "This parameter increases the hit tolerance by the specified amount for this specific object, having the effect of rounding off the edges."}
 addUserKnob {6 mirror_x l "mirror x" t "Mirror the shape in the yz-plane." +STARTLINE}
 addUserKnob {6 mirror_y l "mirror y" t "Mirror the shape in the xz-plane." -STARTLINE}
 addUserKnob {6 mirror_z l "mirror z" t "Mirror the shape in the xy-plane." -STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {18 colour t "The diffuse colour of the shape."}
 colour 0.1
 addUserKnob {6 colour_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {7 reflection t "The amount of light that is reflected off the shape's surface. This plus 'transmission' should be less than or equal to one."}
 addUserKnob {7 transmission t "The amount of light that is transmitted through the shape's surface. This plus 'reflection' should be less than or equal to one."}
 addUserKnob {7 refractive_index l "refractive index" t "The index of refraction of the object." R 1 4}
 refractive_index 1.33
 addUserKnob {7 roughness t "The object's surface will scatter the light more the higher this value is. Increase the 'pixel subdivisions' to make it look less aliased."}
 addUserKnob {7 emission t "The amount of light emitted by the object. Increase the 'hdri lighting samples' to give it less noise. This is more of a placeholder for when the path marched version is released :)"}
 addUserKnob {26 div0 l "" +STARTLINE}
 addUserKnob {13 translate t "The translation of the object in its local coordinate space."}
 translate {0 -0.17 0}
 addUserKnob {13 rotate t "The rotation of the object in its local coordinate space."}
 addUserKnob {13 elongation t "The elongation of the object along the respective axes." +DISABLED}
 elongation {0.1 0 0}
 addUserKnob {6 elongate t "Enable the elongation of the object." -STARTLINE}
 addUserKnob {7 uniform_scale l "uniform scale" t "The scale of the object in its local coordinate space, along all axes." R 0 10}
 uniform_scale 1
 addUserKnob {26 div1 l "" +STARTLINE}
 addUserKnob {4 repetition t "Repeat objects in the scene with no extra memory consumption. Note that if the repeated objects overlap some strange things can occur." -STARTLINE M {none finite infinite "" ""}}
 addUserKnob {13 repetition_params l spacing t "The spacing along each positive axis to repeat the objects." +HIDDEN}
 repetition_params {1.1 1.1 100}
 addUserKnob {7 repetition_spacing l spacing t "The spacing between the objects." +HIDDEN R 0 10}
 repetition_spacing 1.1
 addUserKnob {26 ""}
 addUserKnob {4 blend_type l "blend type" t "The type of interaction this object will have with its children.\n    Union: All objects will appear as normal.\n    Subtraction: All children of this object will be subtracted from this object, leaving holes.\n    Intersection: Only the region where this object and its children overlap will remain.\n    Smooth Union: All children will smoothly blend together with this object according to the 'blend strength'.\n    Smooth Subtraction: All children of this object will be subtracted from this object, leaving holes that are smoothed according to the 'blend strength'.\n    Smooth Intersection: Only the region where this object and its children overlap will remain, and the remaining regions will be smoothed according to the 'blend strength'." +DISABLED M {union subtraction intersection "smooth union" "smooth subtraction" "smooth intersection"}}
 addUserKnob {7 blend_strength l "blend strength" t "The amount to blend between this and its child objects if one of the 'Smooth' blend types are selected." +DISABLED}
 blend_strength 0.5
 addUserKnob {6 is_bound l "is bound" t "If enabled, this object will act as a bounding volume for all its children. This means that until a ray hits the bounding volume, none of the child object's signed distance fields will be computed. This can vastly improve performance, especially when many complex objects are far from the camera." +DISABLED +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {26 info l "" +STARTLINE T "v1.0.0 - (c) Owen Bulka - 2022"}
}
 Input {
  inputs 0
  name siblings
  xpos 1484
  ypos 476
 }
 Dot {
  name Dot2
  xpos 1518
  ypos 904
 }
 Input {
  inputs 0
  name children
  xpos 1357
  ypos 475
  number 1
 }
 Dot {
  name Dot1
  xpos 1391
  ypos 826
 }
 Constant {
  inputs 0
  channels sdf_position_scale
  color {{parent.translate.x} {parent.translate.y} {parent.translate.z} {parent.uniform_scale}}
  format "1 1 0 0 1 1 1 1x1"
  name position_scale
  xpos 280
  ypos 455
 }
 Dot {
  name Dot17
  xpos 314
  ypos 647
 }
 Constant {
  inputs 0
  channels sdf_rotation_wall_thickness
  color {{"parent.rotate.x * pi / 180"} {"parent.rotate.y * pi / 180"} {"parent.rotate.z * pi / 180"} {parent.wall_thickness}}
  format "1 1 0 0 1 1 1 1x1"
  name rotation
  xpos 403
  ypos 457
 }
 Copy {
  inputs 2
  channels all
  name Copy1
  xpos 403
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_dimensions
  color {{parent.dimension_x} {parent.dimension_y} {parent.dimension_z} {parent.dimension_w}}
  format "1 1 0 0 1 1 1 1x1"
  name dimensions
  xpos 540
  ypos 460
 }
 Copy {
  inputs 2
  channels all
  name Copy2
  xpos 540
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_colour
  color {{parent.colour.r} {parent.colour.g} {parent.colour.b} {parent.refractive_index}}
  format "1 1 0 0 1 1 1 1x1"
  name colour
  xpos 669
  ypos 459
 }
 Copy {
  inputs 2
  channels all
  name Copy3
  xpos 669
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape
  color {{parent.shape} {"parent.repetition | (parent.elongate ? 4 : 0) | (parent.mirror_x ? 8 : 0) | (parent.mirror_y ? 16 : 0) | (parent.mirror_z ? 32 : 0) | (parent.hollow ? 64 : 0) | (parent.blend_type > 0 ? (1 << (parent.blend_type + 6)) : 0) | (parent.is_bound ? 4096 : 0)"} {"parent.sdf_merge.disable ? 0 : parent.sdf_merge.input1.width"} {parent.blend_strength}}
  format "1 1 0 0 1 1 1 1x1"
  name shape
  xpos 806
  ypos 462
 }
 Copy {
  inputs 2
  channels all
  name Copy4
  xpos 806
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_surface
  color {{parent.reflection} {parent.transmission} {parent.emission} {parent.roughness}}
  format "1 1 0 0 1 1 1 1x1"
  name surface
  xpos 935
  ypos 460
 }
 Copy {
  inputs 2
  channels all
  name Copy5
  xpos 936
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape_mods_0
  color {{parent.repetition_params.x} {parent.repetition_params.y} {parent.repetition_params.z} {parent.repetition_spacing}}
  format "1 1 0 0 1 1 1 1x1"
  name shape_mods
  xpos 1056
  ypos 463
 }
 Copy {
  inputs 2
  channels all
  name Copy6
  xpos 1056
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape_mods_1
  color {{parent.elongation.x} {parent.elongation.y} {parent.elongation.z} {parent.edge_radius}}
  format "1 1 0 0 1 1 1 1x1"
  name shape_mods1
  xpos 1183
  ypos 465
 }
 Copy {
  inputs 2
  channels all
  name Copy7
  xpos 1183
  ypos 726
 }
 Group {
  inputs 2
  name sdf_merge
  xpos 1183
  ypos 822
  disable {{"!(\[exists parent.input1] && !input1.parent.input1.disable)"}}
  addUserKnob {20 User}
  addUserKnob {26 warning l Warning: T "Only merge lights with lights, and primitives with primitives"}
 }
  Reformat {
   inputs 0
   type "to box"
   box_width 1
   box_height 1
   box_fixed true
   name Reformat1
   xpos -119
   ypos 440
  }
  Input {
   inputs 0
   name Input2
   xpos 158
   ypos -28
   number 1
  }
  Dot {
   name Dot2
   xpos 192
   ypos -2
  }
set N6c2e4800 [stack 0]
  Dot {
   name Dot3
   xpos 329
   ypos -2
  }
  Dot {
   name Dot4
   xpos 329
   ypos 391
  }
  Input {
   inputs 0
   name Input1
   xpos 0
   ypos -32
  }
  Dot {
   name Dot1
   xpos 34
   ypos -6
  }
set N6c2b6b00 [stack 0]
  Dot {
   name Dot6
   xpos -98
   ypos -6
  }
  Dot {
   name Dot5
   xpos -98
   ypos 336
  }
push $N6c2e4800
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop3
   xpos 158
   ypos 69
  }
  Crop {
   box {0 0 {parent.Dot2.width} 1}
   name Crop4
   xpos 158
   ypos 95
  }
  Transform {
   translate {{parent.Dot1.width} 0}
   center {1 0.5}
   name Transform2
   xpos 158
   ypos 121
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop5
   xpos 158
   ypos 167
  }
push $N6c2b6b00
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop6
   xpos 0
   ypos 66
  }
  Crop {
   box {0 0 {parent.Dot1.width} 1}
   name Crop7
   xpos 0
   ypos 92
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop8
   xpos 0
   ypos 164
  }
  Merge2 {
   inputs 2
   also_merge all
   name Merge1
   xpos 0
   ypos 262
   disable {{"\[exists parent.input1] ? 0:1"}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input1] ? 0:1"}}
   name Switch2
   xpos 0
   ypos 332
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:1"}}
   name Switch1
   xpos 0
   ypos 387
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:\[exists parent.input1] ? 0:1"}}
   name Switch3
   xpos 0
   ypos 456
  }
  Dot {
   name out_dot
   xpos 36
   ypos 518
  }
  Output {
   name Output1
   xpos 2
   ypos 661
  }
 end_group
 Group {
  inputs 2
  name sdf_merge1
  xpos 1183
  ypos 900
  disable {{"!(\[exists parent.input0] && !(parent.input0.disable && !\[exists parent.input0.input0]))"}}
  addUserKnob {20 User}
  addUserKnob {26 warning l Warning: T "Only merge lights with lights, and primitives with primitives"}
 }
  Reformat {
   inputs 0
   type "to box"
   box_width 1
   box_height 1
   box_fixed true
   name Reformat1
   xpos -119
   ypos 440
  }
  Input {
   inputs 0
   name Input2
   xpos 158
   ypos -28
   number 1
  }
  Dot {
   name Dot2
   xpos 192
   ypos -2
  }
set N881aa400 [stack 0]
  Dot {
   name Dot3
   xpos 329
   ypos -2
  }
  Dot {
   name Dot4
   xpos 329
   ypos 391
  }
  Input {
   inputs 0
   name Input1
   xpos 0
   ypos -32
  }
  Dot {
   name Dot1
   xpos 34
   ypos -6
  }
set N881a8800 [stack 0]
  Dot {
   name Dot6
   xpos -98
   ypos -6
  }
  Dot {
   name Dot5
   xpos -98
   ypos 336
  }
push $N881aa400
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop3
   xpos 158
   ypos 69
  }
  Crop {
   box {0 0 {parent.Dot2.width} 1}
   name Crop4
   xpos 158
   ypos 95
  }
  Transform {
   translate {{parent.Dot1.width} 0}
   center {1 0.5}
   name Transform2
   xpos 158
   ypos 121
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop5
   xpos 158
   ypos 167
  }
push $N881a8800
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop6
   xpos 0
   ypos 66
  }
  Crop {
   box {0 0 {parent.Dot1.width} 1}
   name Crop7
   xpos 0
   ypos 92
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop8
   xpos 0
   ypos 164
  }
  Merge2 {
   inputs 2
   also_merge all
   name Merge1
   xpos 0
   ypos 262
   disable {{"\[exists parent.input1] ? 0:1"}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input1] ? 0:1"}}
   name Switch2
   xpos 0
   ypos 332
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:1"}}
   name Switch1
   xpos 0
   ypos 387
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:\[exists parent.input1] ? 0:1"}}
   name Switch3
   xpos 0
   ypos 456
  }
  Dot {
   name out_dot
   xpos 36
   ypos 518
  }
  Output {
   name Output1
   xpos 2
   ypos 661
  }
 end_group
 Output {
  name Output1
  xpos 1183
  ypos 1002
 }
end_group
Group {
 inputs 0
 name sdf_primitive10
 onCreate "__import__('sdf.primitive', fromlist='SDFPrimitive').SDFPrimitive().handle_node_created()"
 knobChanged "__import__('sdf.primitive', fromlist='SDFPrimitive').SDFPrimitive().handle_knob_changed()"
 tile_color 0xff
 label sphere
 xpos -412
 ypos -357
 addUserKnob {20 User l "SDF Primitive"}
 addUserKnob {4 shape t "The shape of the object." M {sphere ellipsoid "cut sphere" "hollow sphere" "death star" "solid angle" "rectangular prism" "rectangular prism frame" rhombus "triangular prism" cylinder "infinite cylinder" plane capsule cone "infinite cone" "capped cone" "rounded cone" torus "capped torus" link "hexagonal prism" octahedron mandelbulb mandelbox ""}}
 addUserKnob {7 dimension_x l radius t "The radius of the sphere." R 0 10}
 dimension_x 0.03
 addUserKnob {7 dimension_y l iterations t "The number of iterations to compute, the higher this is the slower it will be to compute, but the deeper the fractal will have detail." +HIDDEN R 1 30}
 dimension_y 10
 addUserKnob {7 dimension_z l "max square radius" t "When the square radius has reached this length, stop iterating." +HIDDEN R 1 9}
 dimension_z 4
 addUserKnob {7 dimension_w l "orbital trap blend strength" t "Transition between orbital trap based colouring and the colour provided by the 'colour' knob." +HIDDEN}
 dimension_w 1
 addUserKnob {7 wall_thickness l "wall thickness" t "The thickness of the walls of the shape, if the shape is hollow." +DISABLED}
 wall_thickness 0.01
 addUserKnob {6 hollow t "If enabled, the object will be hollow, with a thickness of 'wall thickness'." -STARTLINE}
 addUserKnob {7 edge_radius l "edge radius" t "This parameter increases the hit tolerance by the specified amount for this specific object, having the effect of rounding off the edges."}
 addUserKnob {6 mirror_x l "mirror x" t "Mirror the shape in the yz-plane." +STARTLINE}
 addUserKnob {6 mirror_y l "mirror y" t "Mirror the shape in the xz-plane." -STARTLINE}
 addUserKnob {6 mirror_z l "mirror z" t "Mirror the shape in the xy-plane." -STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {18 colour t "The diffuse colour of the shape."}
 colour {0 0 0}
 addUserKnob {6 colour_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {7 reflection t "The amount of light that is reflected off the shape's surface. This plus 'transmission' should be less than or equal to one."}
 reflection 0.1
 addUserKnob {7 transmission t "The amount of light that is transmitted through the shape's surface. This plus 'reflection' should be less than or equal to one."}
 addUserKnob {7 refractive_index l "refractive index" t "The index of refraction of the object." R 1 4}
 refractive_index 1.33
 addUserKnob {7 roughness t "The object's surface will scatter the light more the higher this value is. Increase the 'pixel subdivisions' to make it look less aliased."}
 addUserKnob {7 emission t "The amount of light emitted by the object. Increase the 'hdri lighting samples' to give it less noise. This is more of a placeholder for when the path marched version is released :)"}
 addUserKnob {26 div0 l "" +STARTLINE}
 addUserKnob {13 translate t "The translation of the object in its local coordinate space."}
 translate {0.1 0.1 0.25}
 addUserKnob {13 rotate t "The rotation of the object in its local coordinate space."}
 addUserKnob {13 elongation t "The elongation of the object along the respective axes." +DISABLED}
 elongation {0.1 0 0}
 addUserKnob {6 elongate t "Enable the elongation of the object." -STARTLINE}
 addUserKnob {7 uniform_scale l "uniform scale" t "The scale of the object in its local coordinate space, along all axes." R 0 10}
 uniform_scale 1
 addUserKnob {26 div1 l "" +STARTLINE}
 addUserKnob {4 repetition t "Repeat objects in the scene with no extra memory consumption. Note that if the repeated objects overlap some strange things can occur." -STARTLINE M {none finite infinite "" ""}}
 addUserKnob {13 repetition_params l spacing t "The spacing along each positive axis to repeat the objects." +HIDDEN}
 repetition_params {1.1 1.1 100}
 addUserKnob {7 repetition_spacing l spacing t "The spacing between the objects." +HIDDEN R 0 10}
 repetition_spacing 1.1
 addUserKnob {26 ""}
 addUserKnob {4 blend_type l "blend type" t "The type of interaction this object will have with its children.\n    Union: All objects will appear as normal.\n    Subtraction: All children of this object will be subtracted from this object, leaving holes.\n    Intersection: Only the region where this object and its children overlap will remain.\n    Smooth Union: All children will smoothly blend together with this object according to the 'blend strength'.\n    Smooth Subtraction: All children of this object will be subtracted from this object, leaving holes that are smoothed according to the 'blend strength'.\n    Smooth Intersection: Only the region where this object and its children overlap will remain, and the remaining regions will be smoothed according to the 'blend strength'." +DISABLED M {union subtraction intersection "smooth union" "smooth subtraction" "smooth intersection"}}
 addUserKnob {7 blend_strength l "blend strength" t "The amount to blend between this and its child objects if one of the 'Smooth' blend types are selected." +DISABLED}
 blend_strength 0.5
 addUserKnob {6 is_bound l "is bound" t "If enabled, this object will act as a bounding volume for all its children. This means that until a ray hits the bounding volume, none of the child object's signed distance fields will be computed. This can vastly improve performance, especially when many complex objects are far from the camera." +DISABLED +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {26 info l "" +STARTLINE T "v1.0.0 - (c) Owen Bulka - 2022"}
}
 Input {
  inputs 0
  name siblings
  xpos 1484
  ypos 476
 }
 Dot {
  name Dot2
  xpos 1518
  ypos 904
 }
 Input {
  inputs 0
  name children
  xpos 1357
  ypos 475
  number 1
 }
 Dot {
  name Dot1
  xpos 1391
  ypos 826
 }
 Constant {
  inputs 0
  channels sdf_position_scale
  color {{parent.translate.x} {parent.translate.y} {parent.translate.z} {parent.uniform_scale}}
  format "1 1 0 0 1 1 1 1x1"
  name position_scale
  xpos 280
  ypos 455
 }
 Dot {
  name Dot17
  xpos 314
  ypos 647
 }
 Constant {
  inputs 0
  channels sdf_rotation_wall_thickness
  color {{"parent.rotate.x * pi / 180"} {"parent.rotate.y * pi / 180"} {"parent.rotate.z * pi / 180"} {parent.wall_thickness}}
  format "1 1 0 0 1 1 1 1x1"
  name rotation
  xpos 403
  ypos 457
 }
 Copy {
  inputs 2
  channels all
  name Copy1
  xpos 403
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_dimensions
  color {{parent.dimension_x} {parent.dimension_y} {parent.dimension_z} {parent.dimension_w}}
  format "1 1 0 0 1 1 1 1x1"
  name dimensions
  xpos 540
  ypos 460
 }
 Copy {
  inputs 2
  channels all
  name Copy2
  xpos 540
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_colour
  color {{parent.colour.r} {parent.colour.g} {parent.colour.b} {parent.refractive_index}}
  format "1 1 0 0 1 1 1 1x1"
  name colour
  xpos 669
  ypos 459
 }
 Copy {
  inputs 2
  channels all
  name Copy3
  xpos 669
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape
  color {{parent.shape} {"parent.repetition | (parent.elongate ? 4 : 0) | (parent.mirror_x ? 8 : 0) | (parent.mirror_y ? 16 : 0) | (parent.mirror_z ? 32 : 0) | (parent.hollow ? 64 : 0) | (parent.blend_type > 0 ? (1 << (parent.blend_type + 6)) : 0) | (parent.is_bound ? 4096 : 0)"} {"parent.sdf_merge.disable ? 0 : parent.sdf_merge.input1.width"} {parent.blend_strength}}
  format "1 1 0 0 1 1 1 1x1"
  name shape
  xpos 806
  ypos 462
 }
 Copy {
  inputs 2
  channels all
  name Copy4
  xpos 806
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_surface
  color {{parent.reflection} {parent.transmission} {parent.emission} {parent.roughness}}
  format "1 1 0 0 1 1 1 1x1"
  name surface
  xpos 935
  ypos 460
 }
 Copy {
  inputs 2
  channels all
  name Copy5
  xpos 936
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape_mods_0
  color {{parent.repetition_params.x} {parent.repetition_params.y} {parent.repetition_params.z} {parent.repetition_spacing}}
  format "1 1 0 0 1 1 1 1x1"
  name shape_mods
  xpos 1056
  ypos 463
 }
 Copy {
  inputs 2
  channels all
  name Copy6
  xpos 1056
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape_mods_1
  color {{parent.elongation.x} {parent.elongation.y} {parent.elongation.z} {parent.edge_radius}}
  format "1 1 0 0 1 1 1 1x1"
  name shape_mods1
  xpos 1183
  ypos 465
 }
 Copy {
  inputs 2
  channels all
  name Copy7
  xpos 1183
  ypos 726
 }
 Group {
  inputs 2
  name sdf_merge
  xpos 1183
  ypos 822
  disable {{"!(\[exists parent.input1] && !input1.parent.input1.disable)"}}
  addUserKnob {20 User}
  addUserKnob {26 warning l Warning: T "Only merge lights with lights, and primitives with primitives"}
 }
  Reformat {
   inputs 0
   type "to box"
   box_width 1
   box_height 1
   box_fixed true
   name Reformat1
   xpos -119
   ypos 440
  }
  Input {
   inputs 0
   name Input2
   xpos 158
   ypos -28
   number 1
  }
  Dot {
   name Dot2
   xpos 192
   ypos -2
  }
set N6c176400 [stack 0]
  Dot {
   name Dot3
   xpos 329
   ypos -2
  }
  Dot {
   name Dot4
   xpos 329
   ypos 391
  }
  Input {
   inputs 0
   name Input1
   xpos 0
   ypos -32
  }
  Dot {
   name Dot1
   xpos 34
   ypos -6
  }
set N6c174800 [stack 0]
  Dot {
   name Dot6
   xpos -98
   ypos -6
  }
  Dot {
   name Dot5
   xpos -98
   ypos 336
  }
push $N6c176400
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop3
   xpos 158
   ypos 69
  }
  Crop {
   box {0 0 {parent.Dot2.width} 1}
   name Crop4
   xpos 158
   ypos 95
  }
  Transform {
   translate {{parent.Dot1.width} 0}
   center {1 0.5}
   name Transform2
   xpos 158
   ypos 121
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop5
   xpos 158
   ypos 167
  }
push $N6c174800
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop6
   xpos 0
   ypos 66
  }
  Crop {
   box {0 0 {parent.Dot1.width} 1}
   name Crop7
   xpos 0
   ypos 92
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop8
   xpos 0
   ypos 164
  }
  Merge2 {
   inputs 2
   also_merge all
   name Merge1
   xpos 0
   ypos 262
   disable {{"\[exists parent.input1] ? 0:1"}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input1] ? 0:1"}}
   name Switch2
   xpos 0
   ypos 332
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:1"}}
   name Switch1
   xpos 0
   ypos 387
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:\[exists parent.input1] ? 0:1"}}
   name Switch3
   xpos 0
   ypos 456
  }
  Dot {
   name out_dot
   xpos 36
   ypos 518
  }
  Output {
   name Output1
   xpos 2
   ypos 661
  }
 end_group
 Group {
  inputs 2
  name sdf_merge1
  xpos 1183
  ypos 900
  disable {{"!(\[exists parent.input0] && !(parent.input0.disable && !\[exists parent.input0.input0]))"}}
  addUserKnob {20 User}
  addUserKnob {26 warning l Warning: T "Only merge lights with lights, and primitives with primitives"}
 }
  Reformat {
   inputs 0
   type "to box"
   box_width 1
   box_height 1
   box_fixed true
   name Reformat1
   xpos -119
   ypos 440
  }
  Input {
   inputs 0
   name Input2
   xpos 158
   ypos -28
   number 1
  }
  Dot {
   name Dot2
   xpos 192
   ypos -2
  }
set N6c118100 [stack 0]
  Dot {
   name Dot3
   xpos 329
   ypos -2
  }
  Dot {
   name Dot4
   xpos 329
   ypos 391
  }
  Input {
   inputs 0
   name Input1
   xpos 0
   ypos -32
  }
  Dot {
   name Dot1
   xpos 34
   ypos -6
  }
set N6c0f2400 [stack 0]
  Dot {
   name Dot6
   xpos -98
   ypos -6
  }
  Dot {
   name Dot5
   xpos -98
   ypos 336
  }
push $N6c118100
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop3
   xpos 158
   ypos 69
  }
  Crop {
   box {0 0 {parent.Dot2.width} 1}
   name Crop4
   xpos 158
   ypos 95
  }
  Transform {
   translate {{parent.Dot1.width} 0}
   center {1 0.5}
   name Transform2
   xpos 158
   ypos 121
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop5
   xpos 158
   ypos 167
  }
push $N6c0f2400
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop6
   xpos 0
   ypos 66
  }
  Crop {
   box {0 0 {parent.Dot1.width} 1}
   name Crop7
   xpos 0
   ypos 92
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop8
   xpos 0
   ypos 164
  }
  Merge2 {
   inputs 2
   also_merge all
   name Merge1
   xpos 0
   ypos 262
   disable {{"\[exists parent.input1] ? 0:1"}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input1] ? 0:1"}}
   name Switch2
   xpos 0
   ypos 332
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:1"}}
   name Switch1
   xpos 0
   ypos 387
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:\[exists parent.input1] ? 0:1"}}
   name Switch3
   xpos 0
   ypos 456
  }
  Dot {
   name out_dot
   xpos 36
   ypos 518
  }
  Output {
   name Output1
   xpos 2
   ypos 661
  }
 end_group
 Output {
  name Output1
  xpos 1183
  ypos 1002
 }
end_group
Group {
 name sdf_primitive7
 onCreate "__import__('sdf.primitive', fromlist='SDFPrimitive').SDFPrimitive().handle_node_created()"
 knobChanged "__import__('sdf.primitive', fromlist='SDFPrimitive').SDFPrimitive().handle_knob_changed()"
 tile_color 0xff
 label sphere
 xpos -281
 ypos -357
 addUserKnob {20 User l "SDF Primitive"}
 addUserKnob {4 shape t "The shape of the object." M {sphere ellipsoid "cut sphere" "hollow sphere" "death star" "solid angle" "rectangular prism" "rectangular prism frame" rhombus "triangular prism" cylinder "infinite cylinder" plane capsule cone "infinite cone" "capped cone" "rounded cone" torus "capped torus" link "hexagonal prism" octahedron mandelbulb mandelbox ""}}
 addUserKnob {7 dimension_x l radius t "The radius of the sphere." R 0 10}
 dimension_x 0.03
 addUserKnob {7 dimension_y l iterations t "The number of iterations to compute, the higher this is the slower it will be to compute, but the deeper the fractal will have detail." +HIDDEN R 1 30}
 dimension_y 10
 addUserKnob {7 dimension_z l "max square radius" t "When the square radius has reached this length, stop iterating." +HIDDEN R 1 9}
 dimension_z 4
 addUserKnob {7 dimension_w l "orbital trap blend strength" t "Transition between orbital trap based colouring and the colour provided by the 'colour' knob." +HIDDEN}
 dimension_w 1
 addUserKnob {7 wall_thickness l "wall thickness" t "The thickness of the walls of the shape, if the shape is hollow." +DISABLED}
 wall_thickness 0.01
 addUserKnob {6 hollow t "If enabled, the object will be hollow, with a thickness of 'wall thickness'." -STARTLINE}
 addUserKnob {7 edge_radius l "edge radius" t "This parameter increases the hit tolerance by the specified amount for this specific object, having the effect of rounding off the edges."}
 addUserKnob {6 mirror_x l "mirror x" t "Mirror the shape in the yz-plane." +STARTLINE}
 addUserKnob {6 mirror_y l "mirror y" t "Mirror the shape in the xz-plane." -STARTLINE}
 addUserKnob {6 mirror_z l "mirror z" t "Mirror the shape in the xy-plane." -STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {18 colour t "The diffuse colour of the shape."}
 colour {0 0 0}
 addUserKnob {6 colour_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {7 reflection t "The amount of light that is reflected off the shape's surface. This plus 'transmission' should be less than or equal to one."}
 reflection 0.1
 addUserKnob {7 transmission t "The amount of light that is transmitted through the shape's surface. This plus 'reflection' should be less than or equal to one."}
 addUserKnob {7 refractive_index l "refractive index" t "The index of refraction of the object." R 1 4}
 refractive_index 1.33
 addUserKnob {7 roughness t "The object's surface will scatter the light more the higher this value is. Increase the 'pixel subdivisions' to make it look less aliased."}
 addUserKnob {7 emission t "The amount of light emitted by the object. Increase the 'hdri lighting samples' to give it less noise. This is more of a placeholder for when the path marched version is released :)"}
 addUserKnob {26 div0 l "" +STARTLINE}
 addUserKnob {13 translate t "The translation of the object in its local coordinate space."}
 translate {-0.1 0.1 0.25}
 addUserKnob {13 rotate t "The rotation of the object in its local coordinate space."}
 addUserKnob {13 elongation t "The elongation of the object along the respective axes." +DISABLED}
 elongation {0.1 0 0}
 addUserKnob {6 elongate t "Enable the elongation of the object." -STARTLINE}
 addUserKnob {7 uniform_scale l "uniform scale" t "The scale of the object in its local coordinate space, along all axes." R 0 10}
 uniform_scale 1
 addUserKnob {26 div1 l "" +STARTLINE}
 addUserKnob {4 repetition t "Repeat objects in the scene with no extra memory consumption. Note that if the repeated objects overlap some strange things can occur." -STARTLINE M {none finite infinite "" ""}}
 addUserKnob {13 repetition_params l spacing t "The spacing along each positive axis to repeat the objects." +HIDDEN}
 repetition_params {1.1 1.1 100}
 addUserKnob {7 repetition_spacing l spacing t "The spacing between the objects." +HIDDEN R 0 10}
 repetition_spacing 1.1
 addUserKnob {26 ""}
 addUserKnob {4 blend_type l "blend type" t "The type of interaction this object will have with its children.\n    Union: All objects will appear as normal.\n    Subtraction: All children of this object will be subtracted from this object, leaving holes.\n    Intersection: Only the region where this object and its children overlap will remain.\n    Smooth Union: All children will smoothly blend together with this object according to the 'blend strength'.\n    Smooth Subtraction: All children of this object will be subtracted from this object, leaving holes that are smoothed according to the 'blend strength'.\n    Smooth Intersection: Only the region where this object and its children overlap will remain, and the remaining regions will be smoothed according to the 'blend strength'." +DISABLED M {union subtraction intersection "smooth union" "smooth subtraction" "smooth intersection"}}
 addUserKnob {7 blend_strength l "blend strength" t "The amount to blend between this and its child objects if one of the 'Smooth' blend types are selected." +DISABLED}
 blend_strength 0.5
 addUserKnob {6 is_bound l "is bound" t "If enabled, this object will act as a bounding volume for all its children. This means that until a ray hits the bounding volume, none of the child object's signed distance fields will be computed. This can vastly improve performance, especially when many complex objects are far from the camera." +DISABLED +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {26 info l "" +STARTLINE T "v1.0.0 - (c) Owen Bulka - 2022"}
}
 Input {
  inputs 0
  name siblings
  xpos 1484
  ypos 476
 }
 Dot {
  name Dot2
  xpos 1518
  ypos 904
 }
 Input {
  inputs 0
  name children
  xpos 1357
  ypos 475
  number 1
 }
 Dot {
  name Dot1
  xpos 1391
  ypos 826
 }
 Constant {
  inputs 0
  channels sdf_position_scale
  color {{parent.translate.x} {parent.translate.y} {parent.translate.z} {parent.uniform_scale}}
  format "1 1 0 0 1 1 1 1x1"
  name position_scale
  xpos 280
  ypos 455
 }
 Dot {
  name Dot17
  xpos 314
  ypos 647
 }
 Constant {
  inputs 0
  channels sdf_rotation_wall_thickness
  color {{"parent.rotate.x * pi / 180"} {"parent.rotate.y * pi / 180"} {"parent.rotate.z * pi / 180"} {parent.wall_thickness}}
  format "1 1 0 0 1 1 1 1x1"
  name rotation
  xpos 403
  ypos 457
 }
 Copy {
  inputs 2
  channels all
  name Copy1
  xpos 403
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_dimensions
  color {{parent.dimension_x} {parent.dimension_y} {parent.dimension_z} {parent.dimension_w}}
  format "1 1 0 0 1 1 1 1x1"
  name dimensions
  xpos 540
  ypos 460
 }
 Copy {
  inputs 2
  channels all
  name Copy2
  xpos 540
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_colour
  color {{parent.colour.r} {parent.colour.g} {parent.colour.b} {parent.refractive_index}}
  format "1 1 0 0 1 1 1 1x1"
  name colour
  xpos 669
  ypos 459
 }
 Copy {
  inputs 2
  channels all
  name Copy3
  xpos 669
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape
  color {{parent.shape} {"parent.repetition | (parent.elongate ? 4 : 0) | (parent.mirror_x ? 8 : 0) | (parent.mirror_y ? 16 : 0) | (parent.mirror_z ? 32 : 0) | (parent.hollow ? 64 : 0) | (parent.blend_type > 0 ? (1 << (parent.blend_type + 6)) : 0) | (parent.is_bound ? 4096 : 0)"} {"parent.sdf_merge.disable ? 0 : parent.sdf_merge.input1.width"} {parent.blend_strength}}
  format "1 1 0 0 1 1 1 1x1"
  name shape
  xpos 806
  ypos 462
 }
 Copy {
  inputs 2
  channels all
  name Copy4
  xpos 806
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_surface
  color {{parent.reflection} {parent.transmission} {parent.emission} {parent.roughness}}
  format "1 1 0 0 1 1 1 1x1"
  name surface
  xpos 935
  ypos 460
 }
 Copy {
  inputs 2
  channels all
  name Copy5
  xpos 936
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape_mods_0
  color {{parent.repetition_params.x} {parent.repetition_params.y} {parent.repetition_params.z} {parent.repetition_spacing}}
  format "1 1 0 0 1 1 1 1x1"
  name shape_mods
  xpos 1056
  ypos 463
 }
 Copy {
  inputs 2
  channels all
  name Copy6
  xpos 1056
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape_mods_1
  color {{parent.elongation.x} {parent.elongation.y} {parent.elongation.z} {parent.edge_radius}}
  format "1 1 0 0 1 1 1 1x1"
  name shape_mods1
  xpos 1183
  ypos 465
 }
 Copy {
  inputs 2
  channels all
  name Copy7
  xpos 1183
  ypos 726
 }
 Group {
  inputs 2
  name sdf_merge
  xpos 1183
  ypos 822
  disable {{"!(\[exists parent.input1] && !input1.parent.input1.disable)"}}
  addUserKnob {20 User}
  addUserKnob {26 warning l Warning: T "Only merge lights with lights, and primitives with primitives"}
 }
  Reformat {
   inputs 0
   type "to box"
   box_width 1
   box_height 1
   box_fixed true
   name Reformat1
   xpos -119
   ypos 440
  }
  Input {
   inputs 0
   name Input2
   xpos 158
   ypos -28
   number 1
  }
  Dot {
   name Dot2
   xpos 192
   ypos -2
  }
set N5fda8100 [stack 0]
  Dot {
   name Dot3
   xpos 329
   ypos -2
  }
  Dot {
   name Dot4
   xpos 329
   ypos 391
  }
  Input {
   inputs 0
   name Input1
   xpos 0
   ypos -32
  }
  Dot {
   name Dot1
   xpos 34
   ypos -6
  }
set N5fd6e400 [stack 0]
  Dot {
   name Dot6
   xpos -98
   ypos -6
  }
  Dot {
   name Dot5
   xpos -98
   ypos 336
  }
push $N5fda8100
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop3
   xpos 158
   ypos 69
  }
  Crop {
   box {0 0 {parent.Dot2.width} 1}
   name Crop4
   xpos 158
   ypos 95
  }
  Transform {
   translate {{parent.Dot1.width} 0}
   center {1 0.5}
   name Transform2
   xpos 158
   ypos 121
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop5
   xpos 158
   ypos 167
  }
push $N5fd6e400
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop6
   xpos 0
   ypos 66
  }
  Crop {
   box {0 0 {parent.Dot1.width} 1}
   name Crop7
   xpos 0
   ypos 92
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop8
   xpos 0
   ypos 164
  }
  Merge2 {
   inputs 2
   also_merge all
   name Merge1
   xpos 0
   ypos 262
   disable {{"\[exists parent.input1] ? 0:1"}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input1] ? 0:1"}}
   name Switch2
   xpos 0
   ypos 332
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:1"}}
   name Switch1
   xpos 0
   ypos 387
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:\[exists parent.input1] ? 0:1"}}
   name Switch3
   xpos 0
   ypos 456
  }
  Dot {
   name out_dot
   xpos 36
   ypos 518
  }
  Output {
   name Output1
   xpos 2
   ypos 661
  }
 end_group
 Group {
  inputs 2
  name sdf_merge1
  xpos 1183
  ypos 900
  disable {{"!(\[exists parent.input0] && !(parent.input0.disable && !\[exists parent.input0.input0]))"}}
  addUserKnob {20 User}
  addUserKnob {26 warning l Warning: T "Only merge lights with lights, and primitives with primitives"}
 }
  Reformat {
   inputs 0
   type "to box"
   box_width 1
   box_height 1
   box_fixed true
   name Reformat1
   xpos -119
   ypos 440
  }
  Input {
   inputs 0
   name Input2
   xpos 158
   ypos -28
   number 1
  }
  Dot {
   name Dot2
   xpos 192
   ypos -2
  }
set N5fd1dd00 [stack 0]
  Dot {
   name Dot3
   xpos 329
   ypos -2
  }
  Dot {
   name Dot4
   xpos 329
   ypos 391
  }
  Input {
   inputs 0
   name Input1
   xpos 0
   ypos -32
  }
  Dot {
   name Dot1
   xpos 34
   ypos -6
  }
set N5fd1c100 [stack 0]
  Dot {
   name Dot6
   xpos -98
   ypos -6
  }
  Dot {
   name Dot5
   xpos -98
   ypos 336
  }
push $N5fd1dd00
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop3
   xpos 158
   ypos 69
  }
  Crop {
   box {0 0 {parent.Dot2.width} 1}
   name Crop4
   xpos 158
   ypos 95
  }
  Transform {
   translate {{parent.Dot1.width} 0}
   center {1 0.5}
   name Transform2
   xpos 158
   ypos 121
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop5
   xpos 158
   ypos 167
  }
push $N5fd1c100
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop6
   xpos 0
   ypos 66
  }
  Crop {
   box {0 0 {parent.Dot1.width} 1}
   name Crop7
   xpos 0
   ypos 92
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop8
   xpos 0
   ypos 164
  }
  Merge2 {
   inputs 2
   also_merge all
   name Merge1
   xpos 0
   ypos 262
   disable {{"\[exists parent.input1] ? 0:1"}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input1] ? 0:1"}}
   name Switch2
   xpos 0
   ypos 332
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:1"}}
   name Switch1
   xpos 0
   ypos 387
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:\[exists parent.input1] ? 0:1"}}
   name Switch3
   xpos 0
   ypos 456
  }
  Dot {
   name out_dot
   xpos 36
   ypos 518
  }
  Output {
   name Output1
   xpos 2
   ypos 661
  }
 end_group
 Output {
  name Output1
  xpos 1183
  ypos 1002
 }
end_group
Group {
 inputs 2
 name sdf_primitive4
 onCreate "__import__('sdf.primitive', fromlist='SDFPrimitive').SDFPrimitive().handle_node_created()"
 knobChanged "__import__('sdf.primitive', fromlist='SDFPrimitive').SDFPrimitive().handle_knob_changed()"
 tile_color 0x1a1a1aff
 label cylinder
 xpos -150
 ypos -357
 addUserKnob {20 User l "SDF Primitive"}
 addUserKnob {4 shape t "The shape of the object." M {sphere ellipsoid "cut sphere" "hollow sphere" "death star" "solid angle" "rectangular prism" "rectangular prism frame" rhombus "triangular prism" cylinder "infinite cylinder" plane capsule cone "infinite cone" "capped cone" "rounded cone" torus "capped torus" link "hexagonal prism" octahedron mandelbulb mandelbox ""}}
 shape cylinder
 addUserKnob {7 dimension_x l radius t "The radius (xz-plane) of the cylinder." R 0 10}
 dimension_x 0.2
 addUserKnob {7 dimension_y l height t "The height (y-axis) of the cylinder." R 0 10}
 dimension_y 0.5
 addUserKnob {7 dimension_z l "max square radius" t "When the square radius has reached this length, stop iterating." +HIDDEN R 1 9}
 dimension_z 4
 addUserKnob {7 dimension_w l "orbital trap blend strength" t "Transition between orbital trap based colouring and the colour provided by the 'colour' knob." +HIDDEN}
 dimension_w 1
 addUserKnob {7 wall_thickness l "wall thickness" t "The thickness of the walls of the shape, if the shape is hollow." +DISABLED}
 wall_thickness 0.01
 addUserKnob {6 hollow t "If enabled, the object will be hollow, with a thickness of 'wall thickness'." -STARTLINE}
 addUserKnob {7 edge_radius l "edge radius" t "This parameter increases the hit tolerance by the specified amount for this specific object, having the effect of rounding off the edges."}
 addUserKnob {6 mirror_x l "mirror x" t "Mirror the shape in the yz-plane." +STARTLINE}
 addUserKnob {6 mirror_y l "mirror y" t "Mirror the shape in the xz-plane." -STARTLINE}
 addUserKnob {6 mirror_z l "mirror z" t "Mirror the shape in the xy-plane." -STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {18 colour t "The diffuse colour of the shape."}
 colour 0.1
 addUserKnob {6 colour_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {7 reflection t "The amount of light that is reflected off the shape's surface. This plus 'transmission' should be less than or equal to one."}
 addUserKnob {7 transmission t "The amount of light that is transmitted through the shape's surface. This plus 'reflection' should be less than or equal to one."}
 transmission {{curve x1 1 x63 0}}
 addUserKnob {7 refractive_index l "refractive index" t "The index of refraction of the object." R 1 4}
 refractive_index 1.33
 addUserKnob {7 roughness t "The object's surface will scatter the light more the higher this value is. Increase the 'pixel subdivisions' to make it look less aliased."}
 addUserKnob {7 emission t "The amount of light emitted by the object. Increase the 'hdri lighting samples' to give it less noise. This is more of a placeholder for when the path marched version is released :)"}
 addUserKnob {26 div0 l "" +STARTLINE}
 addUserKnob {13 translate t "The translation of the object in its local coordinate space."}
 translate {0 0.4 0}
 addUserKnob {13 rotate t "The rotation of the object in its local coordinate space."}
 addUserKnob {13 elongation t "The elongation of the object along the respective axes." +DISABLED}
 elongation {0.1 0 0}
 addUserKnob {6 elongate t "Enable the elongation of the object." -STARTLINE}
 addUserKnob {7 uniform_scale l "uniform scale" t "The scale of the object in its local coordinate space, along all axes." R 0 10}
 uniform_scale 1
 addUserKnob {26 div1 l "" +STARTLINE}
 addUserKnob {4 repetition t "Repeat objects in the scene with no extra memory consumption. Note that if the repeated objects overlap some strange things can occur." -STARTLINE M {none finite infinite "" ""}}
 addUserKnob {13 repetition_params l spacing t "The spacing along each positive axis to repeat the objects." +HIDDEN}
 repetition_params {1.1 1.1 100}
 addUserKnob {7 repetition_spacing l spacing t "The spacing between the objects." +HIDDEN R 0 10}
 repetition_spacing 1.1
 addUserKnob {26 ""}
 addUserKnob {4 blend_type l "blend type" t "The type of interaction this object will have with its children.\n    Union: All objects will appear as normal.\n    Subtraction: All children of this object will be subtracted from this object, leaving holes.\n    Intersection: Only the region where this object and its children overlap will remain.\n    Smooth Union: All children will smoothly blend together with this object according to the 'blend strength'.\n    Smooth Subtraction: All children of this object will be subtracted from this object, leaving holes that are smoothed according to the 'blend strength'.\n    Smooth Intersection: Only the region where this object and its children overlap will remain, and the remaining regions will be smoothed according to the 'blend strength'." M {union subtraction intersection "smooth union" "smooth subtraction" "smooth intersection"}}
 addUserKnob {7 blend_strength l "blend strength" t "The amount to blend between this and its child objects if one of the 'Smooth' blend types are selected." +DISABLED}
 blend_strength 0.02
 addUserKnob {6 is_bound l "is bound" t "If enabled, this object will act as a bounding volume for all its children. This means that until a ray hits the bounding volume, none of the child object's signed distance fields will be computed. This can vastly improve performance, especially when many complex objects are far from the camera." +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {26 info l "" +STARTLINE T "v1.0.0 - (c) Owen Bulka - 2022"}
}
 Input {
  inputs 0
  name siblings
  xpos 1484
  ypos 476
 }
 Dot {
  name Dot2
  xpos 1518
  ypos 904
 }
 Input {
  inputs 0
  name children
  xpos 1357
  ypos 475
  number 1
 }
 Dot {
  name Dot1
  xpos 1391
  ypos 826
 }
 Constant {
  inputs 0
  channels sdf_position_scale
  color {{parent.translate.x} {parent.translate.y} {parent.translate.z} {parent.uniform_scale}}
  format "1 1 0 0 1 1 1 1x1"
  name position_scale
  xpos 280
  ypos 455
 }
 Dot {
  name Dot17
  xpos 314
  ypos 647
 }
 Constant {
  inputs 0
  channels sdf_rotation_wall_thickness
  color {{"parent.rotate.x * pi / 180"} {"parent.rotate.y * pi / 180"} {"parent.rotate.z * pi / 180"} {parent.wall_thickness}}
  format "1 1 0 0 1 1 1 1x1"
  name rotation
  xpos 403
  ypos 457
 }
 Copy {
  inputs 2
  channels all
  name Copy1
  xpos 403
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_dimensions
  color {{parent.dimension_x} {parent.dimension_y} {parent.dimension_z} {parent.dimension_w}}
  format "1 1 0 0 1 1 1 1x1"
  name dimensions
  xpos 540
  ypos 460
 }
 Copy {
  inputs 2
  channels all
  name Copy2
  xpos 540
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_colour
  color {{parent.colour.r} {parent.colour.g} {parent.colour.b} {parent.refractive_index}}
  format "1 1 0 0 1 1 1 1x1"
  name colour
  xpos 669
  ypos 459
 }
 Copy {
  inputs 2
  channels all
  name Copy3
  xpos 669
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape
  color {{parent.shape} {"parent.repetition | (parent.elongate ? 4 : 0) | (parent.mirror_x ? 8 : 0) | (parent.mirror_y ? 16 : 0) | (parent.mirror_z ? 32 : 0) | (parent.hollow ? 64 : 0) | (parent.blend_type > 0 ? (1 << (parent.blend_type + 6)) : 0) | (parent.is_bound ? 4096 : 0)"} {"parent.sdf_merge.disable ? 0 : parent.sdf_merge.input1.width"} {parent.blend_strength}}
  format "1 1 0 0 1 1 1 1x1"
  name shape
  xpos 806
  ypos 462
 }
 Copy {
  inputs 2
  channels all
  name Copy4
  xpos 806
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_surface
  color {{parent.reflection} {parent.transmission} {parent.emission} {parent.roughness}}
  format "1 1 0 0 1 1 1 1x1"
  name surface
  xpos 935
  ypos 460
 }
 Copy {
  inputs 2
  channels all
  name Copy5
  xpos 936
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape_mods_0
  color {{parent.repetition_params.x} {parent.repetition_params.y} {parent.repetition_params.z} {parent.repetition_spacing}}
  format "1 1 0 0 1 1 1 1x1"
  name shape_mods
  xpos 1056
  ypos 463
 }
 Copy {
  inputs 2
  channels all
  name Copy6
  xpos 1056
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape_mods_1
  color {{parent.elongation.x} {parent.elongation.y} {parent.elongation.z} {parent.edge_radius}}
  format "1 1 0 0 1 1 1 1x1"
  name shape_mods1
  xpos 1183
  ypos 465
 }
 Copy {
  inputs 2
  channels all
  name Copy7
  xpos 1183
  ypos 726
 }
 Group {
  inputs 2
  name sdf_merge
  xpos 1183
  ypos 822
  disable {{"!(\[exists parent.input1] && !input1.parent.input1.disable)"}}
  addUserKnob {20 User}
  addUserKnob {26 warning l Warning: T "Only merge lights with lights, and primitives with primitives"}
 }
  Reformat {
   inputs 0
   type "to box"
   box_width 1
   box_height 1
   box_fixed true
   name Reformat1
   xpos -119
   ypos 440
  }
  Input {
   inputs 0
   name Input2
   xpos 158
   ypos -28
   number 1
  }
  Dot {
   name Dot2
   xpos 192
   ypos -2
  }
set N5fe3dd00 [stack 0]
  Dot {
   name Dot3
   xpos 329
   ypos -2
  }
  Dot {
   name Dot4
   xpos 329
   ypos 391
  }
  Input {
   inputs 0
   name Input1
   xpos 0
   ypos -32
  }
  Dot {
   name Dot1
   xpos 34
   ypos -6
  }
set N5fe3c100 [stack 0]
  Dot {
   name Dot6
   xpos -98
   ypos -6
  }
  Dot {
   name Dot5
   xpos -98
   ypos 336
  }
push $N5fe3dd00
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop3
   xpos 158
   ypos 69
  }
  Crop {
   box {0 0 {parent.Dot2.width} 1}
   name Crop4
   xpos 158
   ypos 95
  }
  Transform {
   translate {{parent.Dot1.width} 0}
   center {1 0.5}
   name Transform2
   xpos 158
   ypos 121
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop5
   xpos 158
   ypos 167
  }
push $N5fe3c100
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop6
   xpos 0
   ypos 66
  }
  Crop {
   box {0 0 {parent.Dot1.width} 1}
   name Crop7
   xpos 0
   ypos 92
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop8
   xpos 0
   ypos 164
  }
  Merge2 {
   inputs 2
   also_merge all
   name Merge1
   xpos 0
   ypos 262
   disable {{"\[exists parent.input1] ? 0:1"}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input1] ? 0:1"}}
   name Switch2
   xpos 0
   ypos 332
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:1"}}
   name Switch1
   xpos 0
   ypos 387
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:\[exists parent.input1] ? 0:1"}}
   name Switch3
   xpos 0
   ypos 456
  }
  Dot {
   name out_dot
   xpos 36
   ypos 518
  }
  Output {
   name Output1
   xpos 2
   ypos 661
  }
 end_group
 Group {
  inputs 2
  name sdf_merge1
  xpos 1183
  ypos 900
  disable {{"!(\[exists parent.input0] && !(parent.input0.disable && !\[exists parent.input0.input0]))"}}
  addUserKnob {20 User}
  addUserKnob {26 warning l Warning: T "Only merge lights with lights, and primitives with primitives"}
 }
  Reformat {
   inputs 0
   type "to box"
   box_width 1
   box_height 1
   box_fixed true
   name Reformat1
   xpos -119
   ypos 440
  }
  Input {
   inputs 0
   name Input2
   xpos 158
   ypos -28
   number 1
  }
  Dot {
   name Dot2
   xpos 192
   ypos -2
  }
set N5ffb3900 [stack 0]
  Dot {
   name Dot3
   xpos 329
   ypos -2
  }
  Dot {
   name Dot4
   xpos 329
   ypos 391
  }
  Input {
   inputs 0
   name Input1
   xpos 0
   ypos -32
  }
  Dot {
   name Dot1
   xpos 34
   ypos -6
  }
set N5ffb1d00 [stack 0]
  Dot {
   name Dot6
   xpos -98
   ypos -6
  }
  Dot {
   name Dot5
   xpos -98
   ypos 336
  }
push $N5ffb3900
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop3
   xpos 158
   ypos 69
  }
  Crop {
   box {0 0 {parent.Dot2.width} 1}
   name Crop4
   xpos 158
   ypos 95
  }
  Transform {
   translate {{parent.Dot1.width} 0}
   center {1 0.5}
   name Transform2
   xpos 158
   ypos 121
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop5
   xpos 158
   ypos 167
  }
push $N5ffb1d00
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop6
   xpos 0
   ypos 66
  }
  Crop {
   box {0 0 {parent.Dot1.width} 1}
   name Crop7
   xpos 0
   ypos 92
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop8
   xpos 0
   ypos 164
  }
  Merge2 {
   inputs 2
   also_merge all
   name Merge1
   xpos 0
   ypos 262
   disable {{"\[exists parent.input1] ? 0:1"}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input1] ? 0:1"}}
   name Switch2
   xpos 0
   ypos 332
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:1"}}
   name Switch1
   xpos 0
   ypos 387
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:\[exists parent.input1] ? 0:1"}}
   name Switch3
   xpos 0
   ypos 456
  }
  Dot {
   name out_dot
   xpos 36
   ypos 518
  }
  Output {
   name Output1
   xpos 2
   ypos 661
  }
 end_group
 Output {
  name Output1
  xpos 1183
  ypos 1002
 }
end_group
Group {
 name sdf_primitive3
 onCreate "__import__('sdf.primitive', fromlist='SDFPrimitive').SDFPrimitive().handle_node_created()"
 knobChanged "__import__('sdf.primitive', fromlist='SDFPrimitive').SDFPrimitive().handle_knob_changed()"
 tile_color 0xff4f00ff
 label cone
 xpos -40
 ypos -357
 addUserKnob {20 User l "SDF Primitive"}
 addUserKnob {4 shape t "The shape of the object." M {sphere ellipsoid "cut sphere" "hollow sphere" "death star" "solid angle" "rectangular prism" "rectangular prism frame" rhombus "triangular prism" cylinder "infinite cylinder" plane capsule cone "infinite cone" "capped cone" "rounded cone" torus "capped torus" link "hexagonal prism" octahedron mandelbulb mandelbox ""}}
 shape cone
 addUserKnob {7 dimension_x l angle t "The angle between the tip and base of the cone \[0-PI/2) measured between the y-axis and wall of the cone." R 0 90}
 dimension_x 5
 addUserKnob {7 dimension_y l height t "The height (y-axis) of the cone. Cannot be 0." R 0 10}
 dimension_y 0.33
 addUserKnob {7 dimension_z l "positive height" t "The distance along the positive y-axis before entering the dome." +HIDDEN R 0 10}
 dimension_z 0.25
 addUserKnob {7 dimension_w l "orbital trap blend strength" t "Transition between orbital trap based colouring and the colour provided by the 'colour' knob." +HIDDEN}
 dimension_w 1
 addUserKnob {7 wall_thickness l "wall thickness" t "The thickness of the walls of the shape, if the shape is hollow." +DISABLED}
 wall_thickness 0.01
 addUserKnob {6 hollow t "If enabled, the object will be hollow, with a thickness of 'wall thickness'." -STARTLINE}
 addUserKnob {7 edge_radius l "edge radius" t "This parameter increases the hit tolerance by the specified amount for this specific object, having the effect of rounding off the edges."}
 addUserKnob {6 mirror_x l "mirror x" t "Mirror the shape in the yz-plane." +STARTLINE}
 addUserKnob {6 mirror_y l "mirror y" t "Mirror the shape in the xz-plane." -STARTLINE}
 addUserKnob {6 mirror_z l "mirror z" t "Mirror the shape in the xy-plane." -STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {18 colour t "The diffuse colour of the shape."}
 colour {1 0.30972 0}
 addUserKnob {6 colour_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {7 reflection t "The amount of light that is reflected off the shape's surface. This plus 'transmission' should be less than or equal to one."}
 addUserKnob {7 transmission t "The amount of light that is transmitted through the shape's surface. This plus 'reflection' should be less than or equal to one."}
 addUserKnob {7 refractive_index l "refractive index" t "The index of refraction of the object." R 1 4}
 refractive_index 1.33
 addUserKnob {7 roughness t "The object's surface will scatter the light more the higher this value is. Increase the 'pixel subdivisions' to make it look less aliased."}
 addUserKnob {7 emission t "The amount of light emitted by the object. Increase the 'hdri lighting samples' to give it less noise. This is more of a placeholder for when the path marched version is released :)"}
 addUserKnob {26 div0 l "" +STARTLINE}
 addUserKnob {13 translate t "The translation of the object in its local coordinate space."}
 translate {0 0 0.63}
 addUserKnob {13 rotate t "The rotation of the object in its local coordinate space."}
 rotate {-90 0 0}
 addUserKnob {13 elongation t "The elongation of the object along the respective axes." +DISABLED}
 elongation {0.1 0 0}
 addUserKnob {6 elongate t "Enable the elongation of the object." -STARTLINE}
 addUserKnob {7 uniform_scale l "uniform scale" t "The scale of the object in its local coordinate space, along all axes." R 0 10}
 uniform_scale 1
 addUserKnob {26 div1 l "" +STARTLINE}
 addUserKnob {4 repetition t "Repeat objects in the scene with no extra memory consumption. Note that if the repeated objects overlap some strange things can occur." -STARTLINE M {none finite infinite "" ""}}
 addUserKnob {13 repetition_params l spacing t "The spacing along each positive axis to repeat the objects." +HIDDEN}
 repetition_params {1.1 1.1 100}
 addUserKnob {7 repetition_spacing l spacing t "The spacing between the objects." +HIDDEN R 0 10}
 repetition_spacing 1.1
 addUserKnob {26 ""}
 addUserKnob {4 blend_type l "blend type" t "The type of interaction this object will have with its children.\n    Union: All objects will appear as normal.\n    Subtraction: All children of this object will be subtracted from this object, leaving holes.\n    Intersection: Only the region where this object and its children overlap will remain.\n    Smooth Union: All children will smoothly blend together with this object according to the 'blend strength'.\n    Smooth Subtraction: All children of this object will be subtracted from this object, leaving holes that are smoothed according to the 'blend strength'.\n    Smooth Intersection: Only the region where this object and its children overlap will remain, and the remaining regions will be smoothed according to the 'blend strength'." +DISABLED M {union subtraction intersection "smooth union" "smooth subtraction" "smooth intersection"}}
 addUserKnob {7 blend_strength l "blend strength" t "The amount to blend between this and its child objects if one of the 'Smooth' blend types are selected." +DISABLED}
 blend_strength 0.5
 addUserKnob {6 is_bound l "is bound" t "If enabled, this object will act as a bounding volume for all its children. This means that until a ray hits the bounding volume, none of the child object's signed distance fields will be computed. This can vastly improve performance, especially when many complex objects are far from the camera." +DISABLED +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {26 info l "" +STARTLINE T "v1.0.0 - (c) Owen Bulka - 2022"}
}
 Input {
  inputs 0
  name siblings
  xpos 1484
  ypos 476
 }
 Dot {
  name Dot2
  xpos 1518
  ypos 904
 }
 Input {
  inputs 0
  name children
  xpos 1357
  ypos 475
  number 1
 }
 Dot {
  name Dot1
  xpos 1391
  ypos 826
 }
 Constant {
  inputs 0
  channels sdf_position_scale
  color {{parent.translate.x} {parent.translate.y} {parent.translate.z} {parent.uniform_scale}}
  format "1 1 0 0 1 1 1 1x1"
  name position_scale
  xpos 280
  ypos 455
 }
 Dot {
  name Dot17
  xpos 314
  ypos 647
 }
 Constant {
  inputs 0
  channels sdf_rotation_wall_thickness
  color {{"parent.rotate.x * pi / 180"} {"parent.rotate.y * pi / 180"} {"parent.rotate.z * pi / 180"} {parent.wall_thickness}}
  format "1 1 0 0 1 1 1 1x1"
  name rotation
  xpos 403
  ypos 457
 }
 Copy {
  inputs 2
  channels all
  name Copy1
  xpos 403
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_dimensions
  color {{parent.dimension_x} {parent.dimension_y} {parent.dimension_z} {parent.dimension_w}}
  format "1 1 0 0 1 1 1 1x1"
  name dimensions
  xpos 540
  ypos 460
 }
 Copy {
  inputs 2
  channels all
  name Copy2
  xpos 540
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_colour
  color {{parent.colour.r} {parent.colour.g} {parent.colour.b} {parent.refractive_index}}
  format "1 1 0 0 1 1 1 1x1"
  name colour
  xpos 669
  ypos 459
 }
 Copy {
  inputs 2
  channels all
  name Copy3
  xpos 669
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape
  color {{parent.shape} {"parent.repetition | (parent.elongate ? 4 : 0) | (parent.mirror_x ? 8 : 0) | (parent.mirror_y ? 16 : 0) | (parent.mirror_z ? 32 : 0) | (parent.hollow ? 64 : 0) | (parent.blend_type > 0 ? (1 << (parent.blend_type + 6)) : 0) | (parent.is_bound ? 4096 : 0)"} {"parent.sdf_merge.disable ? 0 : parent.sdf_merge.input1.width"} {parent.blend_strength}}
  format "1 1 0 0 1 1 1 1x1"
  name shape
  xpos 806
  ypos 462
 }
 Copy {
  inputs 2
  channels all
  name Copy4
  xpos 806
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_surface
  color {{parent.reflection} {parent.transmission} {parent.emission} {parent.roughness}}
  format "1 1 0 0 1 1 1 1x1"
  name surface
  xpos 935
  ypos 460
 }
 Copy {
  inputs 2
  channels all
  name Copy5
  xpos 936
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape_mods_0
  color {{parent.repetition_params.x} {parent.repetition_params.y} {parent.repetition_params.z} {parent.repetition_spacing}}
  format "1 1 0 0 1 1 1 1x1"
  name shape_mods
  xpos 1056
  ypos 463
 }
 Copy {
  inputs 2
  channels all
  name Copy6
  xpos 1056
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape_mods_1
  color {{parent.elongation.x} {parent.elongation.y} {parent.elongation.z} {parent.edge_radius}}
  format "1 1 0 0 1 1 1 1x1"
  name shape_mods1
  xpos 1183
  ypos 465
 }
 Copy {
  inputs 2
  channels all
  name Copy7
  xpos 1183
  ypos 726
 }
 Group {
  inputs 2
  name sdf_merge
  xpos 1183
  ypos 822
  disable {{"!(\[exists parent.input1] && !input1.parent.input1.disable)"}}
  addUserKnob {20 User}
  addUserKnob {26 warning l Warning: T "Only merge lights with lights, and primitives with primitives"}
 }
  Reformat {
   inputs 0
   type "to box"
   box_width 1
   box_height 1
   box_fixed true
   name Reformat1
   xpos -119
   ypos 440
  }
  Input {
   inputs 0
   name Input2
   xpos 158
   ypos -28
   number 1
  }
  Dot {
   name Dot2
   xpos 192
   ypos -2
  }
set N5fcc7900 [stack 0]
  Dot {
   name Dot3
   xpos 329
   ypos -2
  }
  Dot {
   name Dot4
   xpos 329
   ypos 391
  }
  Input {
   inputs 0
   name Input1
   xpos 0
   ypos -32
  }
  Dot {
   name Dot1
   xpos 34
   ypos -6
  }
set N5fcc5d00 [stack 0]
  Dot {
   name Dot6
   xpos -98
   ypos -6
  }
  Dot {
   name Dot5
   xpos -98
   ypos 336
  }
push $N5fcc7900
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop3
   xpos 158
   ypos 69
  }
  Crop {
   box {0 0 {parent.Dot2.width} 1}
   name Crop4
   xpos 158
   ypos 95
  }
  Transform {
   translate {{parent.Dot1.width} 0}
   center {1 0.5}
   name Transform2
   xpos 158
   ypos 121
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop5
   xpos 158
   ypos 167
  }
push $N5fcc5d00
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop6
   xpos 0
   ypos 66
  }
  Crop {
   box {0 0 {parent.Dot1.width} 1}
   name Crop7
   xpos 0
   ypos 92
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop8
   xpos 0
   ypos 164
  }
  Merge2 {
   inputs 2
   also_merge all
   name Merge1
   xpos 0
   ypos 262
   disable {{"\[exists parent.input1] ? 0:1"}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input1] ? 0:1"}}
   name Switch2
   xpos 0
   ypos 332
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:1"}}
   name Switch1
   xpos 0
   ypos 387
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:\[exists parent.input1] ? 0:1"}}
   name Switch3
   xpos 0
   ypos 456
  }
  Dot {
   name out_dot
   xpos 36
   ypos 518
  }
  Output {
   name Output1
   xpos 2
   ypos 661
  }
 end_group
 Group {
  inputs 2
  name sdf_merge1
  xpos 1183
  ypos 900
  disable {{"!(\[exists parent.input0] && !(parent.input0.disable && !\[exists parent.input0.input0]))"}}
  addUserKnob {20 User}
  addUserKnob {26 warning l Warning: T "Only merge lights with lights, and primitives with primitives"}
 }
  Reformat {
   inputs 0
   type "to box"
   box_width 1
   box_height 1
   box_fixed true
   name Reformat1
   xpos -119
   ypos 440
  }
  Input {
   inputs 0
   name Input2
   xpos 158
   ypos -28
   number 1
  }
  Dot {
   name Dot2
   xpos 192
   ypos -2
  }
set N5fc6d600 [stack 0]
  Dot {
   name Dot3
   xpos 329
   ypos -2
  }
  Dot {
   name Dot4
   xpos 329
   ypos 391
  }
  Input {
   inputs 0
   name Input1
   xpos 0
   ypos -32
  }
  Dot {
   name Dot1
   xpos 34
   ypos -6
  }
set N5fc57900 [stack 0]
  Dot {
   name Dot6
   xpos -98
   ypos -6
  }
  Dot {
   name Dot5
   xpos -98
   ypos 336
  }
push $N5fc6d600
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop3
   xpos 158
   ypos 69
  }
  Crop {
   box {0 0 {parent.Dot2.width} 1}
   name Crop4
   xpos 158
   ypos 95
  }
  Transform {
   translate {{parent.Dot1.width} 0}
   center {1 0.5}
   name Transform2
   xpos 158
   ypos 121
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop5
   xpos 158
   ypos 167
  }
push $N5fc57900
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop6
   xpos 0
   ypos 66
  }
  Crop {
   box {0 0 {parent.Dot1.width} 1}
   name Crop7
   xpos 0
   ypos 92
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop8
   xpos 0
   ypos 164
  }
  Merge2 {
   inputs 2
   also_merge all
   name Merge1
   xpos 0
   ypos 262
   disable {{"\[exists parent.input1] ? 0:1"}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input1] ? 0:1"}}
   name Switch2
   xpos 0
   ypos 332
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:1"}}
   name Switch1
   xpos 0
   ypos 387
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:\[exists parent.input1] ? 0:1"}}
   name Switch3
   xpos 0
   ypos 456
  }
  Dot {
   name out_dot
   xpos 36
   ypos 518
  }
  Output {
   name Output1
   xpos 2
   ypos 661
  }
 end_group
 Output {
  name Output1
  xpos 1183
  ypos 1002
 }
end_group
push 0
Group {
 inputs 2
 name sdf_primitive1
 onCreate "__import__('sdf.primitive', fromlist='SDFPrimitive').SDFPrimitive().handle_node_created()"
 knobChanged "__import__('sdf.primitive', fromlist='SDFPrimitive').SDFPrimitive().handle_knob_changed()"
 tile_color 0xffffffff
 label sphere
 xpos -40
 ypos -253
 addUserKnob {20 User l "SDF Primitive"}
 addUserKnob {4 shape t "The shape of the object." M {sphere ellipsoid "cut sphere" "hollow sphere" "death star" "solid angle" "rectangular prism" "rectangular prism frame" rhombus "triangular prism" cylinder "infinite cylinder" plane capsule cone "infinite cone" "capped cone" "rounded cone" torus "capped torus" link "hexagonal prism" octahedron mandelbulb mandelbox ""}}
 addUserKnob {7 dimension_x l radius t "The radius of the sphere." R 0 10}
 dimension_x 0.3
 addUserKnob {7 dimension_y l iterations t "The number of iterations to compute, the higher this is the slower it will be to compute, but the deeper the fractal will have detail." +HIDDEN R 1 30}
 dimension_y 10
 addUserKnob {7 dimension_z l "max square radius" t "When the square radius has reached this length, stop iterating." +HIDDEN R 1 9}
 dimension_z 4
 addUserKnob {7 dimension_w l "orbital trap blend strength" t "Transition between orbital trap based colouring and the colour provided by the 'colour' knob." +HIDDEN}
 dimension_w 1
 addUserKnob {7 wall_thickness l "wall thickness" t "The thickness of the walls of the shape, if the shape is hollow." +DISABLED}
 wall_thickness 0.01
 addUserKnob {6 hollow t "If enabled, the object will be hollow, with a thickness of 'wall thickness'." -STARTLINE}
 addUserKnob {7 edge_radius l "edge radius" t "This parameter increases the hit tolerance by the specified amount for this specific object, having the effect of rounding off the edges."}
 addUserKnob {6 mirror_x l "mirror x" t "Mirror the shape in the yz-plane." +STARTLINE}
 addUserKnob {6 mirror_y l "mirror y" t "Mirror the shape in the xz-plane." -STARTLINE}
 addUserKnob {6 mirror_z l "mirror z" t "Mirror the shape in the xy-plane." -STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {18 colour t "The diffuse colour of the shape."}
 colour {1 1 1}
 addUserKnob {6 colour_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {7 reflection t "The amount of light that is reflected off the shape's surface. This plus 'transmission' should be less than or equal to one."}
 reflection 0.01
 addUserKnob {7 transmission t "The amount of light that is transmitted through the shape's surface. This plus 'reflection' should be less than or equal to one."}
 addUserKnob {7 refractive_index l "refractive index" t "The index of refraction of the object." R 1 4}
 refractive_index 1.33
 addUserKnob {7 roughness t "The object's surface will scatter the light more the higher this value is. Increase the 'pixel subdivisions' to make it look less aliased."}
 addUserKnob {7 emission t "The amount of light emitted by the object. Increase the 'hdri lighting samples' to give it less noise. This is more of a placeholder for when the path marched version is released :)"}
 addUserKnob {26 div0 l "" +STARTLINE}
 addUserKnob {13 translate t "The translation of the object in its local coordinate space."}
 translate {0 -0.2 0}
 addUserKnob {13 rotate t "The rotation of the object in its local coordinate space."}
 rotate {{30*sin(.075*frame)} 0 0}
 addUserKnob {13 elongation t "The elongation of the object along the respective axes." +DISABLED}
 elongation {0.1 0 0}
 addUserKnob {6 elongate t "Enable the elongation of the object." -STARTLINE}
 addUserKnob {7 uniform_scale l "uniform scale" t "The scale of the object in its local coordinate space, along all axes." R 0 10}
 uniform_scale 1
 addUserKnob {26 div1 l "" +STARTLINE}
 addUserKnob {4 repetition t "Repeat objects in the scene with no extra memory consumption. Note that if the repeated objects overlap some strange things can occur." -STARTLINE M {none finite infinite "" ""}}
 addUserKnob {13 repetition_params l spacing t "The spacing along each positive axis to repeat the objects." +HIDDEN}
 repetition_params {1.1 1.1 100}
 addUserKnob {7 repetition_spacing l spacing t "The spacing between the objects." +HIDDEN R 0 10}
 repetition_spacing 1.1
 addUserKnob {26 ""}
 addUserKnob {4 blend_type l "blend type" t "The type of interaction this object will have with its children.\n    Union: All objects will appear as normal.\n    Subtraction: All children of this object will be subtracted from this object, leaving holes.\n    Intersection: Only the region where this object and its children overlap will remain.\n    Smooth Union: All children will smoothly blend together with this object according to the 'blend strength'.\n    Smooth Subtraction: All children of this object will be subtracted from this object, leaving holes that are smoothed according to the 'blend strength'.\n    Smooth Intersection: Only the region where this object and its children overlap will remain, and the remaining regions will be smoothed according to the 'blend strength'." M {union subtraction intersection "smooth union" "smooth subtraction" "smooth intersection"}}
 addUserKnob {7 blend_strength l "blend strength" t "The amount to blend between this and its child objects if one of the 'Smooth' blend types are selected." +DISABLED}
 blend_strength 0.5
 addUserKnob {6 is_bound l "is bound" t "If enabled, this object will act as a bounding volume for all its children. This means that until a ray hits the bounding volume, none of the child object's signed distance fields will be computed. This can vastly improve performance, especially when many complex objects are far from the camera." +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {26 info l "" +STARTLINE T "v1.0.0 - (c) Owen Bulka - 2022"}
}
 Input {
  inputs 0
  name siblings
  xpos 1484
  ypos 476
 }
 Dot {
  name Dot2
  xpos 1518
  ypos 904
 }
 Input {
  inputs 0
  name children
  xpos 1357
  ypos 475
  number 1
 }
 Dot {
  name Dot1
  xpos 1391
  ypos 826
 }
 Constant {
  inputs 0
  channels sdf_position_scale
  color {{parent.translate.x} {parent.translate.y} {parent.translate.z} {parent.uniform_scale}}
  format "1 1 0 0 1 1 1 1x1"
  name position_scale
  xpos 280
  ypos 455
 }
 Dot {
  name Dot17
  xpos 314
  ypos 647
 }
 Constant {
  inputs 0
  channels sdf_rotation_wall_thickness
  color {{"parent.rotate.x * pi / 180"} {"parent.rotate.y * pi / 180"} {"parent.rotate.z * pi / 180"} {parent.wall_thickness}}
  format "1 1 0 0 1 1 1 1x1"
  name rotation
  xpos 403
  ypos 457
 }
 Copy {
  inputs 2
  channels all
  name Copy1
  xpos 403
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_dimensions
  color {{parent.dimension_x} {parent.dimension_y} {parent.dimension_z} {parent.dimension_w}}
  format "1 1 0 0 1 1 1 1x1"
  name dimensions
  xpos 540
  ypos 460
 }
 Copy {
  inputs 2
  channels all
  name Copy2
  xpos 540
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_colour
  color {{parent.colour.r} {parent.colour.g} {parent.colour.b} {parent.refractive_index}}
  format "1 1 0 0 1 1 1 1x1"
  name colour
  xpos 669
  ypos 459
 }
 Copy {
  inputs 2
  channels all
  name Copy3
  xpos 669
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape
  color {{parent.shape} {"parent.repetition | (parent.elongate ? 4 : 0) | (parent.mirror_x ? 8 : 0) | (parent.mirror_y ? 16 : 0) | (parent.mirror_z ? 32 : 0) | (parent.hollow ? 64 : 0) | (parent.blend_type > 0 ? (1 << (parent.blend_type + 6)) : 0) | (parent.is_bound ? 4096 : 0)"} {"parent.sdf_merge.disable ? 0 : parent.sdf_merge.input1.width"} {parent.blend_strength}}
  format "1 1 0 0 1 1 1 1x1"
  name shape
  xpos 806
  ypos 462
 }
 Copy {
  inputs 2
  channels all
  name Copy4
  xpos 806
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_surface
  color {{parent.reflection} {parent.transmission} {parent.emission} {parent.roughness}}
  format "1 1 0 0 1 1 1 1x1"
  name surface
  xpos 935
  ypos 460
 }
 Copy {
  inputs 2
  channels all
  name Copy5
  xpos 936
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape_mods_0
  color {{parent.repetition_params.x} {parent.repetition_params.y} {parent.repetition_params.z} {parent.repetition_spacing}}
  format "1 1 0 0 1 1 1 1x1"
  name shape_mods
  xpos 1056
  ypos 463
 }
 Copy {
  inputs 2
  channels all
  name Copy6
  xpos 1056
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape_mods_1
  color {{parent.elongation.x} {parent.elongation.y} {parent.elongation.z} {parent.edge_radius}}
  format "1 1 0 0 1 1 1 1x1"
  name shape_mods1
  xpos 1183
  ypos 465
 }
 Copy {
  inputs 2
  channels all
  name Copy7
  xpos 1183
  ypos 726
 }
 Group {
  inputs 2
  name sdf_merge
  xpos 1183
  ypos 822
  disable {{"!(\[exists parent.input1] && !input1.parent.input1.disable)"}}
  addUserKnob {20 User}
  addUserKnob {26 warning l Warning: T "Only merge lights with lights, and primitives with primitives"}
 }
  Reformat {
   inputs 0
   type "to box"
   box_width 1
   box_height 1
   box_fixed true
   name Reformat1
   xpos -119
   ypos 440
  }
  Input {
   inputs 0
   name Input2
   xpos 158
   ypos -28
   number 1
  }
  Dot {
   name Dot2
   xpos 192
   ypos -2
  }
set N5f98d600 [stack 0]
  Dot {
   name Dot3
   xpos 329
   ypos -2
  }
  Dot {
   name Dot4
   xpos 329
   ypos 391
  }
  Input {
   inputs 0
   name Input1
   xpos 0
   ypos -32
  }
  Dot {
   name Dot1
   xpos 34
   ypos -6
  }
set N5f973900 [stack 0]
  Dot {
   name Dot6
   xpos -98
   ypos -6
  }
  Dot {
   name Dot5
   xpos -98
   ypos 336
  }
push $N5f98d600
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop3
   xpos 158
   ypos 69
  }
  Crop {
   box {0 0 {parent.Dot2.width} 1}
   name Crop4
   xpos 158
   ypos 95
  }
  Transform {
   translate {{parent.Dot1.width} 0}
   center {1 0.5}
   name Transform2
   xpos 158
   ypos 121
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop5
   xpos 158
   ypos 167
  }
push $N5f973900
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop6
   xpos 0
   ypos 66
  }
  Crop {
   box {0 0 {parent.Dot1.width} 1}
   name Crop7
   xpos 0
   ypos 92
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop8
   xpos 0
   ypos 164
  }
  Merge2 {
   inputs 2
   also_merge all
   name Merge1
   xpos 0
   ypos 262
   disable {{"\[exists parent.input1] ? 0:1"}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input1] ? 0:1"}}
   name Switch2
   xpos 0
   ypos 332
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:1"}}
   name Switch1
   xpos 0
   ypos 387
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:\[exists parent.input1] ? 0:1"}}
   name Switch3
   xpos 0
   ypos 456
  }
  Dot {
   name out_dot
   xpos 36
   ypos 518
  }
  Output {
   name Output1
   xpos 2
   ypos 661
  }
 end_group
 Group {
  inputs 2
  name sdf_merge1
  xpos 1183
  ypos 900
  disable {{"!(\[exists parent.input0] && !(parent.input0.disable && !\[exists parent.input0.input0]))"}}
  addUserKnob {20 User}
  addUserKnob {26 warning l Warning: T "Only merge lights with lights, and primitives with primitives"}
 }
  Reformat {
   inputs 0
   type "to box"
   box_width 1
   box_height 1
   box_fixed true
   name Reformat1
   xpos -119
   ypos 440
  }
  Input {
   inputs 0
   name Input2
   xpos 158
   ypos -28
   number 1
  }
  Dot {
   name Dot2
   xpos 192
   ypos -2
  }
set N5f907200 [stack 0]
  Dot {
   name Dot3
   xpos 329
   ypos -2
  }
  Dot {
   name Dot4
   xpos 329
   ypos 391
  }
  Input {
   inputs 0
   name Input1
   xpos 0
   ypos -32
  }
  Dot {
   name Dot1
   xpos 34
   ypos -6
  }
set N5f905600 [stack 0]
  Dot {
   name Dot6
   xpos -98
   ypos -6
  }
  Dot {
   name Dot5
   xpos -98
   ypos 336
  }
push $N5f907200
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop3
   xpos 158
   ypos 69
  }
  Crop {
   box {0 0 {parent.Dot2.width} 1}
   name Crop4
   xpos 158
   ypos 95
  }
  Transform {
   translate {{parent.Dot1.width} 0}
   center {1 0.5}
   name Transform2
   xpos 158
   ypos 121
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop5
   xpos 158
   ypos 167
  }
push $N5f905600
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop6
   xpos 0
   ypos 66
  }
  Crop {
   box {0 0 {parent.Dot1.width} 1}
   name Crop7
   xpos 0
   ypos 92
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop8
   xpos 0
   ypos 164
  }
  Merge2 {
   inputs 2
   also_merge all
   name Merge1
   xpos 0
   ypos 262
   disable {{"\[exists parent.input1] ? 0:1"}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input1] ? 0:1"}}
   name Switch2
   xpos 0
   ypos 332
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:1"}}
   name Switch1
   xpos 0
   ypos 387
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:\[exists parent.input1] ? 0:1"}}
   name Switch3
   xpos 0
   ypos 456
  }
  Dot {
   name out_dot
   xpos 36
   ypos 518
  }
  Output {
   name Output1
   xpos 2
   ypos 661
  }
 end_group
 Output {
  name Output1
  xpos 1183
  ypos 1002
 }
end_group
Group {
 inputs 0
 name sdf_primitive16
 onCreate "__import__('sdf.primitive', fromlist='SDFPrimitive').SDFPrimitive().handle_node_created()"
 knobChanged "__import__('sdf.primitive', fromlist='SDFPrimitive').SDFPrimitive().handle_knob_changed()"
 tile_color 0xffffffff
 label "hollow sphere"
 xpos -414
 ypos -204
 addUserKnob {20 User l "SDF Primitive"}
 addUserKnob {4 shape t "The shape of the object." M {sphere ellipsoid "cut sphere" "hollow sphere" "death star" "solid angle" "rectangular prism" "rectangular prism frame" rhombus "triangular prism" cylinder "infinite cylinder" plane capsule cone "infinite cone" "capped cone" "rounded cone" torus "capped torus" link "hexagonal prism" octahedron mandelbulb mandelbox ""}}
 shape "hollow sphere"
 addUserKnob {7 dimension_x l radius t "The radius of the sphere." R 0 10}
 dimension_x 0.3
 addUserKnob {7 dimension_y l height t "The height (y-axis) at which an opening is created." R 0 10}
 dimension_y 0.1
 addUserKnob {7 dimension_z l thickness t "The thickness of the walls of the hollow sphere."}
 dimension_z 0.05
 addUserKnob {7 dimension_w l "orbital trap blend strength" t "Transition between orbital trap based colouring and the colour provided by the 'colour' knob." +HIDDEN}
 dimension_w 1
 addUserKnob {7 wall_thickness l "wall thickness" t "The thickness of the walls of the shape, if the shape is hollow." +DISABLED}
 wall_thickness 0.01
 addUserKnob {6 hollow t "If enabled, the object will be hollow, with a thickness of 'wall thickness'." -STARTLINE}
 addUserKnob {7 edge_radius l "edge radius" t "This parameter increases the hit tolerance by the specified amount for this specific object, having the effect of rounding off the edges."}
 addUserKnob {6 mirror_x l "mirror x" t "Mirror the shape in the yz-plane." +STARTLINE}
 addUserKnob {6 mirror_y l "mirror y" t "Mirror the shape in the xz-plane." -STARTLINE}
 addUserKnob {6 mirror_z l "mirror z" t "Mirror the shape in the xy-plane." -STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {18 colour t "The diffuse colour of the shape."}
 colour {1 1 1}
 addUserKnob {6 colour_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {7 reflection t "The amount of light that is reflected off the shape's surface. This plus 'transmission' should be less than or equal to one."}
 reflection 1
 addUserKnob {7 transmission t "The amount of light that is transmitted through the shape's surface. This plus 'reflection' should be less than or equal to one."}
 addUserKnob {7 refractive_index l "refractive index" t "The index of refraction of the object." R 1 4}
 refractive_index 1
 addUserKnob {7 roughness t "The object's surface will scatter the light more the higher this value is. Increase the 'pixel subdivisions' to make it look less aliased."}
 addUserKnob {7 emission t "The amount of light emitted by the object. Increase the 'hdri lighting samples' to give it less noise. This is more of a placeholder for when the path marched version is released :)"}
 addUserKnob {26 div0 l "" +STARTLINE}
 addUserKnob {13 translate t "The translation of the object in its local coordinate space."}
 translate {0.62 0.4 0}
 addUserKnob {13 rotate t "The rotation of the object in its local coordinate space."}
 rotate {{curve x1 30 x63 120} 0 -20}
 addUserKnob {13 elongation t "The elongation of the object along the respective axes." +DISABLED}
 elongation {0.1 0 0}
 addUserKnob {6 elongate t "Enable the elongation of the object." -STARTLINE}
 addUserKnob {7 uniform_scale l "uniform scale" t "The scale of the object in its local coordinate space, along all axes." R 0 10}
 uniform_scale 1
 addUserKnob {26 div1 l "" +STARTLINE}
 addUserKnob {4 repetition t "Repeat objects in the scene with no extra memory consumption. Note that if the repeated objects overlap some strange things can occur." -STARTLINE M {none finite infinite "" ""}}
 addUserKnob {13 repetition_params l spacing t "The spacing along each positive axis to repeat the objects." +HIDDEN}
 repetition_params {1.1 1.1 100}
 addUserKnob {7 repetition_spacing l spacing t "The spacing between the objects." +HIDDEN R 0 10}
 repetition_spacing 1.1
 addUserKnob {26 ""}
 addUserKnob {4 blend_type l "blend type" t "The type of interaction this object will have with its children.\n    Union: All objects will appear as normal.\n    Subtraction: All children of this object will be subtracted from this object, leaving holes.\n    Intersection: Only the region where this object and its children overlap will remain.\n    Smooth Union: All children will smoothly blend together with this object according to the 'blend strength'.\n    Smooth Subtraction: All children of this object will be subtracted from this object, leaving holes that are smoothed according to the 'blend strength'.\n    Smooth Intersection: Only the region where this object and its children overlap will remain, and the remaining regions will be smoothed according to the 'blend strength'." +DISABLED M {union subtraction intersection "smooth union" "smooth subtraction" "smooth intersection"}}
 addUserKnob {7 blend_strength l "blend strength" t "The amount to blend between this and its child objects if one of the 'Smooth' blend types are selected." +DISABLED}
 blend_strength 0.125
 addUserKnob {6 is_bound l "is bound" t "If enabled, this object will act as a bounding volume for all its children. This means that until a ray hits the bounding volume, none of the child object's signed distance fields will be computed. This can vastly improve performance, especially when many complex objects are far from the camera." +DISABLED +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {26 info l "" +STARTLINE T "v1.0.0 - (c) Owen Bulka - 2022"}
}
 Input {
  inputs 0
  name siblings
  xpos 1484
  ypos 476
 }
 Dot {
  name Dot2
  xpos 1518
  ypos 904
 }
 Input {
  inputs 0
  name children
  xpos 1357
  ypos 475
  number 1
 }
 Dot {
  name Dot1
  xpos 1391
  ypos 826
 }
 Constant {
  inputs 0
  channels sdf_position_scale
  color {{parent.translate.x} {parent.translate.y} {parent.translate.z} {parent.uniform_scale}}
  format "1 1 0 0 1 1 1 1x1"
  name position_scale
  xpos 280
  ypos 455
 }
 Dot {
  name Dot17
  xpos 314
  ypos 647
 }
 Constant {
  inputs 0
  channels sdf_rotation_wall_thickness
  color {{"parent.rotate.x * pi / 180"} {"parent.rotate.y * pi / 180"} {"parent.rotate.z * pi / 180"} {parent.wall_thickness}}
  format "1 1 0 0 1 1 1 1x1"
  name rotation
  xpos 403
  ypos 457
 }
 Copy {
  inputs 2
  channels all
  name Copy1
  xpos 403
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_dimensions
  color {{parent.dimension_x} {parent.dimension_y} {parent.dimension_z} {parent.dimension_w}}
  format "1 1 0 0 1 1 1 1x1"
  name dimensions
  xpos 540
  ypos 460
 }
 Copy {
  inputs 2
  channels all
  name Copy2
  xpos 540
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_colour
  color {{parent.colour.r} {parent.colour.g} {parent.colour.b} {parent.refractive_index}}
  format "1 1 0 0 1 1 1 1x1"
  name colour
  xpos 669
  ypos 459
 }
set N5fa83200 [stack 0]
 Copy {
  inputs 2
  channels all
  name Copy3
  xpos 669
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape
  color {{parent.shape} {"parent.repetition | (parent.elongate ? 4 : 0) | (parent.mirror_x ? 8 : 0) | (parent.mirror_y ? 16 : 0) | (parent.mirror_z ? 32 : 0) | (parent.hollow ? 64 : 0) | (parent.blend_type > 0 ? (1 << (parent.blend_type + 6)) : 0) | (parent.is_bound ? 4096 : 0)"} {"parent.sdf_merge.disable ? 0 : parent.sdf_merge.input1.width"} {parent.blend_strength}}
  format "1 1 0 0 1 1 1 1x1"
  name shape
  xpos 806
  ypos 462
 }
 Copy {
  inputs 2
  channels all
  name Copy4
  xpos 806
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_surface
  color {{parent.reflection} {parent.transmission} {parent.emission} {parent.roughness}}
  format "1 1 0 0 1 1 1 1x1"
  name surface
  xpos 935
  ypos 460
 }
 Copy {
  inputs 2
  channels all
  name Copy5
  xpos 936
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape_mods_0
  color {{parent.repetition_params.x} {parent.repetition_params.y} {parent.repetition_params.z} {parent.repetition_spacing}}
  format "1 1 0 0 1 1 1 1x1"
  name shape_mods
  xpos 1056
  ypos 463
 }
 Copy {
  inputs 2
  channels all
  name Copy6
  xpos 1056
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape_mods_1
  color {{parent.elongation.x} {parent.elongation.y} {parent.elongation.z} {parent.edge_radius}}
  format "1 1 0 0 1 1 1 1x1"
  name shape_mods1
  xpos 1183
  ypos 465
 }
 Copy {
  inputs 2
  channels all
  name Copy7
  xpos 1183
  ypos 726
 }
 Group {
  inputs 2
  name sdf_merge
  xpos 1183
  ypos 822
  disable {{"!(\[exists parent.input1] && !input1.parent.input1.disable)"}}
  addUserKnob {20 User}
  addUserKnob {26 warning l Warning: T "Only merge lights with lights, and primitives with primitives"}
 }
  Reformat {
   inputs 0
   type "to box"
   box_width 1
   box_height 1
   box_fixed true
   name Reformat1
   xpos -119
   ypos 440
  }
  Input {
   inputs 0
   name Input2
   xpos 158
   ypos -28
   number 1
  }
  Dot {
   name Dot2
   xpos 192
   ypos -2
  }
set N5fa2b200 [stack 0]
  Dot {
   name Dot3
   xpos 329
   ypos -2
  }
  Dot {
   name Dot4
   xpos 329
   ypos 391
  }
  Input {
   inputs 0
   name Input1
   xpos 0
   ypos -32
  }
  Dot {
   name Dot1
   xpos 34
   ypos -6
  }
set N5fa29600 [stack 0]
  Dot {
   name Dot6
   xpos -98
   ypos -6
  }
  Dot {
   name Dot5
   xpos -98
   ypos 336
  }
push $N5fa2b200
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop3
   xpos 158
   ypos 69
  }
  Crop {
   box {0 0 {parent.Dot2.width} 1}
   name Crop4
   xpos 158
   ypos 95
  }
  Transform {
   translate {{parent.Dot1.width} 0}
   center {1 0.5}
   name Transform2
   xpos 158
   ypos 121
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop5
   xpos 158
   ypos 167
  }
push $N5fa29600
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop6
   xpos 0
   ypos 66
  }
  Crop {
   box {0 0 {parent.Dot1.width} 1}
   name Crop7
   xpos 0
   ypos 92
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop8
   xpos 0
   ypos 164
  }
  Merge2 {
   inputs 2
   also_merge all
   name Merge1
   xpos 0
   ypos 262
   disable {{"\[exists parent.input1] ? 0:1"}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input1] ? 0:1"}}
   name Switch2
   xpos 0
   ypos 332
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:1"}}
   name Switch1
   xpos 0
   ypos 387
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:\[exists parent.input1] ? 0:1"}}
   name Switch3
   xpos 0
   ypos 456
  }
  Dot {
   name out_dot
   xpos 36
   ypos 518
  }
  Output {
   name Output1
   xpos 2
   ypos 661
  }
 end_group
 Group {
  inputs 2
  name sdf_merge1
  xpos 1183
  ypos 900
  disable {{"!(\[exists parent.input0] && !(parent.input0.disable && !\[exists parent.input0.input0]))"}}
  addUserKnob {20 User}
  addUserKnob {26 warning l Warning: T "Only merge lights with lights, and primitives with primitives"}
 }
  Reformat {
   inputs 0
   type "to box"
   box_width 1
   box_height 1
   box_fixed true
   name Reformat1
   xpos -119
   ypos 440
  }
  Input {
   inputs 0
   name Input2
   xpos 158
   ypos -28
   number 1
  }
  Dot {
   name Dot2
   xpos 192
   ypos -2
  }
set N5fbd8f00 [stack 0]
  Dot {
   name Dot3
   xpos 329
   ypos -2
  }
  Dot {
   name Dot4
   xpos 329
   ypos 391
  }
  Input {
   inputs 0
   name Input1
   xpos 0
   ypos -32
  }
  Dot {
   name Dot1
   xpos 34
   ypos -6
  }
set N5fbaf200 [stack 0]
  Dot {
   name Dot6
   xpos -98
   ypos -6
  }
  Dot {
   name Dot5
   xpos -98
   ypos 336
  }
push $N5fbd8f00
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop3
   xpos 158
   ypos 69
  }
  Crop {
   box {0 0 {parent.Dot2.width} 1}
   name Crop4
   xpos 158
   ypos 95
  }
  Transform {
   translate {{parent.Dot1.width} 0}
   center {1 0.5}
   name Transform2
   xpos 158
   ypos 121
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop5
   xpos 158
   ypos 167
  }
push $N5fbaf200
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop6
   xpos 0
   ypos 66
  }
  Crop {
   box {0 0 {parent.Dot1.width} 1}
   name Crop7
   xpos 0
   ypos 92
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop8
   xpos 0
   ypos 164
  }
  Merge2 {
   inputs 2
   also_merge all
   name Merge1
   xpos 0
   ypos 262
   disable {{"\[exists parent.input1] ? 0:1"}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input1] ? 0:1"}}
   name Switch2
   xpos 0
   ypos 332
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:1"}}
   name Switch1
   xpos 0
   ypos 387
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:\[exists parent.input1] ? 0:1"}}
   name Switch3
   xpos 0
   ypos 456
  }
  Dot {
   name out_dot
   xpos 36
   ypos 518
  }
  Output {
   name Output1
   xpos 2
   ypos 661
  }
 end_group
 Output {
  name Output1
  xpos 1183
  ypos 1002
 }
push $N5fa83200
 Viewer {
  frame_range 1-63
  gamma 0.058
  name Viewer1
  selected true
  xpos 1261
  ypos 1198
 }
end_group
push 0
Group {
 inputs 2
 name sdf_primitive11
 onCreate "__import__('sdf.primitive', fromlist='SDFPrimitive').SDFPrimitive().handle_node_created()"
 knobChanged "__import__('sdf.primitive', fromlist='SDFPrimitive').SDFPrimitive().handle_knob_changed()"
 tile_color 0xffffffff
 label "capped torus"
 xpos -414
 ypos -113
 addUserKnob {20 User l "SDF Primitive"}
 addUserKnob {4 shape t "The shape of the object." M {sphere ellipsoid "cut sphere" "hollow sphere" "death star" "solid angle" "rectangular prism" "rectangular prism frame" rhombus "triangular prism" cylinder "infinite cylinder" plane capsule cone "infinite cone" "capped cone" "rounded cone" torus "capped torus" link "hexagonal prism" octahedron mandelbulb mandelbox ""}}
 shape "capped torus"
 addUserKnob {7 dimension_x l "ring radius" t "The radius (xy-plane) of the ring of the torus." R 0 10}
 dimension_x 0.7
 addUserKnob {7 dimension_y l "tube radius" t "The radius of the tube of the torus." R 0 5}
 dimension_y 0.1
 addUserKnob {7 dimension_z l "cap angle" t "The angle (xy-plane, symmetric about y-axis) to cap at, in the range (0-PI)." R 0 3.14159}
 dimension_z 26
 addUserKnob {7 dimension_w l "orbital trap blend strength" t "Transition between orbital trap based colouring and the colour provided by the 'colour' knob." +HIDDEN}
 dimension_w 1
 addUserKnob {7 wall_thickness l "wall thickness" t "The thickness of the walls of the shape, if the shape is hollow." +DISABLED}
 wall_thickness 0.01
 addUserKnob {6 hollow t "If enabled, the object will be hollow, with a thickness of 'wall thickness'." -STARTLINE}
 addUserKnob {7 edge_radius l "edge radius" t "This parameter increases the hit tolerance by the specified amount for this specific object, having the effect of rounding off the edges."}
 addUserKnob {6 mirror_x l "mirror x" t "Mirror the shape in the yz-plane." +STARTLINE}
 addUserKnob {6 mirror_y l "mirror y" t "Mirror the shape in the xz-plane." -STARTLINE}
 addUserKnob {6 mirror_z l "mirror z" t "Mirror the shape in the xy-plane." -STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {18 colour t "The diffuse colour of the shape."}
 colour {1 1 1}
 addUserKnob {6 colour_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {7 reflection t "The amount of light that is reflected off the shape's surface. This plus 'transmission' should be less than or equal to one."}
 reflection 0.01
 addUserKnob {7 transmission t "The amount of light that is transmitted through the shape's surface. This plus 'reflection' should be less than or equal to one."}
 addUserKnob {7 refractive_index l "refractive index" t "The index of refraction of the object." R 1 4}
 refractive_index 1.33
 addUserKnob {7 roughness t "The object's surface will scatter the light more the higher this value is. Increase the 'pixel subdivisions' to make it look less aliased."}
 addUserKnob {7 emission t "The amount of light emitted by the object. Increase the 'hdri lighting samples' to give it less noise. This is more of a placeholder for when the path marched version is released :)"}
 addUserKnob {26 div0 l "" +STARTLINE}
 addUserKnob {13 translate t "The translation of the object in its local coordinate space."}
 translate {0 0.8 0.15}
 addUserKnob {13 rotate t "The rotation of the object in its local coordinate space."}
 rotate {0 -10 130}
 addUserKnob {13 elongation t "The elongation of the object along the respective axes."}
 elongation {0.05 0 0}
 addUserKnob {6 elongate t "Enable the elongation of the object." -STARTLINE}
 elongate true
 addUserKnob {7 uniform_scale l "uniform scale" t "The scale of the object in its local coordinate space, along all axes." R 0 10}
 uniform_scale 1
 addUserKnob {26 div1 l "" +STARTLINE}
 addUserKnob {4 repetition t "Repeat objects in the scene with no extra memory consumption. Note that if the repeated objects overlap some strange things can occur." -STARTLINE M {none finite infinite "" ""}}
 addUserKnob {13 repetition_params l spacing t "The spacing along each positive axis to repeat the objects." +HIDDEN}
 repetition_params {1.1 1.1 100}
 addUserKnob {7 repetition_spacing l spacing t "The spacing between the objects." +HIDDEN R 0 10}
 repetition_spacing 1.1
 addUserKnob {26 ""}
 addUserKnob {4 blend_type l "blend type" t "The type of interaction this object will have with its children.\n    Union: All objects will appear as normal.\n    Subtraction: All children of this object will be subtracted from this object, leaving holes.\n    Intersection: Only the region where this object and its children overlap will remain.\n    Smooth Union: All children will smoothly blend together with this object according to the 'blend strength'.\n    Smooth Subtraction: All children of this object will be subtracted from this object, leaving holes that are smoothed according to the 'blend strength'.\n    Smooth Intersection: Only the region where this object and its children overlap will remain, and the remaining regions will be smoothed according to the 'blend strength'." M {union subtraction intersection "smooth union" "smooth subtraction" "smooth intersection"}}
 blend_type "smooth union"
 addUserKnob {7 blend_strength l "blend strength" t "The amount to blend between this and its child objects if one of the 'Smooth' blend types are selected."}
 blend_strength 0.015
 addUserKnob {6 is_bound l "is bound" t "If enabled, this object will act as a bounding volume for all its children. This means that until a ray hits the bounding volume, none of the child object's signed distance fields will be computed. This can vastly improve performance, especially when many complex objects are far from the camera." +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {26 info l "" +STARTLINE T "v1.0.0 - (c) Owen Bulka - 2022"}
}
 Input {
  inputs 0
  name siblings
  xpos 1484
  ypos 476
 }
 Dot {
  name Dot2
  xpos 1518
  ypos 904
 }
 Input {
  inputs 0
  name children
  xpos 1357
  ypos 475
  number 1
 }
 Dot {
  name Dot1
  xpos 1391
  ypos 826
 }
 Constant {
  inputs 0
  channels sdf_position_scale
  color {{parent.translate.x} {parent.translate.y} {parent.translate.z} {parent.uniform_scale}}
  format "1 1 0 0 1 1 1 1x1"
  name position_scale
  xpos 280
  ypos 455
 }
 Dot {
  name Dot17
  xpos 314
  ypos 647
 }
 Constant {
  inputs 0
  channels sdf_rotation_wall_thickness
  color {{"parent.rotate.x * pi / 180"} {"parent.rotate.y * pi / 180"} {"parent.rotate.z * pi / 180"} {parent.wall_thickness}}
  format "1 1 0 0 1 1 1 1x1"
  name rotation
  xpos 403
  ypos 457
 }
 Copy {
  inputs 2
  channels all
  name Copy1
  xpos 403
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_dimensions
  color {{parent.dimension_x} {parent.dimension_y} {parent.dimension_z} {parent.dimension_w}}
  format "1 1 0 0 1 1 1 1x1"
  name dimensions
  xpos 540
  ypos 460
 }
 Copy {
  inputs 2
  channels all
  name Copy2
  xpos 540
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_colour
  color {{parent.colour.r} {parent.colour.g} {parent.colour.b} {parent.refractive_index}}
  format "1 1 0 0 1 1 1 1x1"
  name colour
  xpos 669
  ypos 459
 }
 Copy {
  inputs 2
  channels all
  name Copy3
  xpos 669
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape
  color {{parent.shape} {"parent.repetition | (parent.elongate ? 4 : 0) | (parent.mirror_x ? 8 : 0) | (parent.mirror_y ? 16 : 0) | (parent.mirror_z ? 32 : 0) | (parent.hollow ? 64 : 0) | (parent.blend_type > 0 ? (1 << (parent.blend_type + 6)) : 0) | (parent.is_bound ? 4096 : 0)"} {"parent.sdf_merge.disable ? 0 : parent.sdf_merge.input1.width"} {parent.blend_strength}}
  format "1 1 0 0 1 1 1 1x1"
  name shape
  xpos 806
  ypos 462
 }
 Copy {
  inputs 2
  channels all
  name Copy4
  xpos 806
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_surface
  color {{parent.reflection} {parent.transmission} {parent.emission} {parent.roughness}}
  format "1 1 0 0 1 1 1 1x1"
  name surface
  xpos 935
  ypos 460
 }
 Copy {
  inputs 2
  channels all
  name Copy5
  xpos 936
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape_mods_0
  color {{parent.repetition_params.x} {parent.repetition_params.y} {parent.repetition_params.z} {parent.repetition_spacing}}
  format "1 1 0 0 1 1 1 1x1"
  name shape_mods
  xpos 1056
  ypos 463
 }
 Copy {
  inputs 2
  channels all
  name Copy6
  xpos 1056
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape_mods_1
  color {{parent.elongation.x} {parent.elongation.y} {parent.elongation.z} {parent.edge_radius}}
  format "1 1 0 0 1 1 1 1x1"
  name shape_mods1
  xpos 1183
  ypos 465
 }
 Copy {
  inputs 2
  channels all
  name Copy7
  xpos 1183
  ypos 726
 }
 Group {
  inputs 2
  name sdf_merge
  xpos 1183
  ypos 822
  disable {{"!(\[exists parent.input1] && !input1.parent.input1.disable)"}}
  addUserKnob {20 User}
  addUserKnob {26 warning l Warning: T "Only merge lights with lights, and primitives with primitives"}
 }
  Reformat {
   inputs 0
   type "to box"
   box_width 1
   box_height 1
   box_fixed true
   name Reformat1
   xpos -119
   ypos 440
  }
  Input {
   inputs 0
   name Input2
   xpos 158
   ypos -28
   number 1
  }
  Dot {
   name Dot2
   xpos 192
   ypos -2
  }
set N5f8d4800 [stack 0]
  Dot {
   name Dot3
   xpos 329
   ypos -2
  }
  Dot {
   name Dot4
   xpos 329
   ypos 391
  }
  Input {
   inputs 0
   name Input1
   xpos 0
   ypos -32
  }
  Dot {
   name Dot1
   xpos 34
   ypos -6
  }
set N5f8aeb00 [stack 0]
  Dot {
   name Dot6
   xpos -98
   ypos -6
  }
  Dot {
   name Dot5
   xpos -98
   ypos 336
  }
push $N5f8d4800
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop3
   xpos 158
   ypos 69
  }
  Crop {
   box {0 0 {parent.Dot2.width} 1}
   name Crop4
   xpos 158
   ypos 95
  }
  Transform {
   translate {{parent.Dot1.width} 0}
   center {1 0.5}
   name Transform2
   xpos 158
   ypos 121
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop5
   xpos 158
   ypos 167
  }
push $N5f8aeb00
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop6
   xpos 0
   ypos 66
  }
  Crop {
   box {0 0 {parent.Dot1.width} 1}
   name Crop7
   xpos 0
   ypos 92
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop8
   xpos 0
   ypos 164
  }
  Merge2 {
   inputs 2
   also_merge all
   name Merge1
   xpos 0
   ypos 262
   disable {{"\[exists parent.input1] ? 0:1"}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input1] ? 0:1"}}
   name Switch2
   xpos 0
   ypos 332
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:1"}}
   name Switch1
   xpos 0
   ypos 387
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:\[exists parent.input1] ? 0:1"}}
   name Switch3
   xpos 0
   ypos 456
  }
  Dot {
   name out_dot
   xpos 36
   ypos 518
  }
  Output {
   name Output1
   xpos 2
   ypos 661
  }
 end_group
 Group {
  inputs 2
  name sdf_merge1
  xpos 1183
  ypos 900
  disable {{"!(\[exists parent.input0] && !(parent.input0.disable && !\[exists parent.input0.input0]))"}}
  addUserKnob {20 User}
  addUserKnob {26 warning l Warning: T "Only merge lights with lights, and primitives with primitives"}
 }
  Reformat {
   inputs 0
   type "to box"
   box_width 1
   box_height 1
   box_fixed true
   name Reformat1
   xpos -119
   ypos 440
  }
  Input {
   inputs 0
   name Input2
   xpos 158
   ypos -28
   number 1
  }
  Dot {
   name Dot2
   xpos 192
   ypos -2
  }
set N5f862400 [stack 0]
  Dot {
   name Dot3
   xpos 329
   ypos -2
  }
  Dot {
   name Dot4
   xpos 329
   ypos 391
  }
  Input {
   inputs 0
   name Input1
   xpos 0
   ypos -32
  }
  Dot {
   name Dot1
   xpos 34
   ypos -6
  }
set N5f860800 [stack 0]
  Dot {
   name Dot6
   xpos -98
   ypos -6
  }
  Dot {
   name Dot5
   xpos -98
   ypos 336
  }
push $N5f862400
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop3
   xpos 158
   ypos 69
  }
  Crop {
   box {0 0 {parent.Dot2.width} 1}
   name Crop4
   xpos 158
   ypos 95
  }
  Transform {
   translate {{parent.Dot1.width} 0}
   center {1 0.5}
   name Transform2
   xpos 158
   ypos 121
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop5
   xpos 158
   ypos 167
  }
push $N5f860800
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop6
   xpos 0
   ypos 66
  }
  Crop {
   box {0 0 {parent.Dot1.width} 1}
   name Crop7
   xpos 0
   ypos 92
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop8
   xpos 0
   ypos 164
  }
  Merge2 {
   inputs 2
   also_merge all
   name Merge1
   xpos 0
   ypos 262
   disable {{"\[exists parent.input1] ? 0:1"}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input1] ? 0:1"}}
   name Switch2
   xpos 0
   ypos 332
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:1"}}
   name Switch1
   xpos 0
   ypos 387
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:\[exists parent.input1] ? 0:1"}}
   name Switch3
   xpos 0
   ypos 456
  }
  Dot {
   name out_dot
   xpos 36
   ypos 518
  }
  Output {
   name Output1
   xpos 2
   ypos 661
  }
 end_group
 Output {
  name Output1
  xpos 1183
  ypos 1002
 }
end_group
Group {
 name sdf_primitive12
 onCreate "__import__('sdf.primitive', fromlist='SDFPrimitive').SDFPrimitive().handle_node_created()"
 knobChanged "__import__('sdf.primitive', fromlist='SDFPrimitive').SDFPrimitive().handle_knob_changed()"
 tile_color 0xffffffff
 label "capped torus"
 xpos -251
 ypos -113
 addUserKnob {20 User l "SDF Primitive"}
 addUserKnob {4 shape t "The shape of the object." M {sphere ellipsoid "cut sphere" "hollow sphere" "death star" "solid angle" "rectangular prism" "rectangular prism frame" rhombus "triangular prism" cylinder "infinite cylinder" plane capsule cone "infinite cone" "capped cone" "rounded cone" torus "capped torus" link "hexagonal prism" octahedron mandelbulb mandelbox ""}}
 shape "capped torus"
 addUserKnob {7 dimension_x l "ring radius" t "The radius (xy-plane) of the ring of the torus." R 0 10}
 dimension_x 0.3
 addUserKnob {7 dimension_y l "tube radius" t "The radius of the tube of the torus." R 0 5}
 dimension_y 0.1
 addUserKnob {7 dimension_z l "cap angle" t "The angle (xy-plane, symmetric about y-axis) to cap at, in the range (0-180.)." R 0 180}
 dimension_z 60
 addUserKnob {7 dimension_w l "orbital trap blend strength" t "Transition between orbital trap based colouring and the colour provided by the 'colour' knob." +HIDDEN}
 dimension_w 1
 addUserKnob {7 wall_thickness l "wall thickness" t "The thickness of the walls of the shape, if the shape is hollow." +DISABLED}
 wall_thickness 0.01
 addUserKnob {6 hollow t "If enabled, the object will be hollow, with a thickness of 'wall thickness'." -STARTLINE}
 addUserKnob {7 edge_radius l "edge radius" t "This parameter increases the hit tolerance by the specified amount for this specific object, having the effect of rounding off the edges."}
 addUserKnob {6 mirror_x l "mirror x" t "Mirror the shape in the yz-plane." +STARTLINE}
 addUserKnob {6 mirror_y l "mirror y" t "Mirror the shape in the xz-plane." -STARTLINE}
 addUserKnob {6 mirror_z l "mirror z" t "Mirror the shape in the xy-plane." -STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {18 colour t "The diffuse colour of the shape."}
 colour {1 1 1}
 addUserKnob {6 colour_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {7 reflection t "The amount of light that is reflected off the shape's surface. This plus 'transmission' should be less than or equal to one."}
 reflection 0.01
 addUserKnob {7 transmission t "The amount of light that is transmitted through the shape's surface. This plus 'reflection' should be less than or equal to one."}
 addUserKnob {7 refractive_index l "refractive index" t "The index of refraction of the object." R 1 4}
 refractive_index 1.33
 addUserKnob {7 roughness t "The object's surface will scatter the light more the higher this value is. Increase the 'pixel subdivisions' to make it look less aliased."}
 addUserKnob {7 emission t "The amount of light emitted by the object. Increase the 'hdri lighting samples' to give it less noise. This is more of a placeholder for when the path marched version is released :)"}
 addUserKnob {26 div0 l "" +STARTLINE}
 addUserKnob {13 translate t "The translation of the object in its local coordinate space."}
 translate {0.3 0.11 0.2}
 addUserKnob {13 rotate t "The rotation of the object in its local coordinate space."}
 rotate {-90 -30 -30}
 addUserKnob {13 elongation t "The elongation of the object along the respective axes." +DISABLED}
 elongation {0.1 0 0}
 addUserKnob {6 elongate t "Enable the elongation of the object." -STARTLINE}
 addUserKnob {7 uniform_scale l "uniform scale" t "The scale of the object in its local coordinate space, along all axes." R 0 10}
 uniform_scale 1
 addUserKnob {26 div1 l "" +STARTLINE}
 addUserKnob {4 repetition t "Repeat objects in the scene with no extra memory consumption. Note that if the repeated objects overlap some strange things can occur." -STARTLINE M {none finite infinite "" ""}}
 addUserKnob {13 repetition_params l spacing t "The spacing along each positive axis to repeat the objects." +HIDDEN}
 repetition_params {1.1 1.1 100}
 addUserKnob {7 repetition_spacing l spacing t "The spacing between the objects." +HIDDEN R 0 10}
 repetition_spacing 1.1
 addUserKnob {26 ""}
 addUserKnob {4 blend_type l "blend type" t "The type of interaction this object will have with its children.\n    Union: All objects will appear as normal.\n    Subtraction: All children of this object will be subtracted from this object, leaving holes.\n    Intersection: Only the region where this object and its children overlap will remain.\n    Smooth Union: All children will smoothly blend together with this object according to the 'blend strength'.\n    Smooth Subtraction: All children of this object will be subtracted from this object, leaving holes that are smoothed according to the 'blend strength'.\n    Smooth Intersection: Only the region where this object and its children overlap will remain, and the remaining regions will be smoothed according to the 'blend strength'." +DISABLED M {union subtraction intersection "smooth union" "smooth subtraction" "smooth intersection"}}
 blend_type "smooth union"
 addUserKnob {7 blend_strength l "blend strength" t "The amount to blend between this and its child objects if one of the 'Smooth' blend types are selected." +DISABLED}
 blend_strength 0.06
 addUserKnob {6 is_bound l "is bound" t "If enabled, this object will act as a bounding volume for all its children. This means that until a ray hits the bounding volume, none of the child object's signed distance fields will be computed. This can vastly improve performance, especially when many complex objects are far from the camera." +DISABLED +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {26 info l "" +STARTLINE T "v1.0.0 - (c) Owen Bulka - 2022"}
}
 Input {
  inputs 0
  name siblings
  xpos 1484
  ypos 476
 }
 Dot {
  name Dot2
  xpos 1518
  ypos 904
 }
 Input {
  inputs 0
  name children
  xpos 1357
  ypos 475
  number 1
 }
 Dot {
  name Dot1
  xpos 1391
  ypos 826
 }
 Constant {
  inputs 0
  channels sdf_position_scale
  color {{parent.translate.x} {parent.translate.y} {parent.translate.z} {parent.uniform_scale}}
  format "1 1 0 0 1 1 1 1x1"
  name position_scale
  xpos 280
  ypos 455
 }
 Dot {
  name Dot17
  xpos 314
  ypos 647
 }
 Constant {
  inputs 0
  channels sdf_rotation_wall_thickness
  color {{"parent.rotate.x * pi / 180"} {"parent.rotate.y * pi / 180"} {"parent.rotate.z * pi / 180"} {parent.wall_thickness}}
  format "1 1 0 0 1 1 1 1x1"
  name rotation
  xpos 403
  ypos 457
 }
 Copy {
  inputs 2
  channels all
  name Copy1
  xpos 403
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_dimensions
  color {{parent.dimension_x} {parent.dimension_y} {parent.dimension_z} {parent.dimension_w}}
  format "1 1 0 0 1 1 1 1x1"
  name dimensions
  xpos 540
  ypos 460
 }
 Copy {
  inputs 2
  channels all
  name Copy2
  xpos 540
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_colour
  color {{parent.colour.r} {parent.colour.g} {parent.colour.b} {parent.refractive_index}}
  format "1 1 0 0 1 1 1 1x1"
  name colour
  xpos 669
  ypos 459
 }
 Copy {
  inputs 2
  channels all
  name Copy3
  xpos 669
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape
  color {{parent.shape} {"parent.repetition | (parent.elongate ? 4 : 0) | (parent.mirror_x ? 8 : 0) | (parent.mirror_y ? 16 : 0) | (parent.mirror_z ? 32 : 0) | (parent.hollow ? 64 : 0) | (parent.blend_type > 0 ? (1 << (parent.blend_type + 6)) : 0) | (parent.is_bound ? 4096 : 0)"} {"parent.sdf_merge.disable ? 0 : parent.sdf_merge.input1.width"} {parent.blend_strength}}
  format "1 1 0 0 1 1 1 1x1"
  name shape
  xpos 806
  ypos 462
 }
 Copy {
  inputs 2
  channels all
  name Copy4
  xpos 806
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_surface
  color {{parent.reflection} {parent.transmission} {parent.emission} {parent.roughness}}
  format "1 1 0 0 1 1 1 1x1"
  name surface
  xpos 935
  ypos 460
 }
 Copy {
  inputs 2
  channels all
  name Copy5
  xpos 936
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape_mods_0
  color {{parent.repetition_params.x} {parent.repetition_params.y} {parent.repetition_params.z} {parent.repetition_spacing}}
  format "1 1 0 0 1 1 1 1x1"
  name shape_mods
  xpos 1056
  ypos 463
 }
 Copy {
  inputs 2
  channels all
  name Copy6
  xpos 1056
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape_mods_1
  color {{parent.elongation.x} {parent.elongation.y} {parent.elongation.z} {parent.edge_radius}}
  format "1 1 0 0 1 1 1 1x1"
  name shape_mods1
  xpos 1183
  ypos 465
 }
 Copy {
  inputs 2
  channels all
  name Copy7
  xpos 1183
  ypos 726
 }
 Group {
  inputs 2
  name sdf_merge
  xpos 1183
  ypos 822
  disable {{"!(\[exists parent.input1] && !input1.parent.input1.disable)"}}
  addUserKnob {20 User}
  addUserKnob {26 warning l Warning: T "Only merge lights with lights, and primitives with primitives"}
 }
  Reformat {
   inputs 0
   type "to box"
   box_width 1
   box_height 1
   box_fixed true
   name Reformat1
   xpos -119
   ypos 440
  }
  Input {
   inputs 0
   name Input2
   xpos 158
   ypos -28
   number 1
  }
  Dot {
   name Dot2
   xpos 192
   ypos -2
  }
set N5f56e400 [stack 0]
  Dot {
   name Dot3
   xpos 329
   ypos -2
  }
  Dot {
   name Dot4
   xpos 329
   ypos 391
  }
  Input {
   inputs 0
   name Input1
   xpos 0
   ypos -32
  }
  Dot {
   name Dot1
   xpos 34
   ypos -6
  }
set N5f56c800 [stack 0]
  Dot {
   name Dot6
   xpos -98
   ypos -6
  }
  Dot {
   name Dot5
   xpos -98
   ypos 336
  }
push $N5f56e400
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop3
   xpos 158
   ypos 69
  }
  Crop {
   box {0 0 {parent.Dot2.width} 1}
   name Crop4
   xpos 158
   ypos 95
  }
  Transform {
   translate {{parent.Dot1.width} 0}
   center {1 0.5}
   name Transform2
   xpos 158
   ypos 121
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop5
   xpos 158
   ypos 167
  }
push $N5f56c800
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop6
   xpos 0
   ypos 66
  }
  Crop {
   box {0 0 {parent.Dot1.width} 1}
   name Crop7
   xpos 0
   ypos 92
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop8
   xpos 0
   ypos 164
  }
  Merge2 {
   inputs 2
   also_merge all
   name Merge1
   xpos 0
   ypos 262
   disable {{"\[exists parent.input1] ? 0:1"}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input1] ? 0:1"}}
   name Switch2
   xpos 0
   ypos 332
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:1"}}
   name Switch1
   xpos 0
   ypos 387
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:\[exists parent.input1] ? 0:1"}}
   name Switch3
   xpos 0
   ypos 456
  }
  Dot {
   name out_dot
   xpos 36
   ypos 518
  }
  Output {
   name Output1
   xpos 2
   ypos 661
  }
 end_group
 Group {
  inputs 2
  name sdf_merge1
  xpos 1183
  ypos 900
  disable {{"!(\[exists parent.input0] && !(parent.input0.disable && !\[exists parent.input0.input0]))"}}
  addUserKnob {20 User}
  addUserKnob {26 warning l Warning: T "Only merge lights with lights, and primitives with primitives"}
 }
  Reformat {
   inputs 0
   type "to box"
   box_width 1
   box_height 1
   box_fixed true
   name Reformat1
   xpos -119
   ypos 440
  }
  Input {
   inputs 0
   name Input2
   xpos 158
   ypos -28
   number 1
  }
  Dot {
   name Dot2
   xpos 192
   ypos -2
  }
set N5f528100 [stack 0]
  Dot {
   name Dot3
   xpos 329
   ypos -2
  }
  Dot {
   name Dot4
   xpos 329
   ypos 391
  }
  Input {
   inputs 0
   name Input1
   xpos 0
   ypos -32
  }
  Dot {
   name Dot1
   xpos 34
   ypos -6
  }
set N5f6f6400 [stack 0]
  Dot {
   name Dot6
   xpos -98
   ypos -6
  }
  Dot {
   name Dot5
   xpos -98
   ypos 336
  }
push $N5f528100
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop3
   xpos 158
   ypos 69
  }
  Crop {
   box {0 0 {parent.Dot2.width} 1}
   name Crop4
   xpos 158
   ypos 95
  }
  Transform {
   translate {{parent.Dot1.width} 0}
   center {1 0.5}
   name Transform2
   xpos 158
   ypos 121
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop5
   xpos 158
   ypos 167
  }
push $N5f6f6400
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop6
   xpos 0
   ypos 66
  }
  Crop {
   box {0 0 {parent.Dot1.width} 1}
   name Crop7
   xpos 0
   ypos 92
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop8
   xpos 0
   ypos 164
  }
  Merge2 {
   inputs 2
   also_merge all
   name Merge1
   xpos 0
   ypos 262
   disable {{"\[exists parent.input1] ? 0:1"}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input1] ? 0:1"}}
   name Switch2
   xpos 0
   ypos 332
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:1"}}
   name Switch1
   xpos 0
   ypos 387
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:\[exists parent.input1] ? 0:1"}}
   name Switch3
   xpos 0
   ypos 456
  }
  Dot {
   name out_dot
   xpos 36
   ypos 518
  }
  Output {
   name Output1
   xpos 2
   ypos 661
  }
 end_group
 Output {
  name Output1
  xpos 1183
  ypos 1002
 }
end_group
Group {
 inputs 2
 name sdf_primitive8
 onCreate "__import__('sdf.primitive', fromlist='SDFPrimitive').SDFPrimitive().handle_node_created()"
 knobChanged "__import__('sdf.primitive', fromlist='SDFPrimitive').SDFPrimitive().handle_knob_changed()"
 tile_color 0xffffffff
 label "rectangular prism"
 xpos -40
 ypos -113
 addUserKnob {20 User l "SDF Primitive"}
 addUserKnob {4 shape t "The shape of the object." M {sphere ellipsoid "cut sphere" "hollow sphere" "death star" "solid angle" "rectangular prism" "rectangular prism frame" rhombus "triangular prism" cylinder "infinite cylinder" plane capsule cone "infinite cone" "capped cone" "rounded cone" torus "capped torus" link "hexagonal prism" octahedron mandelbulb mandelbox ""}}
 shape "rectangular prism"
 addUserKnob {7 dimension_x l width t "The width (x) of the prism." R 0 10}
 dimension_x {{curve x1 0.7 x63 0.9}}
 addUserKnob {7 dimension_y l height t "The height (y) of the prism." R 0 10}
 dimension_y 1
 addUserKnob {7 dimension_z l depth t "The depth (z) of the prism." R 0 10}
 dimension_z 1.3
 addUserKnob {7 dimension_w l "orbital trap blend strength" t "Transition between orbital trap based colouring and the colour provided by the 'colour' knob." +HIDDEN}
 dimension_w 1
 addUserKnob {7 wall_thickness l "wall thickness" t "The thickness of the walls of the shape, if the shape is hollow." +DISABLED}
 wall_thickness 0.01
 addUserKnob {6 hollow t "If enabled, the object will be hollow, with a thickness of 'wall thickness'." -STARTLINE}
 addUserKnob {7 edge_radius l "edge radius" t "This parameter increases the hit tolerance by the specified amount for this specific object, having the effect of rounding off the edges."}
 addUserKnob {6 mirror_x l "mirror x" t "Mirror the shape in the yz-plane." +STARTLINE}
 addUserKnob {6 mirror_y l "mirror y" t "Mirror the shape in the xz-plane." -STARTLINE}
 addUserKnob {6 mirror_z l "mirror z" t "Mirror the shape in the xy-plane." -STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {18 colour t "The diffuse colour of the shape."}
 colour {1 1 1}
 addUserKnob {6 colour_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {7 reflection t "The amount of light that is reflected off the shape's surface. This plus 'transmission' should be less than or equal to one."}
 addUserKnob {7 transmission t "The amount of light that is transmitted through the shape's surface. This plus 'reflection' should be less than or equal to one."}
 addUserKnob {7 refractive_index l "refractive index" t "The index of refraction of the object." R 1 4}
 refractive_index 1.33
 addUserKnob {7 roughness t "The object's surface will scatter the light more the higher this value is. Increase the 'pixel subdivisions' to make it look less aliased."}
 addUserKnob {7 emission t "The amount of light emitted by the object. Increase the 'hdri lighting samples' to give it less noise. This is more of a placeholder for when the path marched version is released :)"}
 addUserKnob {26 div0 l "" +STARTLINE}
 addUserKnob {13 translate t "The translation of the object in its local coordinate space."}
 translate {0 0.8 0}
 addUserKnob {13 rotate t "The rotation of the object in its local coordinate space."}
 rotate {0 {"30 * sin(.2*frame)"} 0}
 addUserKnob {13 elongation t "The elongation of the object along the respective axes." +DISABLED}
 elongation {0.1 0 0}
 addUserKnob {6 elongate t "Enable the elongation of the object." -STARTLINE}
 addUserKnob {7 uniform_scale l "uniform scale" t "The scale of the object in its local coordinate space, along all axes." R 0 10}
 uniform_scale 1
 addUserKnob {26 div1 l "" +STARTLINE}
 addUserKnob {4 repetition t "Repeat objects in the scene with no extra memory consumption. Note that if the repeated objects overlap some strange things can occur." -STARTLINE M {none finite infinite "" ""}}
 addUserKnob {13 repetition_params l spacing t "The spacing along each positive axis to repeat the objects." +HIDDEN}
 repetition_params {1.1 1.1 100}
 addUserKnob {7 repetition_spacing l spacing t "The spacing between the objects." +HIDDEN R 0 10}
 repetition_spacing 1.1
 addUserKnob {26 ""}
 addUserKnob {4 blend_type l "blend type" t "The type of interaction this object will have with its children.\n    Union: All objects will appear as normal.\n    Subtraction: All children of this object will be subtracted from this object, leaving holes.\n    Intersection: Only the region where this object and its children overlap will remain.\n    Smooth Union: All children will smoothly blend together with this object according to the 'blend strength'.\n    Smooth Subtraction: All children of this object will be subtracted from this object, leaving holes that are smoothed according to the 'blend strength'.\n    Smooth Intersection: Only the region where this object and its children overlap will remain, and the remaining regions will be smoothed according to the 'blend strength'." M {union subtraction intersection "smooth union" "smooth subtraction" "smooth intersection"}}
 blend_type "smooth union"
 addUserKnob {7 blend_strength l "blend strength" t "The amount to blend between this and its child objects if one of the 'Smooth' blend types are selected."}
 blend_strength 0.1
 addUserKnob {6 is_bound l "is bound" t "If enabled, this object will act as a bounding volume for all its children. This means that until a ray hits the bounding volume, none of the child object's signed distance fields will be computed. This can vastly improve performance, especially when many complex objects are far from the camera." +STARTLINE}
 is_bound true
 addUserKnob {26 ""}
 addUserKnob {26 info l "" +STARTLINE T "v1.0.0 - (c) Owen Bulka - 2022"}
}
 Input {
  inputs 0
  name siblings
  xpos 1484
  ypos 476
 }
 Dot {
  name Dot2
  xpos 1518
  ypos 904
 }
 Input {
  inputs 0
  name children
  xpos 1357
  ypos 475
  number 1
 }
 Dot {
  name Dot1
  xpos 1391
  ypos 826
 }
 Constant {
  inputs 0
  channels sdf_position_scale
  color {{parent.translate.x} {parent.translate.y} {parent.translate.z} {parent.uniform_scale}}
  format "1 1 0 0 1 1 1 1x1"
  name position_scale
  xpos 280
  ypos 455
 }
 Dot {
  name Dot17
  xpos 314
  ypos 647
 }
 Constant {
  inputs 0
  channels sdf_rotation_wall_thickness
  color {{"parent.rotate.x * pi / 180"} {"parent.rotate.y * pi / 180"} {"parent.rotate.z * pi / 180"} {parent.wall_thickness}}
  format "1 1 0 0 1 1 1 1x1"
  name rotation
  xpos 403
  ypos 457
 }
 Copy {
  inputs 2
  channels all
  name Copy1
  xpos 403
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_dimensions
  color {{parent.dimension_x} {parent.dimension_y} {parent.dimension_z} {parent.dimension_w}}
  format "1 1 0 0 1 1 1 1x1"
  name dimensions
  xpos 540
  ypos 460
 }
 Copy {
  inputs 2
  channels all
  name Copy2
  xpos 540
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_colour
  color {{parent.colour.r} {parent.colour.g} {parent.colour.b} {parent.refractive_index}}
  format "1 1 0 0 1 1 1 1x1"
  name colour
  xpos 669
  ypos 459
 }
 Copy {
  inputs 2
  channels all
  name Copy3
  xpos 669
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape
  color {{parent.shape} {"parent.repetition | (parent.elongate ? 4 : 0) | (parent.mirror_x ? 8 : 0) | (parent.mirror_y ? 16 : 0) | (parent.mirror_z ? 32 : 0) | (parent.hollow ? 64 : 0) | (parent.blend_type > 0 ? (1 << (parent.blend_type + 6)) : 0) | (parent.is_bound ? 4096 : 0)"} {"parent.sdf_merge.disable ? 0 : parent.sdf_merge.input1.width"} {parent.blend_strength}}
  format "1 1 0 0 1 1 1 1x1"
  name shape
  xpos 806
  ypos 462
 }
 Copy {
  inputs 2
  channels all
  name Copy4
  xpos 806
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_surface
  color {{parent.reflection} {parent.transmission} {parent.emission} {parent.roughness}}
  format "1 1 0 0 1 1 1 1x1"
  name surface
  xpos 935
  ypos 460
 }
 Copy {
  inputs 2
  channels all
  name Copy5
  xpos 936
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape_mods_0
  color {{parent.repetition_params.x} {parent.repetition_params.y} {parent.repetition_params.z} {parent.repetition_spacing}}
  format "1 1 0 0 1 1 1 1x1"
  name shape_mods
  xpos 1056
  ypos 463
 }
 Copy {
  inputs 2
  channels all
  name Copy6
  xpos 1056
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape_mods_1
  color {{parent.elongation.x} {parent.elongation.y} {parent.elongation.z} {parent.edge_radius}}
  format "1 1 0 0 1 1 1 1x1"
  name shape_mods1
  xpos 1183
  ypos 465
 }
 Copy {
  inputs 2
  channels all
  name Copy7
  xpos 1183
  ypos 726
 }
 Group {
  inputs 2
  name sdf_merge
  xpos 1183
  ypos 822
  disable {{"!(\[exists parent.input1] && !input1.parent.input1.disable)"}}
  addUserKnob {20 User}
  addUserKnob {26 warning l Warning: T "Only merge lights with lights, and primitives with primitives"}
 }
  Reformat {
   inputs 0
   type "to box"
   box_width 1
   box_height 1
   box_fixed true
   name Reformat1
   xpos -119
   ypos 440
  }
  Input {
   inputs 0
   name Input2
   xpos 158
   ypos -28
   number 1
  }
  Dot {
   name Dot2
   xpos 192
   ypos -2
  }
set N5f638100 [stack 0]
  Dot {
   name Dot3
   xpos 329
   ypos -2
  }
  Dot {
   name Dot4
   xpos 329
   ypos 391
  }
  Input {
   inputs 0
   name Input1
   xpos 0
   ypos -32
  }
  Dot {
   name Dot1
   xpos 34
   ypos -6
  }
set N5f60e400 [stack 0]
  Dot {
   name Dot6
   xpos -98
   ypos -6
  }
  Dot {
   name Dot5
   xpos -98
   ypos 336
  }
push $N5f638100
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop3
   xpos 158
   ypos 69
  }
  Crop {
   box {0 0 {parent.Dot2.width} 1}
   name Crop4
   xpos 158
   ypos 95
  }
  Transform {
   translate {{parent.Dot1.width} 0}
   center {1 0.5}
   name Transform2
   xpos 158
   ypos 121
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop5
   xpos 158
   ypos 167
  }
push $N5f60e400
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop6
   xpos 0
   ypos 66
  }
  Crop {
   box {0 0 {parent.Dot1.width} 1}
   name Crop7
   xpos 0
   ypos 92
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop8
   xpos 0
   ypos 164
  }
  Merge2 {
   inputs 2
   also_merge all
   name Merge1
   xpos 0
   ypos 262
   disable {{"\[exists parent.input1] ? 0:1"}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input1] ? 0:1"}}
   name Switch2
   xpos 0
   ypos 332
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:1"}}
   name Switch1
   xpos 0
   ypos 387
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:\[exists parent.input1] ? 0:1"}}
   name Switch3
   xpos 0
   ypos 456
  }
  Dot {
   name out_dot
   xpos 36
   ypos 518
  }
  Output {
   name Output1
   xpos 2
   ypos 661
  }
 end_group
 Group {
  inputs 2
  name sdf_merge1
  xpos 1183
  ypos 900
  disable {{"!(\[exists parent.input0] && !(parent.input0.disable && !\[exists parent.input0.input0]))"}}
  addUserKnob {20 User}
  addUserKnob {26 warning l Warning: T "Only merge lights with lights, and primitives with primitives"}
 }
  Reformat {
   inputs 0
   type "to box"
   box_width 1
   box_height 1
   box_fixed true
   name Reformat1
   xpos -119
   ypos 440
  }
  Input {
   inputs 0
   name Input2
   xpos 158
   ypos -28
   number 1
  }
  Dot {
   name Dot2
   xpos 192
   ypos -2
  }
set N5f7b1d00 [stack 0]
  Dot {
   name Dot3
   xpos 329
   ypos -2
  }
  Dot {
   name Dot4
   xpos 329
   ypos 391
  }
  Input {
   inputs 0
   name Input1
   xpos 0
   ypos -32
  }
  Dot {
   name Dot1
   xpos 34
   ypos -6
  }
set N5f7b0100 [stack 0]
  Dot {
   name Dot6
   xpos -98
   ypos -6
  }
  Dot {
   name Dot5
   xpos -98
   ypos 336
  }
push $N5f7b1d00
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop3
   xpos 158
   ypos 69
  }
  Crop {
   box {0 0 {parent.Dot2.width} 1}
   name Crop4
   xpos 158
   ypos 95
  }
  Transform {
   translate {{parent.Dot1.width} 0}
   center {1 0.5}
   name Transform2
   xpos 158
   ypos 121
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop5
   xpos 158
   ypos 167
  }
push $N5f7b0100
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop6
   xpos 0
   ypos 66
  }
  Crop {
   box {0 0 {parent.Dot1.width} 1}
   name Crop7
   xpos 0
   ypos 92
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop8
   xpos 0
   ypos 164
  }
  Merge2 {
   inputs 2
   also_merge all
   name Merge1
   xpos 0
   ypos 262
   disable {{"\[exists parent.input1] ? 0:1"}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input1] ? 0:1"}}
   name Switch2
   xpos 0
   ypos 332
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:1"}}
   name Switch1
   xpos 0
   ypos 387
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:\[exists parent.input1] ? 0:1"}}
   name Switch3
   xpos 0
   ypos 456
  }
  Dot {
   name out_dot
   xpos 36
   ypos 518
  }
  Output {
   name Output1
   xpos 2
   ypos 661
  }
 end_group
 Output {
  name Output1
  xpos 1183
  ypos 1002
 }
end_group
push 0
Group {
 inputs 2
 name sdf_primitive2
 onCreate "__import__('sdf.primitive', fromlist='SDFPrimitive').SDFPrimitive().handle_node_created()"
 knobChanged "__import__('sdf.primitive', fromlist='SDFPrimitive').SDFPrimitive().handle_knob_changed()"
 tile_color 0xffffffff
 label sphere
 xpos -40
 ypos -2
 addUserKnob {20 User l "SDF Primitive"}
 addUserKnob {4 shape t "The shape of the object." M {sphere ellipsoid "cut sphere" "hollow sphere" "death star" "solid angle" "rectangular prism" "rectangular prism frame" rhombus "triangular prism" cylinder "infinite cylinder" plane capsule cone "infinite cone" "capped cone" "rounded cone" torus "capped torus" link "hexagonal prism" octahedron mandelbulb mandelbox ""}}
 addUserKnob {7 dimension_x l radius t "The radius of the sphere." R 0 10}
 dimension_x 0.4
 addUserKnob {7 dimension_y l iterations t "The number of iterations to compute, the higher this is the slower it will be to compute, but the deeper the fractal will have detail." +HIDDEN R 1 30}
 dimension_y 10
 addUserKnob {7 dimension_z l "max square radius" t "When the square radius has reached this length, stop iterating." +HIDDEN R 1 9}
 dimension_z 4
 addUserKnob {7 dimension_w l "orbital trap blend strength" t "Transition between orbital trap based colouring and the colour provided by the 'colour' knob." +HIDDEN}
 dimension_w 1
 addUserKnob {7 wall_thickness l "wall thickness" t "The thickness of the walls of the shape, if the shape is hollow." +DISABLED}
 wall_thickness 0.01
 addUserKnob {6 hollow t "If enabled, the object will be hollow, with a thickness of 'wall thickness'." -STARTLINE}
 addUserKnob {7 edge_radius l "edge radius" t "This parameter increases the hit tolerance by the specified amount for this specific object, having the effect of rounding off the edges."}
 addUserKnob {6 mirror_x l "mirror x" t "Mirror the shape in the yz-plane." +STARTLINE}
 addUserKnob {6 mirror_y l "mirror y" t "Mirror the shape in the xz-plane." -STARTLINE}
 addUserKnob {6 mirror_z l "mirror z" t "Mirror the shape in the xy-plane." -STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {18 colour t "The diffuse colour of the shape."}
 colour {1 1 1}
 addUserKnob {6 colour_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {7 reflection t "The amount of light that is reflected off the shape's surface. This plus 'transmission' should be less than or equal to one."}
 addUserKnob {7 transmission t "The amount of light that is transmitted through the shape's surface. This plus 'reflection' should be less than or equal to one."}
 addUserKnob {7 refractive_index l "refractive index" t "The index of refraction of the object." R 1 4}
 refractive_index 1.33
 addUserKnob {7 roughness t "The object's surface will scatter the light more the higher this value is. Increase the 'pixel subdivisions' to make it look less aliased."}
 addUserKnob {7 emission t "The amount of light emitted by the object. Increase the 'hdri lighting samples' to give it less noise. This is more of a placeholder for when the path marched version is released :)"}
 addUserKnob {26 div0 l "" +STARTLINE}
 addUserKnob {13 translate t "The translation of the object in its local coordinate space."}
 translate {0 0.7 0}
 addUserKnob {13 rotate t "The rotation of the object in its local coordinate space."}
 addUserKnob {13 elongation t "The elongation of the object along the respective axes." +DISABLED}
 elongation {0.1 0 0}
 addUserKnob {6 elongate t "Enable the elongation of the object." -STARTLINE}
 addUserKnob {7 uniform_scale l "uniform scale" t "The scale of the object in its local coordinate space, along all axes." R 0 10}
 uniform_scale 1
 addUserKnob {26 div1 l "" +STARTLINE}
 addUserKnob {4 repetition t "Repeat objects in the scene with no extra memory consumption. Note that if the repeated objects overlap some strange things can occur." -STARTLINE M {none finite infinite "" ""}}
 addUserKnob {13 repetition_params l spacing t "The spacing along each positive axis to repeat the objects." +HIDDEN}
 repetition_params {1.1 1.1 100}
 addUserKnob {7 repetition_spacing l spacing t "The spacing between the objects." +HIDDEN R 0 10}
 repetition_spacing 1.1
 addUserKnob {26 ""}
 addUserKnob {4 blend_type l "blend type" t "The type of interaction this object will have with its children.\n    Union: All objects will appear as normal.\n    Subtraction: All children of this object will be subtracted from this object, leaving holes.\n    Intersection: Only the region where this object and its children overlap will remain.\n    Smooth Union: All children will smoothly blend together with this object according to the 'blend strength'.\n    Smooth Subtraction: All children of this object will be subtracted from this object, leaving holes that are smoothed according to the 'blend strength'.\n    Smooth Intersection: Only the region where this object and its children overlap will remain, and the remaining regions will be smoothed according to the 'blend strength'." M {union subtraction intersection "smooth union" "smooth subtraction" "smooth intersection"}}
 blend_type "smooth union"
 addUserKnob {7 blend_strength l "blend strength" t "The amount to blend between this and its child objects if one of the 'Smooth' blend types are selected."}
 blend_strength 0.06
 addUserKnob {6 is_bound l "is bound" t "If enabled, this object will act as a bounding volume for all its children. This means that until a ray hits the bounding volume, none of the child object's signed distance fields will be computed. This can vastly improve performance, especially when many complex objects are far from the camera." +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {26 info l "" +STARTLINE T "v1.0.0 - (c) Owen Bulka - 2022"}
}
 Input {
  inputs 0
  name siblings
  xpos 1484
  ypos 476
 }
 Dot {
  name Dot2
  xpos 1518
  ypos 904
 }
 Input {
  inputs 0
  name children
  xpos 1357
  ypos 475
  number 1
 }
 Dot {
  name Dot1
  xpos 1391
  ypos 826
 }
 Constant {
  inputs 0
  channels sdf_position_scale
  color {{parent.translate.x} {parent.translate.y} {parent.translate.z} {parent.uniform_scale}}
  format "1 1 0 0 1 1 1 1x1"
  name position_scale
  xpos 280
  ypos 455
 }
 Dot {
  name Dot17
  xpos 314
  ypos 647
 }
 Constant {
  inputs 0
  channels sdf_rotation_wall_thickness
  color {{"parent.rotate.x * pi / 180"} {"parent.rotate.y * pi / 180"} {"parent.rotate.z * pi / 180"} {parent.wall_thickness}}
  format "1 1 0 0 1 1 1 1x1"
  name rotation
  xpos 403
  ypos 457
 }
 Copy {
  inputs 2
  channels all
  name Copy1
  xpos 403
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_dimensions
  color {{parent.dimension_x} {parent.dimension_y} {parent.dimension_z} {parent.dimension_w}}
  format "1 1 0 0 1 1 1 1x1"
  name dimensions
  xpos 540
  ypos 460
 }
 Copy {
  inputs 2
  channels all
  name Copy2
  xpos 540
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_colour
  color {{parent.colour.r} {parent.colour.g} {parent.colour.b} {parent.refractive_index}}
  format "1 1 0 0 1 1 1 1x1"
  name colour
  xpos 669
  ypos 459
 }
 Copy {
  inputs 2
  channels all
  name Copy3
  xpos 669
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape
  color {{parent.shape} {"parent.repetition | (parent.elongate ? 4 : 0) | (parent.mirror_x ? 8 : 0) | (parent.mirror_y ? 16 : 0) | (parent.mirror_z ? 32 : 0) | (parent.hollow ? 64 : 0) | (parent.blend_type > 0 ? (1 << (parent.blend_type + 6)) : 0) | (parent.is_bound ? 4096 : 0)"} {"parent.sdf_merge.disable ? 0 : parent.sdf_merge.input1.width"} {parent.blend_strength}}
  format "1 1 0 0 1 1 1 1x1"
  name shape
  xpos 806
  ypos 462
 }
 Copy {
  inputs 2
  channels all
  name Copy4
  xpos 806
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_surface
  color {{parent.reflection} {parent.transmission} {parent.emission} {parent.roughness}}
  format "1 1 0 0 1 1 1 1x1"
  name surface
  xpos 935
  ypos 460
 }
 Copy {
  inputs 2
  channels all
  name Copy5
  xpos 936
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape_mods_0
  color {{parent.repetition_params.x} {parent.repetition_params.y} {parent.repetition_params.z} {parent.repetition_spacing}}
  format "1 1 0 0 1 1 1 1x1"
  name shape_mods
  xpos 1056
  ypos 463
 }
 Copy {
  inputs 2
  channels all
  name Copy6
  xpos 1056
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape_mods_1
  color {{parent.elongation.x} {parent.elongation.y} {parent.elongation.z} {parent.edge_radius}}
  format "1 1 0 0 1 1 1 1x1"
  name shape_mods1
  xpos 1183
  ypos 465
 }
 Copy {
  inputs 2
  channels all
  name Copy7
  xpos 1183
  ypos 726
 }
 Group {
  inputs 2
  name sdf_merge
  xpos 1183
  ypos 822
  disable {{"!(\[exists parent.input1] && !input1.parent.input1.disable)"}}
  addUserKnob {20 User}
  addUserKnob {26 warning l Warning: T "Only merge lights with lights, and primitives with primitives"}
 }
  Reformat {
   inputs 0
   type "to box"
   box_width 1
   box_height 1
   box_fixed true
   name Reformat1
   xpos -119
   ypos 440
  }
  Input {
   inputs 0
   name Input2
   xpos 158
   ypos -28
   number 1
  }
  Dot {
   name Dot2
   xpos 192
   ypos -2
  }
set N5f4cdd00 [stack 0]
  Dot {
   name Dot3
   xpos 329
   ypos -2
  }
  Dot {
   name Dot4
   xpos 329
   ypos 391
  }
  Input {
   inputs 0
   name Input1
   xpos 0
   ypos -32
  }
  Dot {
   name Dot1
   xpos 34
   ypos -6
  }
set N5f4cc100 [stack 0]
  Dot {
   name Dot6
   xpos -98
   ypos -6
  }
  Dot {
   name Dot5
   xpos -98
   ypos 336
  }
push $N5f4cdd00
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop3
   xpos 158
   ypos 69
  }
  Crop {
   box {0 0 {parent.Dot2.width} 1}
   name Crop4
   xpos 158
   ypos 95
  }
  Transform {
   translate {{parent.Dot1.width} 0}
   center {1 0.5}
   name Transform2
   xpos 158
   ypos 121
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop5
   xpos 158
   ypos 167
  }
push $N5f4cc100
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop6
   xpos 0
   ypos 66
  }
  Crop {
   box {0 0 {parent.Dot1.width} 1}
   name Crop7
   xpos 0
   ypos 92
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop8
   xpos 0
   ypos 164
  }
  Merge2 {
   inputs 2
   also_merge all
   name Merge1
   xpos 0
   ypos 262
   disable {{"\[exists parent.input1] ? 0:1"}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input1] ? 0:1"}}
   name Switch2
   xpos 0
   ypos 332
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:1"}}
   name Switch1
   xpos 0
   ypos 387
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:\[exists parent.input1] ? 0:1"}}
   name Switch3
   xpos 0
   ypos 456
  }
  Dot {
   name out_dot
   xpos 36
   ypos 518
  }
  Output {
   name Output1
   xpos 2
   ypos 661
  }
 end_group
 Group {
  inputs 2
  name sdf_merge1
  xpos 1183
  ypos 900
  disable {{"!(\[exists parent.input0] && !(parent.input0.disable && !\[exists parent.input0.input0]))"}}
  addUserKnob {20 User}
  addUserKnob {26 warning l Warning: T "Only merge lights with lights, and primitives with primitives"}
 }
  Reformat {
   inputs 0
   type "to box"
   box_width 1
   box_height 1
   box_fixed true
   name Reformat1
   xpos -119
   ypos 440
  }
  Input {
   inputs 0
   name Input2
   xpos 158
   ypos -28
   number 1
  }
  Dot {
   name Dot2
   xpos 192
   ypos -2
  }
set N5f44f900 [stack 0]
  Dot {
   name Dot3
   xpos 329
   ypos -2
  }
  Dot {
   name Dot4
   xpos 329
   ypos 391
  }
  Input {
   inputs 0
   name Input1
   xpos 0
   ypos -32
  }
  Dot {
   name Dot1
   xpos 34
   ypos -6
  }
set N5f44dd00 [stack 0]
  Dot {
   name Dot6
   xpos -98
   ypos -6
  }
  Dot {
   name Dot5
   xpos -98
   ypos 336
  }
push $N5f44f900
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop3
   xpos 158
   ypos 69
  }
  Crop {
   box {0 0 {parent.Dot2.width} 1}
   name Crop4
   xpos 158
   ypos 95
  }
  Transform {
   translate {{parent.Dot1.width} 0}
   center {1 0.5}
   name Transform2
   xpos 158
   ypos 121
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop5
   xpos 158
   ypos 167
  }
push $N5f44dd00
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop6
   xpos 0
   ypos 66
  }
  Crop {
   box {0 0 {parent.Dot1.width} 1}
   name Crop7
   xpos 0
   ypos 92
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop8
   xpos 0
   ypos 164
  }
  Merge2 {
   inputs 2
   also_merge all
   name Merge1
   xpos 0
   ypos 262
   disable {{"\[exists parent.input1] ? 0:1"}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input1] ? 0:1"}}
   name Switch2
   xpos 0
   ypos 332
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:1"}}
   name Switch1
   xpos 0
   ypos 387
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:\[exists parent.input1] ? 0:1"}}
   name Switch3
   xpos 0
   ypos 456
  }
  Dot {
   name out_dot
   xpos 36
   ypos 518
  }
  Output {
   name Output1
   xpos 2
   ypos 661
  }
 end_group
 Output {
  name Output1
  xpos 1183
  ypos 1002
 }
end_group
push 0
Group {
 inputs 2
 name sdf_primitive
 onCreate "__import__('sdf.primitive', fromlist='SDFPrimitive').SDFPrimitive().handle_node_created()"
 knobChanged "__import__('sdf.primitive', fromlist='SDFPrimitive').SDFPrimitive().handle_knob_changed()"
 tile_color 0xffffffff
 label sphere
 xpos -40
 ypos 127
 addUserKnob {20 User l "SDF Primitive"}
 addUserKnob {4 shape t "The shape of the object." M {sphere ellipsoid "cut sphere" "hollow sphere" "death star" "solid angle" "rectangular prism" "rectangular prism frame" rhombus "triangular prism" cylinder "infinite cylinder" plane capsule cone "infinite cone" "capped cone" "rounded cone" torus "capped torus" link "hexagonal prism" octahedron mandelbulb mandelbox ""}}
 addUserKnob {7 dimension_x l radius t "The radius of the sphere." R 0 10}
 dimension_x 0.5
 addUserKnob {7 dimension_y l iterations t "The number of iterations to compute, the higher this is the slower it will be to compute, but the deeper the fractal will have detail." +HIDDEN R 1 30}
 dimension_y 10
 addUserKnob {7 dimension_z l "max square radius" t "When the square radius has reached this length, stop iterating." +HIDDEN R 1 9}
 dimension_z 4
 addUserKnob {7 dimension_w l "orbital trap blend strength" t "Transition between orbital trap based colouring and the colour provided by the 'colour' knob." +HIDDEN}
 dimension_w 1
 addUserKnob {7 wall_thickness l "wall thickness" t "The thickness of the walls of the shape, if the shape is hollow." +DISABLED}
 wall_thickness 0.01
 addUserKnob {6 hollow t "If enabled, the object will be hollow, with a thickness of 'wall thickness'." -STARTLINE}
 addUserKnob {7 edge_radius l "edge radius" t "This parameter increases the hit tolerance by the specified amount for this specific object, having the effect of rounding off the edges."}
 addUserKnob {6 mirror_x l "mirror x" t "Mirror the shape in the yz-plane." +STARTLINE}
 addUserKnob {6 mirror_y l "mirror y" t "Mirror the shape in the xz-plane." -STARTLINE}
 addUserKnob {6 mirror_z l "mirror z" t "Mirror the shape in the xy-plane." -STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {18 colour t "The diffuse colour of the shape."}
 colour {1 1 1}
 addUserKnob {6 colour_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {7 reflection t "The amount of light that is reflected off the shape's surface. This plus 'transmission' should be less than or equal to one."}
 reflection 0.01
 addUserKnob {7 transmission t "The amount of light that is transmitted through the shape's surface. This plus 'reflection' should be less than or equal to one."}
 addUserKnob {7 refractive_index l "refractive index" t "The index of refraction of the object." R 1 4}
 refractive_index 1.33
 addUserKnob {7 roughness t "The object's surface will scatter the light more the higher this value is. Increase the 'pixel subdivisions' to make it look less aliased."}
 addUserKnob {7 emission t "The amount of light emitted by the object. Increase the 'hdri lighting samples' to give it less noise. This is more of a placeholder for when the path marched version is released :)"}
 addUserKnob {26 div0 l "" +STARTLINE}
 addUserKnob {13 translate t "The translation of the object in its local coordinate space."}
 translate {0 {.4-frame/70} 0}
 addUserKnob {13 rotate t "The rotation of the object in its local coordinate space."}
 addUserKnob {13 elongation t "The elongation of the object along the respective axes." +DISABLED}
 elongation {0.1 0 0}
 addUserKnob {6 elongate t "Enable the elongation of the object." -STARTLINE}
 addUserKnob {7 uniform_scale l "uniform scale" t "The scale of the object in its local coordinate space, along all axes." R 0 10}
 uniform_scale 1
 addUserKnob {26 div1 l "" +STARTLINE}
 addUserKnob {4 repetition t "Repeat objects in the scene with no extra memory consumption. Note that if the repeated objects overlap some strange things can occur." -STARTLINE M {none finite infinite "" ""}}
 addUserKnob {13 repetition_params l spacing t "The spacing along each positive axis to repeat the objects." +HIDDEN}
 repetition_params {1.1 1.1 100}
 addUserKnob {7 repetition_spacing l spacing t "The spacing between the objects." +HIDDEN R 0 10}
 repetition_spacing 1.1
 addUserKnob {26 ""}
 addUserKnob {4 blend_type l "blend type" t "The type of interaction this object will have with its children.\n    Union: All objects will appear as normal.\n    Subtraction: This object will be subtracted from all of its children, leaving holes.\n    Intersection: Only the region where this object and its children overlap will remain.\n    Smooth Union: All children will smoothly blend together with this object according to the 'blend strength'.\n    Smooth Subtraction:This object will be subtracted from all of its children,  leaving holes that are smoothed according to the 'blend strength'.\n    Smooth Intersection: Only the region where this object and its children overlap will remain, and the remaining regions will be smoothed according to the 'blend strength'." M {union subtraction intersection "smooth union" "smooth subtraction" "smooth intersection" "" ""}}
 blend_type "smooth union"
 addUserKnob {7 blend_strength l "blend strength" t "The amount to blend between this and its child objects if one of the 'Smooth' blend types are selected."}
 blend_strength 0.125
 addUserKnob {6 is_bound l "is bound" t "If enabled, this object will act as a bounding volume for all its children. This means that until a ray hits the bounding volume, none of the child object's signed distance fields will be computed. This can vastly improve performance, especially when many complex objects are far from the camera. This option does not always play well with lighting effects that depend on the number of iterations in the computation such as 'ambient occlusion' and 'softened shadows' due to the variation near the surface of the bounding object." +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {26 info l "" +STARTLINE T "v1.0.0 - (c) Owen Bulka - 2022"}
}
 Input {
  inputs 0
  name siblings
  xpos 1484
  ypos 476
 }
 Dot {
  name Dot2
  xpos 1518
  ypos 904
 }
 Input {
  inputs 0
  name children
  xpos 1357
  ypos 475
  number 1
 }
 Dot {
  name Dot1
  xpos 1391
  ypos 826
 }
 Constant {
  inputs 0
  channels sdf_position_scale
  color {{parent.translate.x} {parent.translate.y} {parent.translate.z} {parent.uniform_scale}}
  format "1 1 0 0 1 1 1 1x1"
  name position_scale
  xpos 280
  ypos 455
 }
 Dot {
  name Dot17
  xpos 314
  ypos 647
 }
 Constant {
  inputs 0
  channels sdf_rotation_wall_thickness
  color {{"parent.rotate.x * pi / 180"} {"parent.rotate.y * pi / 180"} {"parent.rotate.z * pi / 180"} {parent.wall_thickness}}
  format "1 1 0 0 1 1 1 1x1"
  name rotation
  xpos 403
  ypos 457
 }
 Copy {
  inputs 2
  channels all
  name Copy1
  xpos 403
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_dimensions
  color {{parent.dimension_x} {parent.dimension_y} {parent.dimension_z} {parent.dimension_w}}
  format "1 1 0 0 1 1 1 1x1"
  name dimensions
  xpos 540
  ypos 460
 }
 Copy {
  inputs 2
  channels all
  name Copy2
  xpos 540
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_colour
  color {{parent.colour.r} {parent.colour.g} {parent.colour.b} {parent.refractive_index}}
  format "1 1 0 0 1 1 1 1x1"
  name colour
  xpos 669
  ypos 459
 }
 Copy {
  inputs 2
  channels all
  name Copy3
  xpos 669
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape
  color {{parent.shape} {"parent.repetition | (parent.elongate ? 4 : 0) | (parent.mirror_x ? 8 : 0) | (parent.mirror_y ? 16 : 0) | (parent.mirror_z ? 32 : 0) | (parent.hollow ? 64 : 0) | (parent.blend_type > 0 ? (1 << (parent.blend_type + 6)) : 0) | (parent.is_bound ? 4096 : 0)"} {"parent.sdf_merge.disable ? 0 : parent.sdf_merge.input1.width"} {parent.blend_strength}}
  format "1 1 0 0 1 1 1 1x1"
  name shape
  xpos 806
  ypos 462
 }
 Copy {
  inputs 2
  channels all
  name Copy4
  xpos 806
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_surface
  color {{parent.reflection} {parent.transmission} {parent.emission} {parent.roughness}}
  format "1 1 0 0 1 1 1 1x1"
  name surface
  xpos 935
  ypos 460
 }
 Copy {
  inputs 2
  channels all
  name Copy5
  xpos 936
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape_mods_0
  color {{parent.repetition_params.x} {parent.repetition_params.y} {parent.repetition_params.z} {parent.repetition_spacing}}
  format "1 1 0 0 1 1 1 1x1"
  name shape_mods
  xpos 1056
  ypos 463
 }
 Copy {
  inputs 2
  channels all
  name Copy6
  xpos 1056
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape_mods_1
  color {{parent.elongation.x} {parent.elongation.y} {parent.elongation.z} {parent.edge_radius}}
  format "1 1 0 0 1 1 1 1x1"
  name shape_mods1
  xpos 1183
  ypos 465
 }
 Copy {
  inputs 2
  channels all
  name Copy7
  xpos 1183
  ypos 726
 }
 Group {
  inputs 2
  name sdf_merge
  xpos 1183
  ypos 822
  disable {{"!(\[exists parent.input1] && !input1.parent.input1.disable)"}}
  addUserKnob {20 User}
  addUserKnob {26 warning l Warning: T "Only merge lights with lights, and primitives with primitives"}
 }
  Reformat {
   inputs 0
   type "to box"
   box_width 1
   box_height 1
   box_fixed true
   name Reformat1
   xpos -119
   ypos 440
  }
  Input {
   inputs 0
   name Input2
   xpos 158
   ypos -28
   number 1
  }
  Dot {
   name Dot2
   xpos 192
   ypos -2
  }
set N5f157900 [stack 0]
  Dot {
   name Dot3
   xpos 329
   ypos -2
  }
  Dot {
   name Dot4
   xpos 329
   ypos 391
  }
  Input {
   inputs 0
   name Input1
   xpos 0
   ypos -32
  }
  Dot {
   name Dot1
   xpos 34
   ypos -6
  }
set N5f155d00 [stack 0]
  Dot {
   name Dot6
   xpos -98
   ypos -6
  }
  Dot {
   name Dot5
   xpos -98
   ypos 336
  }
push $N5f157900
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop3
   xpos 158
   ypos 69
  }
  Crop {
   box {0 0 {parent.Dot2.width} 1}
   name Crop4
   xpos 158
   ypos 95
  }
  Transform {
   translate {{parent.Dot1.width} 0}
   center {1 0.5}
   name Transform2
   xpos 158
   ypos 121
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop5
   xpos 158
   ypos 167
  }
push $N5f155d00
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop6
   xpos 0
   ypos 66
  }
  Crop {
   box {0 0 {parent.Dot1.width} 1}
   name Crop7
   xpos 0
   ypos 92
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop8
   xpos 0
   ypos 164
  }
  Merge2 {
   inputs 2
   also_merge all
   name Merge1
   xpos 0
   ypos 262
   disable {{"\[exists parent.input1] ? 0:1"}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input1] ? 0:1"}}
   name Switch2
   xpos 0
   ypos 332
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:1"}}
   name Switch1
   xpos 0
   ypos 387
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:\[exists parent.input1] ? 0:1"}}
   name Switch3
   xpos 0
   ypos 456
  }
  Dot {
   name out_dot
   xpos 36
   ypos 518
  }
  Output {
   name Output1
   xpos 2
   ypos 661
  }
 end_group
 Group {
  inputs 2
  name sdf_merge1
  xpos 1183
  ypos 900
  disable {{"!(\[exists parent.input0] && !(parent.input0.disable && !\[exists parent.input0.input0]))"}}
  addUserKnob {20 User}
  addUserKnob {26 warning l Warning: T "Only merge lights with lights, and primitives with primitives"}
 }
  Reformat {
   inputs 0
   type "to box"
   box_width 1
   box_height 1
   box_fixed true
   name Reformat1
   xpos -119
   ypos 440
  }
  Input {
   inputs 0
   name Input2
   xpos 158
   ypos -28
   number 1
  }
  Dot {
   name Dot2
   xpos 192
   ypos -2
  }
set N5f109600 [stack 0]
  Dot {
   name Dot3
   xpos 329
   ypos -2
  }
  Dot {
   name Dot4
   xpos 329
   ypos 391
  }
  Input {
   inputs 0
   name Input1
   xpos 0
   ypos -32
  }
  Dot {
   name Dot1
   xpos 34
   ypos -6
  }
set N5f2e3900 [stack 0]
  Dot {
   name Dot6
   xpos -98
   ypos -6
  }
  Dot {
   name Dot5
   xpos -98
   ypos 336
  }
push $N5f109600
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop3
   xpos 158
   ypos 69
  }
  Crop {
   box {0 0 {parent.Dot2.width} 1}
   name Crop4
   xpos 158
   ypos 95
  }
  Transform {
   translate {{parent.Dot1.width} 0}
   center {1 0.5}
   name Transform2
   xpos 158
   ypos 121
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop5
   xpos 158
   ypos 167
  }
push $N5f2e3900
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop6
   xpos 0
   ypos 66
  }
  Crop {
   box {0 0 {parent.Dot1.width} 1}
   name Crop7
   xpos 0
   ypos 92
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop8
   xpos 0
   ypos 164
  }
  Merge2 {
   inputs 2
   also_merge all
   name Merge1
   xpos 0
   ypos 262
   disable {{"\[exists parent.input1] ? 0:1"}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input1] ? 0:1"}}
   name Switch2
   xpos 0
   ypos 332
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:1"}}
   name Switch1
   xpos 0
   ypos 387
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:\[exists parent.input1] ? 0:1"}}
   name Switch3
   xpos 0
   ypos 456
  }
  Dot {
   name out_dot
   xpos 36
   ypos 518
  }
  Output {
   name Output1
   xpos 2
   ypos 661
  }
 end_group
 Output {
  name Output1
  xpos 1183
  ypos 1002
 }
end_group
push 0
Group {
 inputs 2
 name sdf_primitive6
 onCreate "__import__('sdf.primitive', fromlist='SDFPrimitive').SDFPrimitive().handle_node_created()"
 knobChanged "__import__('sdf.primitive', fromlist='SDFPrimitive').SDFPrimitive().handle_knob_changed()"
 tile_color 0xffffffff
 label plane
 xpos -40
 ypos 219
 addUserKnob {20 User l "SDF Primitive"}
 addUserKnob {4 shape t "The shape of the object." M {sphere ellipsoid "cut sphere" "hollow sphere" "death star" "solid angle" "rectangular prism" "rectangular prism frame" rhombus "triangular prism" cylinder "infinite cylinder" plane capsule cone "infinite cone" "capped cone" "rounded cone" torus "capped torus" link "hexagonal prism" octahedron mandelbulb mandelbox ""}}
 shape plane
 addUserKnob {7 dimension_x l "normal x" t "The x component of the normal direction of the plane."}
 addUserKnob {7 dimension_y l "normal y" t "The y component of the normal direction of the plane."}
 dimension_y 1
 addUserKnob {7 dimension_z l "normal z" t "The z component of the normal direction of the plane."}
 dimension_z 0.01
 addUserKnob {7 dimension_w l "orbital trap blend strength" t "Transition between orbital trap based colouring and the colour provided by the 'colour' knob." +HIDDEN}
 dimension_w 1
 addUserKnob {7 wall_thickness l "wall thickness" t "The thickness of the walls of the shape, if the shape is hollow." +DISABLED}
 wall_thickness 0.01
 addUserKnob {6 hollow t "If enabled, the object will be hollow, with a thickness of 'wall thickness'." -STARTLINE}
 addUserKnob {7 edge_radius l "edge radius" t "This parameter increases the hit tolerance by the specified amount for this specific object, having the effect of rounding off the edges."}
 addUserKnob {6 mirror_x l "mirror x" t "Mirror the shape in the yz-plane." +STARTLINE}
 addUserKnob {6 mirror_y l "mirror y" t "Mirror the shape in the xz-plane." -STARTLINE}
 addUserKnob {6 mirror_z l "mirror z" t "Mirror the shape in the xy-plane." -STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {18 colour t "The diffuse colour of the shape."}
 colour {1 1 1}
 addUserKnob {6 colour_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {7 reflection t "The amount of light that is reflected off the shape's surface. This plus 'transmission' should be less than or equal to one."}
 reflection 0.5
 addUserKnob {7 transmission t "The amount of light that is transmitted through the shape's surface. This plus 'reflection' should be less than or equal to one."}
 addUserKnob {7 refractive_index l "refractive index" t "The index of refraction of the object." R 1 4}
 refractive_index 1
 addUserKnob {7 roughness t "The object's surface will scatter the light more the higher this value is. Increase the 'pixel subdivisions' to make it look less aliased."}
 addUserKnob {7 emission t "The amount of light emitted by the object. Increase the 'hdri lighting samples' to give it less noise. This is more of a placeholder for when the path marched version is released :)"}
 addUserKnob {26 div0 l "" +STARTLINE}
 addUserKnob {13 translate t "The translation of the object in its local coordinate space."}
 translate {0 -0.35 0}
 addUserKnob {13 rotate t "The rotation of the object in its local coordinate space."}
 addUserKnob {13 elongation t "The elongation of the object along the respective axes." +DISABLED}
 elongation {0.1 0 0}
 addUserKnob {6 elongate t "Enable the elongation of the object." -STARTLINE}
 addUserKnob {7 uniform_scale l "uniform scale" t "The scale of the object in its local coordinate space, along all axes." R 0 10}
 uniform_scale 1
 addUserKnob {26 div1 l "" +STARTLINE}
 addUserKnob {4 repetition t "Repeat objects in the scene with no extra memory consumption. Note that if the repeated objects overlap some strange things can occur." -STARTLINE M {none finite infinite "" ""}}
 addUserKnob {13 repetition_params l spacing t "The spacing along each positive axis to repeat the objects." +HIDDEN}
 repetition_params {1.1 1.1 100}
 addUserKnob {7 repetition_spacing l spacing t "The spacing between the objects." +HIDDEN R 0 10}
 repetition_spacing 1.1
 addUserKnob {26 ""}
 addUserKnob {4 blend_type l "blend type" t "The type of interaction this object will have with its children.\n    Union: All objects will appear as normal.\n    Subtraction: All children of this object will be subtracted from this object, leaving holes.\n    Intersection: Only the region where this object and its children overlap will remain.\n    Smooth Union: All children will smoothly blend together with this object according to the 'blend strength'.\n    Smooth Subtraction: All children of this object will be subtracted from this object, leaving holes that are smoothed according to the 'blend strength'.\n    Smooth Intersection: Only the region where this object and its children overlap will remain, and the remaining regions will be smoothed according to the 'blend strength'." M {union subtraction intersection "smooth union" "smooth subtraction" "smooth intersection"}}
 blend_type "smooth union"
 addUserKnob {7 blend_strength l "blend strength" t "The amount to blend between this and its child objects if one of the 'Smooth' blend types are selected."}
 blend_strength {{.1+frame/50}}
 addUserKnob {6 is_bound l "is bound" t "If enabled, this object will act as a bounding volume for all its children. This means that until a ray hits the bounding volume, none of the child object's signed distance fields will be computed. This can vastly improve performance, especially when many complex objects are far from the camera." +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {26 info l "" +STARTLINE T "v1.0.0 - (c) Owen Bulka - 2022"}
}
 Input {
  inputs 0
  name siblings
  xpos 1484
  ypos 476
 }
 Dot {
  name Dot2
  xpos 1518
  ypos 904
 }
 Input {
  inputs 0
  name children
  xpos 1357
  ypos 475
  number 1
 }
 Dot {
  name Dot1
  xpos 1391
  ypos 826
 }
 Constant {
  inputs 0
  channels sdf_position_scale
  color {{parent.translate.x} {parent.translate.y} {parent.translate.z} {parent.uniform_scale}}
  format "1 1 0 0 1 1 1 1x1"
  name position_scale
  xpos 280
  ypos 455
 }
 Dot {
  name Dot17
  xpos 314
  ypos 647
 }
 Constant {
  inputs 0
  channels sdf_rotation_wall_thickness
  color {{"parent.rotate.x * pi / 180"} {"parent.rotate.y * pi / 180"} {"parent.rotate.z * pi / 180"} {parent.wall_thickness}}
  format "1 1 0 0 1 1 1 1x1"
  name rotation
  xpos 403
  ypos 457
 }
 Copy {
  inputs 2
  channels all
  name Copy1
  xpos 403
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_dimensions
  color {{parent.dimension_x} {parent.dimension_y} {parent.dimension_z} {parent.dimension_w}}
  format "1 1 0 0 1 1 1 1x1"
  name dimensions
  xpos 540
  ypos 460
 }
 Copy {
  inputs 2
  channels all
  name Copy2
  xpos 540
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_colour
  color {{parent.colour.r} {parent.colour.g} {parent.colour.b} {parent.refractive_index}}
  format "1 1 0 0 1 1 1 1x1"
  name colour
  xpos 669
  ypos 459
 }
 Copy {
  inputs 2
  channels all
  name Copy3
  xpos 669
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape
  color {{parent.shape} {"parent.repetition | (parent.elongate ? 4 : 0) | (parent.mirror_x ? 8 : 0) | (parent.mirror_y ? 16 : 0) | (parent.mirror_z ? 32 : 0) | (parent.hollow ? 64 : 0) | (parent.blend_type > 0 ? (1 << (parent.blend_type + 6)) : 0) | (parent.is_bound ? 4096 : 0)"} {"parent.sdf_merge.disable ? 0 : parent.sdf_merge.input1.width"} {parent.blend_strength}}
  format "1 1 0 0 1 1 1 1x1"
  name shape
  xpos 806
  ypos 462
 }
 Copy {
  inputs 2
  channels all
  name Copy4
  xpos 806
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_surface
  color {{parent.reflection} {parent.transmission} {parent.emission} {parent.roughness}}
  format "1 1 0 0 1 1 1 1x1"
  name surface
  xpos 935
  ypos 460
 }
 Copy {
  inputs 2
  channels all
  name Copy5
  xpos 936
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape_mods_0
  color {{parent.repetition_params.x} {parent.repetition_params.y} {parent.repetition_params.z} {parent.repetition_spacing}}
  format "1 1 0 0 1 1 1 1x1"
  name shape_mods
  xpos 1056
  ypos 463
 }
 Copy {
  inputs 2
  channels all
  name Copy6
  xpos 1056
  ypos 726
 }
 Constant {
  inputs 0
  channels sdf_shape_mods_1
  color {{parent.elongation.x} {parent.elongation.y} {parent.elongation.z} {parent.edge_radius}}
  format "1 1 0 0 1 1 1 1x1"
  name shape_mods1
  xpos 1183
  ypos 465
 }
 Copy {
  inputs 2
  channels all
  name Copy7
  xpos 1183
  ypos 726
 }
 Group {
  inputs 2
  name sdf_merge
  selected true
  xpos 1183
  ypos 822
  disable {{"!(\[exists parent.input1] && !input1.parent.input1.disable)"}}
  addUserKnob {20 User}
  addUserKnob {26 warning l Warning: T "Only merge lights with lights, and primitives with primitives"}
 }
  Reformat {
   inputs 0
   type "to box"
   box_width 1
   box_height 1
   box_fixed true
   name Reformat1
   xpos -119
   ypos 440
  }
  Input {
   inputs 0
   name Input2
   xpos 158
   ypos -28
   number 1
  }
  Dot {
   name Dot2
   xpos 192
   ypos -2
  }
set N5f225600 [stack 0]
  Dot {
   name Dot3
   xpos 329
   ypos -2
  }
  Dot {
   name Dot4
   xpos 329
   ypos 391
  }
  Input {
   inputs 0
   name Input1
   xpos 0
   ypos -32
  }
  Dot {
   name Dot1
   xpos 34
   ypos -6
  }
set N5f3fb900 [stack 0]
  Dot {
   name Dot6
   xpos -98
   ypos -6
  }
  Dot {
   name Dot5
   xpos -98
   ypos 336
  }
push $N5f225600
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop3
   xpos 158
   ypos 69
  }
  Crop {
   box {0 0 {parent.Dot2.width} 1}
   name Crop4
   xpos 158
   ypos 95
  }
  Transform {
   translate {{parent.Dot1.width} 0}
   center {1 0.5}
   name Transform2
   xpos 158
   ypos 121
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop5
   xpos 158
   ypos 167
  }
push $N5f3fb900
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop6
   xpos 0
   ypos 66
  }
  Crop {
   box {0 0 {parent.Dot1.width} 1}
   name Crop7
   xpos 0
   ypos 92
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop8
   xpos 0
   ypos 164
  }
  Merge2 {
   inputs 2
   also_merge all
   name Merge1
   xpos 0
   ypos 262
   disable {{"\[exists parent.input1] ? 0:1"}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input1] ? 0:1"}}
   name Switch2
   xpos 0
   ypos 332
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:1"}}
   name Switch1
   xpos 0
   ypos 387
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:\[exists parent.input1] ? 0:1"}}
   name Switch3
   xpos 0
   ypos 456
  }
  Dot {
   name out_dot
   xpos 36
   ypos 518
  }
  Output {
   name Output1
   xpos 2
   ypos 661
  }
 end_group
 Group {
  inputs 2
  name sdf_merge1
  xpos 1183
  ypos 900
  disable {{"!(\[exists parent.input0] && !(parent.input0.disable && !\[exists parent.input0.input0]))"}}
  addUserKnob {20 User}
  addUserKnob {26 warning l Warning: T "Only merge lights with lights, and primitives with primitives"}
 }
  Reformat {
   inputs 0
   type "to box"
   box_width 1
   box_height 1
   box_fixed true
   name Reformat1
   xpos -119
   ypos 440
  }
  Input {
   inputs 0
   name Input2
   xpos 158
   ypos -28
   number 1
  }
  Dot {
   name Dot2
   xpos 192
   ypos -2
  }
set N5f3a3200 [stack 0]
  Dot {
   name Dot3
   xpos 329
   ypos -2
  }
  Dot {
   name Dot4
   xpos 329
   ypos 391
  }
  Input {
   inputs 0
   name Input1
   xpos 0
   ypos -32
  }
  Dot {
   name Dot1
   xpos 34
   ypos -6
  }
set N5f3a1600 [stack 0]
  Dot {
   name Dot6
   xpos -98
   ypos -6
  }
  Dot {
   name Dot5
   xpos -98
   ypos 336
  }
push $N5f3a3200
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop3
   xpos 158
   ypos 69
  }
  Crop {
   box {0 0 {parent.Dot2.width} 1}
   name Crop4
   xpos 158
   ypos 95
  }
  Transform {
   translate {{parent.Dot1.width} 0}
   center {1 0.5}
   name Transform2
   xpos 158
   ypos 121
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop5
   xpos 158
   ypos 167
  }
push $N5f3a1600
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop6
   xpos 0
   ypos 66
  }
  Crop {
   box {0 0 {parent.Dot1.width} 1}
   name Crop7
   xpos 0
   ypos 92
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop8
   xpos 0
   ypos 164
  }
  Merge2 {
   inputs 2
   also_merge all
   name Merge1
   xpos 0
   ypos 262
   disable {{"\[exists parent.input1] ? 0:1"}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input1] ? 0:1"}}
   name Switch2
   xpos 0
   ypos 332
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:1"}}
   name Switch1
   xpos 0
   ypos 387
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:\[exists parent.input1] ? 0:1"}}
   name Switch3
   xpos 0
   ypos 456
  }
  Dot {
   name out_dot
   xpos 36
   ypos 518
  }
  Output {
   name Output1
   xpos 2
   ypos 661
  }
 end_group
 Output {
  name Output1
  xpos 1183
  ypos 1002
 }
end_group
Dot {
 name Dot7
 xpos -6
 ypos 308
}
Group {
 inputs 4
 name ray_march1
 knobChanged "__import__('sdf.ray_march', fromlist='RayMarch').RayMarch().handle_knob_changed()"
 xpos 180
 ypos 422
 addUserKnob {20 User l "Ray March"}
 addUserKnob {3 pixel_subdivisions l "pixel subdivisions" t "Subdivide the pixel and cast a ray for each subdivision, resulting in 2^subdivisions rays being sent from the camera."}
 pixel_subdivisions 1
 addUserKnob {3 max_rays_per_subpixel l "max rays per subpixel" t "For each subpixel the number of spawned rays will be capped at this value. This excludes shadow rays."}
 max_rays_per_subpixel 10
 addUserKnob {3 max_bounces l "max bounces" t "Limits the number of times the rays can intersect an object per subpixel."}
 max_bounces 10
 addUserKnob {7 ray_distance l "max ray distance" t "Each ray, once spawned is only allowed to travel this distance before it is culled." R 10 10000}
 ray_distance 50
 addUserKnob {3 max_ray_steps l "max ray steps" t "Limit the number of steps a ray can be marched before it is culled. Shadow rays are given half this number of steps."}
 max_ray_steps 2000
 addUserKnob {7 hit_tolerance l "hit tolerance" t "The ray will be considered to have hit an object when it is within this distance of its surface" R 1e-06 0.01}
 hit_tolerance 0.001
 addUserKnob {7 shadow_bias l "shadow bias" t "The surface will be offset by an additional factor of this amount before determining whether or not it is in shadow." R 1 2}
 shadow_bias 1
 addUserKnob {26 ""}
 addUserKnob {7 refractive_index l "refractive index" t "The index of refraction of the medium that the camera is currently in." R 1 4}
 refractive_index 1
 addUserKnob {26 ""}
 addUserKnob {7 haze l "haze amount" t "The strength of a linear hazing effect."}
 addUserKnob {7 haze_start l "haze start" t "The haze will only begin taking effect after the ray has travelled this distance from the camera." R 0 5}
 addUserKnob {7 haze_distance l "haze distance" t "The haze will reach its maximum value after travelling this far past 'haze start'." R 0 5}
 haze_distance 3
 addUserKnob {18 haze_colour t "The colour of the haze."}
 haze_colour {0 0 0}
 addUserKnob {6 haze_colour_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {26 ""}
 addUserKnob {7 iter_glow l "iter glow" t "The more steps a ray takes to compute a pixel the more it will take on the 'iter glow colour'. This can be used to view the slowest regions of the image or just to have a neat glowing effect." R 0 0.1}
 addUserKnob {18 iter_glow_colour t "The colour of the 'iter glow'."}
 iter_glow_colour {0 0 0}
 addUserKnob {6 iter_glow_colour_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {26 ""}
 addUserKnob {7 hdri_offset_angle l "hdri offset angle" t "Rotate the hdri image by this amount around the y-axis." R 0 360}
 addUserKnob {7 hdri_lighting_gain l "hdri lighting gain" t "Multiply the hdri lighting intensity by this amount."}
 hdri_lighting_gain 0.4
 addUserKnob {3 hdri_irradiance_samples l "hdri irradiance samples" t "Number of irradiance samples to take for diffuse lighting."}
 hdri_irradiance_samples 250
 addUserKnob {7 hdri_shadow_hardness l "hdri shadow hardness" t "Use soft shadows with this hardness if 'soften shadows' is enabled. Probably will not have much effect but give it a go." +DISABLED R 1 100}
 hdri_shadow_hardness 10
 addUserKnob {6 soften_shadows l "soften shadows" t "Enable soft shadows when computing the hdri image based lighting." -STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {4 output_type l output t "The AOV type to output." M {Scene Position Normal Depth}}
 output_type Depth
 addUserKnob {26 ""}
 addUserKnob {26 info l "" +STARTLINE T "v1.0.0 - (c) Owen Bulka - 2022"}
}
 BackdropNode {
  inputs 0
  name Lights
  xpos -306
  ypos -1633
  bdwidth 386
  bdheight 854
 }
 BackdropNode {
  inputs 0
  name Objects
  xpos 99
  ypos -1632
  bdwidth 1184
  bdheight 855
 }
 Input {
  inputs 0
  name camera
  xpos 1354
  ypos -1578
  number 2
 }
 Camera {
  projection_mode {{"\[expression \[value the_cam]projection_mode(\[value the_frame])]"}}
  focal {{"\[expression \[value the_cam]focal(\[value the_frame])]"}}
  haperture {{"\[expression \[value the_cam]haperture(\[value the_frame])]"}}
  vaperture {{"\[expression \[value the_cam]vaperture(\[value the_frame])]"}}
  near {{"\[expression \[value the_cam]near(\[value the_frame])]"}}
  far {{"\[expression \[value the_cam]far(\[value the_frame])]"}}
  win_translate {{"\[expression \[value the_cam]win_translate.u(\[value the_frame])]"} {"\[expression \[value the_cam]win_translate.v(\[value the_frame])]"}}
  win_scale {{"\[expression \[value the_cam]win_scale.u(\[value the_frame])]"} {"\[expression \[value the_cam]win_scale.v(\[value the_frame])]"}}
  winroll {{"\[expression \[value the_cam]winroll(\[value the_frame])]"}}
  focal_point {{"\[expression \[value the_cam]focal_point(\[value the_frame])]"}}
  fstop {{"\[expression \[value the_cam]fstop(\[value the_frame])]"}}
  name DummyCam
  help "DummyCam by Adrian Pueyo\n\nCamera that apart from the matrices also grabs all the \"Projection\" values from the upstream camera that it's connected to. Turns into a default Camera if no Camera connected. Can also be used inside of groups and gizmos, as many levels deep as you want :D All using live and super fast TCL.\n\nUpdated v1.1: Now grabs the correct frame too (thanks Erwan Leroy for the idea).\n\nUpdated v1.3: Now accepts Nuke13's Camera3\n\nadrianpueyo.com, 2019-2021"
  onCreate "n = nuke.thisNode()\nfor k in \[\"projection_mode\",\"focal\",\"haperture\",\"vaperture\",\"near\",\"far\",\"win_translate\",\"win_scale\",\"winroll\",\"focal_point\",\"fstop\"]:\n    n\[k].setFlag(0x0000000010000000)"
  xpos 1364
  ypos -1473
  addUserKnob {20 DummyCam l Defaults}
  addUserKnob {43 the_cam +INVISIBLE}
  the_cam "\[\n#DummyCam v1.3 - Updated 5 May 2021.\nset starting_point \"this.input0\"\nset default \"this.d_\"\n\n# If cam has no inputs, return the default.\nif \{\[exists \$starting_point]\} \{\n    set x \[node \$starting_point]\n\} \{ \n    return \$default\n\}\n\nset finished 0\nwhile \{\$finished != 1\} \{\n\n    # First look for a Cam or Input or topnode.\n    while \{\[class \$x] != \"Camera3\" && \[class \$x] != \"Camera2\" && \[class \$x] != \"Camera\" && \[class \$x] != \"Input\" && \$x != \[topnode \$x]\} \{\n        set x \[node \$x.input0]\n    \}\n\n    # Then, check if node is a cam (and return), and otherwise, if it's an input, see if the parent exists and move to it.\n    if \{\[class \$x]==\"Camera3\"||\[class \$x]==\"Camera2\"||\[class \$x]==\"Camera\"\} \{\n        set x \[append x \".\"]\n        return \$x\n    \} \{ \n        if \{ \[class \$x]==\"Input\" \} \{ \n            set inp \"\$x.parent.input\"\n            set inputNum \[value \$x.number]\n            set inp \[append inp \$inputNum]\n            if \{ \[exists \$inp] \} \{\n                set x \[node \$inp]\n            \} \{ \n                set finished 1\n            \}\n        \} \{ \n            set finished 1\n        \}\n    \}\n\}\nreturn \$default\n]"
  addUserKnob {43 the_frame +INVISIBLE}
  the_frame "\[\nset the_camera \[string trimright \[value the_cam] .]\nif \{\[exists \$the_camera]\} \{\n    return \[value \$the_camera.frame]\n\} \{ \n    return \[frame]\n\}\n]"
  addUserKnob {4 d_projection_mode l projection M {perspective orthographic uv spherical ""}}
  addUserKnob {7 d_focal l "focal length" R 0 100}
  d_focal 50
  addUserKnob {7 d_haperture l "horiz aperture" R 0 50}
  d_haperture 24.576
  addUserKnob {7 d_vaperture l "vert aperture" R 0 50}
  d_vaperture 18.672
  addUserKnob {7 d_near l near R 0 10}
  d_near 0.1
  addUserKnob {7 d_far l far R 0 10000}
  d_far 10000
  addUserKnob {30 d_win_translate l "window translate"}
  addUserKnob {30 d_win_scale l "window scale"}
  d_win_scale {1 1}
  addUserKnob {7 d_winroll l "window roll" R 0 45}
  addUserKnob {7 d_focal_point l "focal distance" R 0 10}
  d_focal_point 2
  addUserKnob {7 d_fstop l fstop R 0 30}
  d_fstop 16
  addUserKnob {26 version l " " t "Updated 5 May 2021" T "<span style=\"color:#666\"><br/><b>DummyCam v1.3</b> - <a href=\"http://www.adrianpueyo.com\" style=\"color:#666;text-decoration: none;\">adrianpueyo.com</a>, 2019-2021</span>"}
 }
 Constant {
  inputs 0
  format "2 1 0 0 2 1 1 lights"
  name Constant3
  xpos 1551
  ypos -1546
 }
 Input {
  inputs 0
  name hdri
  xpos 1661
  ypos -1577
  number 3
 }
 Merge2 {
  inputs 2
  name Merge1
  xpos 1661
  ypos -1523
 }
 Dot {
  name hdri_dot
  xpos 1695
  ypos -1474
 }
set N5f330800 [stack 0]
 BlinkScript {
  kernelSourceFile /home/ob1/software/nuke/dev/raymarch/src/blink/hdri_irradiance.blink
  recompileCount 117
  ProgramGroup 1
  KernelDescription "2 \"HDRIrradiance\" iterate pixelWise 89753a12538853aa2a4faf5d3f883737500a23e349b692f5e91dc6e43a7ce270 2 \"hdri\" Read Random \"dst\" Write Point 3 \"HDRI Lighting Width\" Int 1 AAgAAA== \"HDRI Lighting Height\" Int 1 AAQAAA== \"Samples\" Int 2 ZAAAADIAAAA= 3 \"hdriFormatWidth\" 1 1 \"hdriFormatHeight\" 1 1 \"samples\" 2 1 3 \"hdriPixelSize\" Float 2 1 AAAAAAAAAAA= \"up\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"sampleStep\" Float 2 1 AAAAAAAAAAA="
  kernelSource "#include \"math.h\"\n\n\nkernel HDRIrradiance : ImageComputationKernel<ePixelWise>\n\{\n    Image<eRead, eAccessRandom, eEdgeClamped> hdri; // the input image\n    Image<eWrite> dst; // the output image\n\n    param:\n        int hdriFormatWidth;\n        int hdriFormatHeight;\n        int2 samples;\n\n    local:\n        float2 hdriPixelSize;\n        float3 up;\n        float2 sampleStep;\n\n\n    // In define(), parameters can be given labels and default values.\n    void define()\n    \{\n        defineParam(hdriFormatHeight, \"HDRI Lighting Height\", 1024);\n        defineParam(hdriFormatWidth, \"HDRI Lighting Width\", 2048);\n        defineParam(samples, \"Samples\", int2(100, 50));\n    \}\n\n\n    void init()\n    \{\n        hdriPixelSize = float2(hdriFormatWidth / (2.0f * PI), hdriFormatHeight / PI);\n        up = float3(0, 1, 0);\n\n        sampleStep = float2(\n            2.0f * PI / (float) samples.x,\n            PI / (2.0f * (float) samples.y)\n        );\n    \}\n\n\n    /**\n     * Get the value of hdri the ray would hit at infinite distance\n     */\n    float4 readHDRIValue(float3 rayDirection)\n    \{\n        const float2 angles = cartesionUnitVectorToSpherical(rayDirection);\n\n        // Why does bilinear give nans? :(\n        return hdri(\n            round(hdriPixelSize.x * angles.x) - 1,\n            round(hdriFormatHeight - (hdriPixelSize.y * angles.y)) - 1\n        );\n    \}\n\n\n    void process(int2 pos)\n    \{\n        const float2 uvPosition = pixelsToUV(\n            float2(pos.x, pos.y),\n            float2(hdriFormatWidth, hdriFormatHeight)\n        );\n        const float3 direction = sphericalUnitVectorToCartesion(\n            uvPositionToAngles(uvPosition)\n        );\n\n        const float3 tangentRight = normalize(cross(up, direction));\n        const float3 tangentUp = normalize(cross(direction, tangentRight));\n\n        float4 irradiance = float4(0);\n\n        for (float theta = 0.0f; theta < 2.0f * PI; theta += sampleStep.x)\n        \{\n            for (float phi = PI / 2.0f; phi > 0.0f; phi -= sampleStep.y)\n            \{\n                const float3 tangent = sphericalUnitVectorToCartesion(float2(theta, phi));\n                const float3 sampleDirection = (\n                    tangent.x * tangentRight\n                    + tangent.y * tangentUp\n                    + tangent.z * direction\n                );\n\n                irradiance += readHDRIValue(sampleDirection) * cos(phi) * sin(phi);\n            \}\n        \}\n\n        dst() = PI * irradiance / (float) (samples.x * samples.y);\n    \}\n\};\n"
  rebuild ""
  "HDRIrradiance_HDRI Lighting Width" {{hdri_dot.width}}
  "HDRIrradiance_HDRI Lighting Height" {{hdri_dot.height}}
  HDRIrradiance_Samples {{parent.hdri_irradiance_samples} {parent.hdri_irradiance_samples/2}}
  rebuild_finalise ""
  name HDRIrradiance
  xpos 1805
  ypos -1484
 }
 Reformat {
  type scale
  scale {{"floor(min(parent.hdri_dot.height, parent.hdri_dot.width) / 8) > 0 ? 1/8 : 1"}}
  resize fill
  name Reformat
  xpos 1805
  ypos -1432
 }
 Dot {
  name hdri_light_dot
  xpos 1839
  ypos -564
 }
 Constant {
  inputs 0
  channels sdf_light
  format "1 1 0 0 1 1 1 1x1"
  name Constant4
  xpos -278
  ypos -1547
 }
 Input {
  inputs 0
  name lights
  xpos -82
  ypos -1575
  number 1
 }
 Merge2 {
  inputs 2
  name Merge3
  xpos -82
  ypos -1518
 }
 Dot {
  name light_dot
  xpos -48
  ypos -1309
 }
set N5f310800 [stack 0]
 Shuffle {
  in sdf_light_properties1
  blue green
  alpha green
  name light_props1
  xpos -266
  ypos -1040
 }
 Dot {
  name Dot1
  xpos -232
  ypos -866
 }
push $N5f310800
 Shuffle {
  in sdf_light_properties
  name light_props
  xpos -147
  ypos -1040
 }
 Dot {
  name Dot8
  xpos -113
  ypos -864
 }
push $N5f310800
 Shuffle {
  in sdf_light
  name light
  xpos -31
  ypos -1040
 }
 Dot {
  name Dot7
  xpos 3
  ypos -862
 }
 Constant {
  inputs 0
  channels sdf_position_scale
  format "1 1 0 0 1 1 1 1x1"
  name Constant2
  xpos 411
  ypos -1545
 }
 Input {
  inputs 0
  name objects
  xpos 607
  ypos -1567
 }
 Merge2 {
  inputs 2
  name Merge2
  xpos 607
  ypos -1516
 }
 Dot {
  name obj_dot
  xpos 641
  ypos -1318
 }
set N5df4b900 [stack 0]
 Shuffle {
  in sdf_surface
  name surface
  xpos 288
  ypos -1034
 }
 Dot {
  name Dot2
  xpos 322
  ypos -863
 }
push $N5df4b900
 Shuffle {
  in sdf_shape_mods_1
  name shape_mods_1
  xpos 746
  ypos -1030
 }
 Dot {
  name Dot12
  xpos 780
  ypos -865
 }
push $N5df4b900
 Shuffle {
  in sdf_shape_mods_0
  name shape_mods_0
  xpos 607
  ypos -1031
 }
 Dot {
  name Dot3
  xpos 641
  ypos -864
 }
push $N5df4b900
 Shuffle {
  in sdf_shape
  name shape
  xpos 439
  ypos -1035
 }
 Dot {
  name Dot4
  xpos 473
  ypos -863
 }
push $N5df4b900
 Shuffle {
  in sdf_colour
  name colour
  xpos 131
  ypos -1037
 }
 Dot {
  name Dot5
  xpos 165
  ypos -864
 }
push $N5df4b900
 Shuffle {
  in sdf_dimensions
  name dimensions
  xpos 1193
  ypos -1029
 }
 Dot {
  name Dot10
  xpos 1227
  ypos -857
 }
push $N5df4b900
 Shuffle {
  in sdf_rotation_wall_thickness
  name rotation_wall_thickness
  xpos 1042
  ypos -1030
 }
 Dot {
  name Dot9
  xpos 1076
  ypos -854
 }
push $N5df4b900
 Shuffle {
  in sdf_position_scale
  name position_scale
  xpos 900
  ypos -1029
 }
 Dot {
  name Dot6
  xpos 934
  ypos -859
 }
push $N5f330800
 Constant {
  inputs 0
  name Constant1
  xpos 1958
  ypos -746
 }
 Noise {
  output {rgba.red -rgba.green -rgba.blue rgba.alpha}
  type turbulence
  size 1
  zoffset 0.78
  lacunarity 1.6
  center {512 389}
  name Noise1
  xpos 1958
  ypos -650
 }
 Noise {
  output {-rgba.red rgba.green -rgba.blue rgba.alpha}
  type turbulence
  size 1
  zoffset 1.94
  center {512 389}
  name Noise2
  xpos 1958
  ypos -597
 }
 Noise {
  output {-rgba.red -rgba.green rgba.blue rgba.alpha}
  type turbulence
  size 1
  zoffset 4
  lacunarity 2.14
  center {512 389}
  name Noise3
  xpos 1958
  ypos -539
 }
 Dot {
  name resolution_dot
  xpos 1992
  ypos -451
 }
 BlinkScript {
  inputs 14
  kernelSourceFile /home/ob1/software/nuke/dev/raymarch/src/blink/raymarch.blink
  recompileCount 1829
  ProgramGroup 1
  KernelDescription "2 \"RayMarchKernel\" iterate pixelWise fcf3094cc890f1da91959f14f39680e118926e672bc75d6e83cd6e46b89d63da 15 \"noise\" Read Point \"hdri\" Read Random \"positions\" Read Random \"rotations\" Read Random \"dimensions\" Read Random \"colours\" Read Random \"shapeProperties\" Read Random \"shapeModParameters0\" Read Random \"shapeModParameters1\" Read Random \"surfaceProperties\" Read Random \"lights\" Read Random \"lightProperties\" Read Random \"lightProperties1\" Read Random \"hdriLight\" Read Random \"dst\" Write Point 32 \"Focal Length\" Float 1 AABIQg== \"Horizontal Aperture\" Float 1 ppvEQQ== \"Near Plane\" Float 1 zczMPQ== \"Far Plane\" Float 1 AEAcRg== \"Camera World Matrix\" Float 16 AACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPw== \"Screen Width\" Float 1 AABwRQ== \"Screen Height\" Float 1 AAAHRQ== \"HDRI Offset Angle\" Float 1 AAAAAA== \"HDRI Width\" Int 1 AAgAAA== \"HDRI Height\" Int 1 AAQAAA== \"HDRI Lighting Gain\" Float 1 zczMPQ== \"HDRI Shadow Hardness\" Float 1 AACAPw== \"Soften HDRI Shadows\" Int 1 AQAAAA== \"HDRI Lighting Width\" Int 1 AAQAAA== \"HDRI Lighting Height\" Int 1 AAIAAA== \"Pixel Subdivisions\" Int 1 AAAAAA== \"Max Rays Per Subpixel\" Int 1 AQAAAA== \"Max Bounces\" Int 1 AQAAAA== \"Max Ray Distance\" Float 1 AAB6RA== \"Max Ray Steps\" Int 1 gAAAAA== \"Hit Tolerance\" Float 1 bxKDOg== \"Shadow Bias\" Float 1 AACAPw== \"Index of Refraction\" Float 1 AACAPw== \"Object Texture Width\" Int 1 AAAAAA== \"Light Texture Width\" Int 1 AAAAAA== \"Haze Amount\" Float 1 AAAAAA== \"Haze Start\" Float 1 AAAAAA== \"Haze Distance\" Float 1 AAB6RA== \"Haze Colour\" Float 4 AACAPwAAgD8AAIA/AACAPw== \"Iter Glow Amount\" Float 1 AAAAAA== \"Iter Glow Colour\" Float 4 AACAPwAAgD8AAIA/AACAPw== \"Output Type\" Int 1 AAAAAA== 32 \"focalLength\" 1 1 \"horizontalAperture\" 1 1 \"nearPlane\" 1 1 \"farPlane\" 1 1 \"cameraWorldMatrix\" 16 1 \"formatWidth\" 1 1 \"formatHeight\" 1 1 \"hdriOffsetAngle\" 1 1 \"hdriFormatWidth\" 1 1 \"hdriFormatHeight\" 1 1 \"hdriLightGain\" 1 1 \"hdriLightShadowHardness\" 1 1 \"softenHDRILightShadows\" 1 1 \"hdriLightFormatWidth\" 1 1 \"hdriLightFormatHeight\" 1 1 \"subdivisions\" 1 1 \"maxRaysPerSubPixel\" 1 1 \"maxBounces\" 1 1 \"maxRayDistance\" 1 1 \"maxRaySteps\" 1 1 \"hitTolerance\" 1 1 \"shadowBias\" 1 1 \"refractiveIndex\" 1 1 \"objectTextureWidth\" 1 1 \"lightTextureWidth\" 1 1 \"hazeAmount\" 1 1 \"hazeStart\" 1 1 \"hazeDistance\" 1 1 \"hazeColour\" 4 1 \"iterGlowAmount\" 1 1 \"iterGlowColour\" 4 1 \"outputType\" 1 1 7 \"inverseCameraProjectionMatrix\" Float 16 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== \"bouncesPerRay\" Int 1 1 AAAAAA== \"numSubPixels\" Int 1 1 AAAAAA== \"subdividedPixelSize\" Float 1 1 AAAAAA== \"hdriPixelSize\" Float 2 1 AAAAAAAAAAA= \"hdriLightPixelSize\" Float 2 1 AAAAAAAAAAA= \"hdriOffsetRadians\" Float 1 1 AAAAAA=="
  kernelSource "// Copyright 2022 by Owen Bulka.\n// All rights reserved.\n// This file is released under the \"MIT License Agreement\".\n// Please see the LICENSE.md file that should have been included as part\n// of this package.\n\n//\n// BlinkScript Ray Marcher\n//\n\n#include \"camera.h\"\n#include \"lights.h\"\n#include \"math.h\"\n#include \"objectInteraction.h\"\n#include \"sdfModifications.h\"\n#include \"sdfs.h\"\n\n\n#define MAX_RAYS_PER_SUBPIXEL 100\n#define MAX_CHILD_DEPTH 100\n\n\nkernel RayMarchKernel : ImageComputationKernel<ePixelWise>\n\{\n    // the input which specifies the format, process is called once per pixel\n    // in this image, which also provides random seeds\n    Image<eRead, eAccessPoint, eEdgeNone> noise;\n\n    // the hdribox in latlong format\n    Image<eRead, eAccessRandom, eEdgeClamped> hdri;\n\n\n    // the shape positons.xyz, scale.w\n    Image<eRead, eAccessRandom, eEdgeNone> positions;\n\n    // the shape rotations.xyz, wall thickness.w\n    Image<eRead, eAccessRandom, eEdgeNone> rotations;\n\n    // the shape dimensions.xyzw (some shapes may not use all channels)\n    Image<eRead, eAccessRandom, eEdgeNone> dimensions;\n\n    // the shape colours.xyz, refractive index.w\n    Image<eRead, eAccessRandom, eEdgeNone> colours;\n\n\n    // shape type.x, operation.y, numChildren.z, blend strength.w\n    Image<eRead, eAccessRandom, eEdgeNone> shapeProperties;\n\n    // repetition params.xyzw\n    Image<eRead, eAccessRandom, eEdgeNone> shapeModParameters0;\n\n    // elongation.xyz edgeRadius.w\n    Image<eRead, eAccessRandom, eEdgeNone> shapeModParameters1;\n\n    // reflection.x, transmission.y, emission.z, roughness.w\n    Image<eRead, eAccessRandom, eEdgeNone> surfaceProperties;\n\n\n    // the input lights direction/position.xyz intensity.w\n    Image<eRead, eAccessRandom, eEdgeNone> lights;\n\n    // colour.xyz, type.w\n    // w in \[0, 1) = directional, \[1, inf) = point\n    Image<eRead, eAccessRandom, eEdgeNone> lightProperties;\n\n    // shadow hardness.x\n    Image<eRead, eAccessRandom, eEdgeNone> lightProperties1;\n\n    // the hdribox in latlong format\n    Image<eRead, eAccessRandom, eEdgeClamped> hdriLight;\n\n    // the output image\n    Image<eWrite> dst;\n\n\n    param:\n        // These parameters are made available to the user.\n\n        // Camera params\n        float focalLength;\n        float horizontalAperture;\n        float nearPlane;\n        float farPlane;\n        float4x4 cameraWorldMatrix;\n\n        // Image params\n        float formatWidth;\n        float formatHeight;\n\n        float hdriOffsetAngle;\n        int hdriFormatWidth;\n        int hdriFormatHeight;\n        float hdriLightGain;\n        float hdriLightShadowHardness;\n        int softenHDRILightShadows;\n        int hdriLightFormatWidth;\n        int hdriLightFormatHeight;\n\n        // Ray params\n        int subdivisions;\n        int maxRaysPerSubPixel;\n        int maxBounces;\n        float maxRayDistance;\n        int maxRaySteps;\n        float hitTolerance;\n        float shadowBias;\n\n        // Scene params\n        float refractiveIndex;\n\n        // Shape Textures\n        int objectTextureWidth;\n\n        // Light textures\n        int lightTextureWidth;\n\n        float hazeAmount;\n        float hazeStart;\n        float hazeDistance;\n        float4 hazeColour;\n\n        float iterGlowAmount;\n        float4 iterGlowColour;\n\n        int outputType;\n\n    local:\n        // These local variables are not exposed to the user.\n\n        float4x4 inverseCameraProjectionMatrix;\n\n        int bouncesPerRay;\n\n        int numSubPixels;\n        float subdividedPixelSize;\n\n        float2 hdriPixelSize;\n        float2 hdriLightPixelSize;\n        float hdriOffsetRadians;\n\n\n\n    // In define(), parameters can be given labels and default values.\n    void define()\n    \{\n        // Camera params\n        defineParam(focalLength, \"Focal Length\", 50.0f);\n        defineParam(horizontalAperture, \"Horizontal Aperture\", 24.576f);\n        defineParam(nearPlane, \"Near Plane\", 0.1f);\n        defineParam(farPlane, \"Far Plane\", 10000.0f);\n        defineParam(\n            cameraWorldMatrix,\n            \"Camera World Matrix\",\n            float4x4(\n                1, 0, 0, 0,\n                0, 1, 0, 0,\n                0, 0, 1, 0,\n                0, 0, 0, 1\n            )\n        );\n\n        // Image params\n        defineParam(formatHeight, \"Screen Height\", 2160.0f);\n        defineParam(formatWidth, \"Screen Width\", 3840.0f);\n        defineParam(hdriOffsetAngle, \"HDRI Offset Angle\", 0.0f);\n        defineParam(hdriFormatHeight, \"HDRI Height\", 1024);\n        defineParam(hdriFormatWidth, \"HDRI Width\", 2048);\n        defineParam(hdriLightGain, \"HDRI Lighting Gain\", 0.1f);\n        defineParam(hdriLightShadowHardness, \"HDRI Shadow Hardness\", 1.0f);\n        defineParam(softenHDRILightShadows, \"Soften HDRI Shadows\", 1);\n        defineParam(hdriLightFormatHeight, \"HDRI Lighting Height\", 512);\n        defineParam(hdriLightFormatWidth, \"HDRI Lighting Width\", 1024);\n\n        // Ray params\n        defineParam(subdivisions, \"Pixel Subdivisions\", 0);\n        defineParam(maxRaysPerSubPixel, \"Max Rays Per Subpixel\", 1);\n        defineParam(maxRayDistance, \"Max Ray Distance\", 1000.0f);\n        defineParam(maxRaySteps, \"Max Ray Steps\", 128);\n        defineParam(maxBounces, \"Max Bounces\", 1);\n        defineParam(hitTolerance, \"Hit Tolerance\", 0.001f);\n        defineParam(shadowBias, \"Shadow Bias\", 1.0f);\n\n        // Scene params\n        defineParam(refractiveIndex, \"Index of Refraction\", 1.0f);\n\n        // Shape Counts\n        defineParam(objectTextureWidth, \"Object Texture Width\", 0);\n\n        // Light Counts\n        defineParam(lightTextureWidth, \"Light Texture Width\", 0);\n\n        defineParam(hazeAmount, \"Haze Amount\", 0.0f);\n        defineParam(hazeStart, \"Haze Start\", 0.0f);\n        defineParam(hazeDistance, \"Haze Distance\", 1000.0f);\n        defineParam(hazeColour, \"Haze Colour\", float4(1, 1, 1, 1));\n\n        defineParam(iterGlowAmount, \"Iter Glow Amount\", 0.0f);\n        defineParam(iterGlowColour, \"Iter Glow Colour\", float4(1, 1, 1, 1));\n\n        defineParam(outputType, \"Output Type\", 0);\n    \}\n\n\n    // The init() function is run before any calls to process().\n    // Local variables can be initialized here.\n    void init()\n    \{\n        bouncesPerRay = maxBounces <= 0 ? 1 : maxBounces;\n\n        // TODO use angles to allow -ve focal length like for latlongs\n        float aspect = aspectRatio(formatHeight, formatWidth);\n        float4x4 cameraProjectionMatrix = projectionMatrix(\n            focalLength,\n            horizontalAperture,\n            aspect,\n            nearPlane,\n            farPlane\n        );\n        inverseCameraProjectionMatrix = cameraProjectionMatrix.invert();\n\n        int subPixelDivisions = pow(2, abs(subdivisions));\n        subdividedPixelSize = 1.0f / (float) subPixelDivisions;\n        numSubPixels = pow(subPixelDivisions, 2);\n\n        hdriPixelSize = float2(hdriFormatWidth / (2 * PI), hdriFormatHeight / PI);\n        hdriLightPixelSize = float2(hdriLightFormatWidth / (2 * PI), hdriLightFormatHeight / PI);\n        hdriOffsetRadians = hdriOffsetAngle * PI / 180.0f;\n    \}\n\n\n    // /**\n    //  * Get the value of hdri the ray would hit at infinite distance\n    //  */\n    // float4 readHDRIValue(float3 rayDirection)\n    // \{\n    //     const float2 angles = cartesionUnitVectorToSpherical(rayDirection, hdriOffsetRadians);\n\n    //     // Why does bilinear give nans? :(\n    //     return hdri(\n    //         round(hdriPixelSize.x * angles.x) - 1,\n    //         round(hdriFormatHeight - (hdriPixelSize.y * angles.y)) - 1\n    //     );\n    // \}\n\n\n    /**\n     * Get the value of hdri the ray would hit at infinite distance\n     */\n    float4 readHDRIValue(float3 rayDirection)\n    \{\n        const float2 angles = cartesionUnitVectorToSpherical(rayDirection, hdriOffsetRadians);\n\n        // Should be able to say image access is eEdgeClamped and not do this\n        // but I see nan pixels sooo... :(\n        const float2 indices = clamp(\n            float2(\n                hdriPixelSize.x * angles.x,\n                hdriFormatHeight - (hdriPixelSize.y * angles.y)\n            ),\n            float2(0),\n            float2(hdriFormatWidth, hdriFormatHeight) - 1.0f\n        );\n\n        return bilinear(hdri, indices.x, indices.y);\n    \}\n\n\n    // /**\n    //  * Get the value of hdri the ray would hit at infinite distance\n    //  */\n    // float4 readHDRILightValue(float3 rayDirection)\n    // \{\n    //     const float2 angles = cartesionUnitVectorToSpherical(rayDirection, hdriOffsetRadians);\n\n    //     // Why does bilinear give nans? :(\n    //     return hdriLightGain * hdriLight(\n    //         round(hdriLightPixelSize.x * angles.x) - 1,\n    //         round(hdriLightFormatHeight - (hdriLightPixelSize.y * angles.y)) - 1\n    //     );\n    // \}\n\n\n    float4 readHDRILightValue(float3 rayDirection)\n    \{\n        const float2 angles = cartesionUnitVectorToSpherical(rayDirection, hdriOffsetRadians);\n\n        // Should be able to say image access is eEdgeClamped and not do this\n        // but I see nan pixels sooo... :(\n        const float2 indices = clamp(\n            float2(\n                hdriLightPixelSize.x * angles.x,\n                hdriLightFormatHeight - (hdriLightPixelSize.y * angles.y)\n            ),\n            float2(0),\n            float2(hdriLightFormatWidth, hdriLightFormatHeight) - 1.0f\n        );\n\n        return hdriLightGain * bilinear(hdriLight, indices.x, indices.y);\n    \}\n\n\n    //\n    // Render Engine\n    //\n\n\n    float3 transformRay(\n        const float3 &rayOrigin,\n        const float3 &position,\n        const float3 &rotation,\n        const int modifications,\n        const float4 &modParameters0,\n        const float4 &modParameters1)\n    \{\n        float3x3 rotMatrix;\n        float3 transformedRay;\n        rotationMatrix(rotation, rotMatrix);\n        matmul(\n            rotMatrix.invert(),\n            rayOrigin - position,\n            transformedRay\n        );\n        performShapeModification(\n            modifications,\n            modParameters0,\n            modParameters1,\n            transformedRay\n        );\n\n        return transformedRay;\n    \}\n\n\n    float getNextDistance(\n        const float3 &rayOrigin,\n        const int shape,\n        const float4 &dimension,\n        const float uniformScale,\n        const int modifications,\n        const float edgeRadius,\n        const float wallThickness,\n        float4 &colour)\n    \{\n        float nextDistance = distanceToObject(\n            rayOrigin / uniformScale,\n            shape,\n            dimension,\n            colour\n        ) * uniformScale;\n\n        return performDistanceModification(\n            modifications,\n            edgeRadius,\n            wallThickness,\n            nextDistance\n        );\n    \}\n\n\n    /**\n     * Compute the minimum distance to an object in the scene\n     * \n     * @arg rayOrigin: The origin position of the ray.\n     * @arg pixelFootprint: A value proportional to the amount of world\n     *     space that fills a pixel, like the distance from camera.\n     * @arg colour: Location to store the colour of the hit object.\n     * @arg surface: Location to store the surface properties of the hit\n     *     object.\n     */\n    float2 getMinDistanceToObjectInScene(\n            const float3 &rayOrigin,\n            const float pixelFootprint,\n            float4 &colour,\n            float4 &surface)\n    \{\n        float distance = maxRayDistance;\n        float id = 0.0f;\n\n        // numChildren, transformedRay, scale, mods, nextDistance, colour, refractive\n        // index, surface, objectId, blendStrength\n        float parentStack\[MAX_CHILD_DEPTH]\[1 + 3 + 1 + 1 + 1 + 3 + 1 +  4 + 1 + 1];\n        int parentStackLength = 0;\n\n        for (int j=0; j < objectTextureWidth; j++)\n        \{\n            // Read in the shape properties\n            SampleType(positions) position = positions(j, 0);\n            SampleType(rotations) rotation = rotations(j, 0);\n            SampleType(dimensions) dimension = dimensions(j, 0);\n            SampleType(shapeProperties) shapeProperty = shapeProperties(j, 0);\n            SampleType(shapeModParameters0) modParameters0 = shapeModParameters0(j, 0);\n            SampleType(shapeModParameters1) modParameters1 = shapeModParameters1(j, 0);\n            SampleType(colours) surfaceColour = colours(j, 0);\n            SampleType(surfaceProperties) surfaceProperty = surfaceProperties(j, 0);\n\n            const int modifications = (int) shapeProperty.y;\n            float scale = position.w;\n\n            const float blendStrength = shapeProperty.w;\n            float numChildren = shapeProperty.z;\n\n            int stackLastIndex = parentStackLength - 1;\n\n            float4 blendedColour = surfaceColour;\n            float4 blendedSurface = surfaceProperty;\n\n            // Position relative to the parent if we have any\n            float3 parentTransformedRay = rayOrigin;\n            if (parentStackLength > 0)\n            \{\n                parentTransformedRay.x = parentStack\[stackLastIndex]\[1];\n                parentTransformedRay.y = parentStack\[stackLastIndex]\[2];\n                parentTransformedRay.z = parentStack\[stackLastIndex]\[3];\n                scale *= parentStack\[stackLastIndex]\[4];\n            \}\n\n            // Use parent transform to position child\n            const float3 transformedRay = transformRay(\n                parentTransformedRay,\n                float3(position.x, position.y, position.z),\n                float3(rotation.x, rotation.y, rotation.z),\n                modifications,\n                modParameters0,\n                modParameters1\n            );\n\n            // Get distance to this child\n            float nextDistance = getNextDistance(\n                transformedRay,\n                (int) shapeProperty.x,\n                dimension,\n                scale,\n                modifications,\n                modParameters1.w,\n                rotation.w,\n                blendedColour\n            );\n\n            // Track which object was hit for the alpha channel\n            float objectId = (float) j + 1.0f;\n\n            // If this is a bounding volume, we can skip its children\n            // if we aren't close to, or inside it\n            if (\n                modifications & 4096\n                && nextDistance > hitTolerance * (pixelFootprint + 1.0f)\n            ) \{\n                // Update the min distance if this bounding volume is closest.\n                // Otherwise we could step through it, or if every object in\n                // the scene is inside it, we would not step forward at all\n                if (fabs(nextDistance) < fabs(distance))\n                \{\n                    distance = nextDistance;\n\n                    colour = blendedColour;\n                    surface = blendedSurface;\n\n                    id = objectId;\n                \}\n\n                // This was tagged as a boundary object, skip its children\n                // since we arent close to hitting it\n                j += numChildren;\n\n                for (int parentIndex=stackLastIndex; parentIndex >= 0; parentIndex--)\n                \{\n                    parentStack\[parentIndex]\[0] -= numChildren + 1.0f;\n                \}\n\n                // If there are no parents, or still children of the parent\n                // we do not need to compute anything further for this loop\n                if (parentStackLength <= 0 || parentStack\[stackLastIndex]\[0] > 0.0f)\n                \{\n                    continue;\n                \}\n\n                // pop stack\n                // we know that there will be no more children if we did not continue\n                numChildren = 0.0f;\n                nextDistance = parentStack\[stackLastIndex]\[6];\n                blendedColour = float4(\n                    parentStack\[stackLastIndex]\[7],\n                    parentStack\[stackLastIndex]\[8],\n                    parentStack\[stackLastIndex]\[9],\n                    parentStack\[stackLastIndex]\[10]\n                );\n                blendedSurface = float4(\n                    parentStack\[stackLastIndex]\[11],\n                    parentStack\[stackLastIndex]\[12],\n                    parentStack\[stackLastIndex]\[13],\n                    parentStack\[stackLastIndex]\[14]\n                );\n                objectId = parentStack\[stackLastIndex]\[15];\n                stackLastIndex--;\n                parentStackLength--;\n            \}\n\n            if (numChildren <= 0.0f)\n            \{\n                // No Children left, compute interactions with parent\n                if (parentStackLength > 0)\n                \{\n                    // Process this object, along with all parents that do not\n                    // have any more children, removing them from the stack,\n                    // but descend all the way down the stack, without removing\n                    // the objects that still have children\n                    for (int stackIndex=stackLastIndex; stackIndex >= 0; stackIndex--)\n                    \{\n                        const int parentModifications = (int) parentStack\[stackIndex]\[5];\n\n                        // Do not need to interact with bounding volumes.\n                        // They are in the stack for relative positioning\n                        // if they weren't then we would have to manually move\n                        // the bounding box to follow the children\n                        if (!(parentModifications & 4096))\n                        \{\n                            const float parentNextDistance = parentStack\[stackIndex]\[6];\n                            const float4 parentSurfaceColour = float4(\n                                parentStack\[stackIndex]\[7],\n                                parentStack\[stackIndex]\[8],\n                                parentStack\[stackIndex]\[9],\n                                parentStack\[stackIndex]\[10]\n                            );\n                            const float4 parentSurfaceProperty = float4(\n                                parentStack\[stackIndex]\[11],\n                                parentStack\[stackIndex]\[12],\n                                parentStack\[stackIndex]\[13],\n                                parentStack\[stackIndex]\[14]\n                            );\n                            if (nextDistance > parentNextDistance)\n                            \{\n                                objectId = parentStack\[stackIndex]\[15];\n                            \}\n                            const float parentBlendStrength = parentStack\[stackIndex]\[16];\n\n                            // Compute interaction between parent and this child\n                            nextDistance = performChildInteraction(\n                                parentModifications,\n                                parentNextDistance,\n                                nextDistance,\n                                parentSurfaceColour,\n                                blendedColour,\n                                parentSurfaceProperty,\n                                blendedSurface,\n                                parentBlendStrength\n                            );\n                        \}\n\n                        // Update the global min distance (and surface/colour)\n                        if (fabs(nextDistance) < fabs(distance))\n                        \{\n                            distance = nextDistance;\n\n                            colour = blendedColour;\n                            surface = blendedSurface;\n\n                            id = objectId;\n                        \}\n                    \}\n\n                    do\n                    \{\n                        // Decrement the number of children each parent has\n                        for (int parentIndex=stackLastIndex; parentIndex >= 0; parentIndex--)\n                        \{\n                            parentStack\[parentIndex]\[0] -= 1.0f;\n                        \}\n\n                        // Get the number of children still remaining for the parent\n                        // If there are still children, we can break out of this loop\n                        // to process the rest of them before the parent itself\n                        numChildren = parentStack\[stackLastIndex]\[0];\n                    \}\n                    while (numChildren <= 0.0f && --stackLastIndex >= 0);\n\n                    parentStackLength = stackLastIndex + 1;\n                \}\n                // No parents to interact with, simply check the distance\n                else if (fabs(nextDistance) < fabs(distance))\n                \{\n                    distance = nextDistance;\n\n                    colour = blendedColour;\n                    surface = blendedSurface;\n\n                    id = objectId;\n                \}\n            \}\n            else\n            \{\n                // Node has Children, push it to the stack for later\n                // processing when we have all its children\n                // parentStack.push()\n                parentStack\[parentStackLength]\[0] = numChildren;\n                parentStack\[parentStackLength]\[1] = transformedRay.x;\n                parentStack\[parentStackLength]\[2] = transformedRay.y;\n                parentStack\[parentStackLength]\[3] = transformedRay.z;\n                parentStack\[parentStackLength]\[4] = scale;\n                parentStack\[parentStackLength]\[5] = (float) modifications;\n                parentStack\[parentStackLength]\[6] = nextDistance;\n                parentStack\[parentStackLength]\[7] = blendedColour.x;\n                parentStack\[parentStackLength]\[8] = blendedColour.y;\n                parentStack\[parentStackLength]\[9] = blendedColour.z;\n                parentStack\[parentStackLength]\[10] = blendedColour.w;\n                parentStack\[parentStackLength]\[11] = blendedSurface.x;\n                parentStack\[parentStackLength]\[12] = blendedSurface.y;\n                parentStack\[parentStackLength]\[13] = blendedSurface.z;\n                parentStack\[parentStackLength]\[14] = blendedSurface.w;\n                parentStack\[parentStackLength]\[15] = objectId;\n                parentStack\[parentStackLength]\[16] = blendStrength;\n                parentStackLength++;\n            \}\n        \}\n\n        return float2(distance, id);\n    \}\n\n\n    float computeSoftShadow(\n            const float3 &rayDirection,\n            const float distanceToShadePoint,\n            const float softness,\n            float3 &rayOrigin,\n            float4 &colour,\n            float4 &surface)\n    \{\n        float distanceTravelled = 0;\n        float shadowIntensity = 1.0f;\n        float lastStepDistance = 1000000000000000000000000.0f;\n\n        int iterations = 0;\n        while (distanceTravelled < distanceToShadePoint && iterations < maxRaySteps / 2)\n        \{\n            const float stepDistance = fabs(\n                getMinDistanceToObjectInScene(\n                    rayOrigin,\n                    distanceTravelled,\n                    colour,\n                    surface\n                ).x\n            );\n            const float stepDistanceSquared = stepDistance * stepDistance;\n            float softOffset = stepDistanceSquared / (2.0f * lastStepDistance);\n            shadowIntensity = min(\n                shadowIntensity,\n                softness * sqrt(stepDistanceSquared - softOffset * softOffset)\n                / max(0.0f, distanceTravelled - softOffset)\n            );\n\n            if (stepDistance < hitTolerance * distanceTravelled)\n            \{\n                surface.z /= pow(1.0f + distanceTravelled, 4);\n                shadowIntensity = saturate(shadowIntensity);\n                return shadowIntensity * shadowIntensity * (3.0f - 2.0f * shadowIntensity);\n            \}\n\n            lastStepDistance = stepDistance;\n            rayOrigin += rayDirection * stepDistance;\n            distanceTravelled += stepDistance;\n            iterations++;\n        \}\n        colour = float4(0);\n        surface = float4(0);\n\n        shadowIntensity = saturate(shadowIntensity);\n        return shadowIntensity * shadowIntensity * (3.0f - 2.0f * shadowIntensity);\n    \}\n\n\n    float computeShadow(\n            const float3 &rayDirection,\n            const float distanceToShadePoint,\n            float3 &rayOrigin,\n            float4 &colour,\n            float4 &surface)\n    \{\n        float distanceTravelled = 0;\n        int iterations = 0;\n        while (distanceTravelled < distanceToShadePoint && iterations < maxRaySteps / 2)\n        \{\n            float stepDistance = fabs(\n                getMinDistanceToObjectInScene(\n                    rayOrigin,\n                    distanceTravelled,\n                    colour,\n                    surface\n                ).x\n            );\n\n            if (stepDistance < hitTolerance * distanceTravelled)\n            \{\n                surface.z /= pow(1.0f + distanceTravelled, 4);\n                return 0;\n            \}\n\n            rayOrigin += rayDirection * stepDistance;\n            distanceTravelled += stepDistance;\n            iterations++;\n        \}\n        colour = float4(0);\n        surface = float4(0);\n\n        return 1;\n    \}\n\n\n    float computeAmbientOcclusion(\n            const float3 &rayDirection,\n            const float3 &rayOrigin,\n            const float amount,\n            const int iterations,\n            float4 &colour,\n            float4 &surface)\n    \{\n        float occlusion = 0.0f;\n        float occlusionScaleFactor = 1.0f;\n        for(int iteration=0; iteration < iterations; iteration++)\n        \{\n            float stepDistance = 0.001f + 0.15f * float(iteration) / 4.0f;\n            float distanceToClosestObject = fabs(getMinDistanceToObjectInScene(\n                rayOrigin + stepDistance * rayDirection,\n                1.0f,\n                colour,\n                surface\n            ).x);\n            occlusion += (stepDistance - distanceToClosestObject) * occlusionScaleFactor;\n            occlusionScaleFactor *= 0.95;\n        \}\n\n        return (\n            amount\n            * saturate(0.5f + 0.5f * rayDirection.y)  // ambient\n            * saturate(1.0f - 1.5f * occlusion)       // occlusion\n        );\n    \}\n\n\n    float2 lightIntensityOnSurface(\n            const float3 &pointOnSurface,\n            const float3 &surfaceNormal,\n            const float3 &light,\n            const int lightType,\n            const float intensity,\n            const float falloff,\n            const float shadow_hardness,\n            float4 &hitColour,\n            float4 &hitSurface)\n    \{\n        int absLightType = abs(lightType);\n        if (absLightType == 3)\n        \{\n            float2 result = float2(\n                1.0f,\n                computeAmbientOcclusion(\n                    surfaceNormal,\n                    pointOnSurface,\n                    intensity,\n                    (int) light.x,\n                    hitColour,\n                    hitSurface\n                )\n            );\n            hitSurface = float4(0);\n            hitColour = float4(0);\n            return result;\n        \}\n\n        float distanceToLight;\n        float3 lightDirection;\n        float intensityAtPosition = getLightData(\n            pointOnSurface,\n            surfaceNormal,\n            light,\n            absLightType,\n            intensity,\n            falloff,\n            maxRayDistance,\n            distanceToLight,\n            lightDirection\n        );\n        float3 surfaceOffset = surfaceOffsetPoint(\n            pointOnSurface,\n            lightDirection,\n            surfaceNormal,\n            shadowBias,\n            hitTolerance \n        );\n        lightDirection = normalize(lightDirection);\n\n        float normalFactor = dot(surfaceNormal, lightDirection);\n\n        float shadowIntensityAtPosition;\n        if (lightType < 0)\n        \{\n            shadowIntensityAtPosition = computeSoftShadow(\n                lightDirection,\n                distanceToLight,\n                shadow_hardness,\n                surfaceOffset,\n                hitColour,\n                hitSurface\n            );\n        \}\n        else\n        \{\n            shadowIntensityAtPosition = computeShadow(\n                lightDirection,\n                distanceToLight,\n                surfaceOffset,\n                hitColour,\n                hitSurface\n            );\n        \}\n\n        return saturate(\n            normalFactor * float2(intensityAtPosition, shadowIntensityAtPosition)\n        );\n    \}\n\n\n    /**\n     * Get the intensity of the light on the surface of an object\n     */\n    float computeLightIntensityOnSurface(\n            const float3 &pointOnSurface,\n            const float3 &surfaceNormal,\n            const float4 &surfaceColour,\n            const float4 &surface,\n            const float3 &seed,\n            float4 &lightColour)\n    \{\n        float2 lightIntensity = float2(surface.z, 0);\n        lightColour = surface.z * surfaceColour;\n\n        float2 currentLightIntensity;\n        for (int i=0; i < lightTextureWidth; i++)\n        \{\n            float4 hitSurface = float4(0);\n            float4 hitColour = float4(0);\n\n            SampleType(lights) light = lights(i, 0);\n            SampleType(lightProperties) lightProperty = lightProperties(i, 0);\n            SampleType(lightProperties1) lightProperty1 = lightProperties1(i, 0);\n\n            int lightType = (int) lightProperty.w;\n            if (lightType == 0)\n            \{\n                currentLightIntensity = float2(light.w, 1);\n            \}\n            else\n            \{\n                currentLightIntensity = lightIntensityOnSurface(\n                    pointOnSurface,\n                    surfaceNormal,\n                    float3(light.x, light.y, light.z),\n                    lightType,\n                    light.w,\n                    lightProperty1.y,\n                    lightProperty1.x,\n                    hitColour,\n                    hitSurface\n                );\n                lightColour += hitSurface.z * hitColour;\n                lightIntensity += float2(hitSurface.z, 1.0f);\n            \}\n            lightColour += currentLightIntensity.x * currentLightIntensity.y * float4(\n                lightProperty.x,\n                lightProperty.y,\n                lightProperty.z,\n                0.0f\n            );\n            lightIntensity += currentLightIntensity;\n        \}\n\n        const float diffuse = saturate(1.0f - surface.x - surface.y);\n        if (diffuse > hitTolerance)\n        \{\n            const float4 hdriLightColour = readHDRILightValue(surfaceNormal);\n            lightColour += diffuse * hdriLightColour;\n            lightIntensity.x += diffuse * length(\n                float3(\n                    hdriLightColour.x,\n                    hdriLightColour.y,\n                    hdriLightColour.z\n                )\n            );\n        \}\n\n        lightColour = saturate(lightColour);\n        return saturate(lightIntensity.x * lightIntensity.y);\n    \}\n\n\n    float getHazeAmount(const float distance)\n    \{\n        return hazeAmount * saturate((distance - hazeStart) / hazeDistance);\n    \}\n\n\n    /**\n     * Estimate the surface normal at the closest point on the closest\n     * object to a point\n     *\n     * @arg point: The point near which to get the surface normal\n     *\n     * @returns: The normalized surface normal\n     */\n    float3 estimateSurfaceNormal(const float3 &point, const float pixelFootprint) \{\n        float4 colour;\n        float4 surface;\n\n        const float epsilon = hitTolerance;\n\n        const float3 offset0 = 0.5773f * float3(1, -1, -1);\n        const float3 offset1 = 0.5773f * float3(-1, -1, 1);\n        const float3 offset2 = 0.5773f * float3(-1, 1, -1);\n        const float3 offset3 = 0.5773f * float3(1, 1, 1);\n\n        return normalize(\n            offset0\n            * getMinDistanceToObjectInScene(\n                point + offset0 * epsilon,\n                pixelFootprint,\n                colour,\n                surface\n            ).x\n            + offset1\n            * getMinDistanceToObjectInScene(\n                point + offset1 * epsilon,\n                pixelFootprint,\n                colour,\n                surface\n            ).x\n            + offset2\n            * getMinDistanceToObjectInScene(\n                point + offset2 * epsilon,\n                pixelFootprint,\n                colour,\n                surface\n            ).x\n            + offset3\n            * getMinDistanceToObjectInScene(\n                point + offset3 * epsilon,\n                pixelFootprint,\n                colour,\n                surface\n            ).x\n        );\n    \}\n\n\n    /**\n     * March a ray through the scene\n     *\n     * @returns: The ray colour\n     */\n    float4 marchRay(\n            const float3 &rayOrigin,\n            const float3 &rayDirection,\n            const int numBounces,\n            const float rayDistance,\n            const float3 &seed)\n    \{\n        const int lastRay = min(MAX_RAYS_PER_SUBPIXEL, maxRaysPerSubPixel);\n\n        // rayOrigin, rayDirection, rayIntensity, index of refraction\n        float rays\[MAX_RAYS_PER_SUBPIXEL]\[3 + 3 + 1 + 1];\n        rays\[0]\[0] = rayOrigin.x;\n        rays\[0]\[1] = rayOrigin.y;\n        rays\[0]\[2] = rayOrigin.z;\n\n        rays\[0]\[3] = rayDirection.x;\n        rays\[0]\[4] = rayDirection.y;\n        rays\[0]\[5] = rayDirection.z;\n\n        rays\[0]\[6] = 1.0f;\n\n        rays\[0]\[7] = refractiveIndex;\n\n        int numRays = 1;\n        int currentRayIndex = 0;\n\n        float4 colour;\n        float4 surface;\n\n        float4 rayColour = float4(0);\n        float4 lightColour = float4(0);\n\n        float lastStepDistance = 1.0f;\n\n        float id = 0.0f;\n\n        int bounces = 0;\n        int iterations = 1;\n        while (currentRayIndex < numRays)\n        \{\n            float lightIntensity = 1;\n\n            float distanceTravelled = 0;\n\n            float3 origin = float3(\n                rays\[currentRayIndex]\[0],\n                rays\[currentRayIndex]\[1],\n                rays\[currentRayIndex]\[2]\n            );\n            const float3 direction = float3(\n                rays\[currentRayIndex]\[3],\n                rays\[currentRayIndex]\[4],\n                rays\[currentRayIndex]\[5]\n            );\n            const float rayIntensity = rays\[currentRayIndex]\[6];\n\n            bool madeContact = false;\n\n            while (distanceTravelled < rayDistance && iterations <= maxRaySteps)\n            \{\n                const float2 result = getMinDistanceToObjectInScene(\n                    origin,\n                    distanceTravelled,\n                    colour,\n                    surface\n                );\n                const float signedStepDistance = result.x;\n                const float stepDistance = fabs(signedStepDistance);\n\n                distanceTravelled += stepDistance;\n                origin += direction * stepDistance;\n\n                if (stepDistance < hitTolerance * distanceTravelled)\n                \{\n                    if (bounces == 0)\n                    \{\n                        id = result.y;\n                    \}\n\n                    const float3 surfacePosition = origin - direction * hitTolerance;\n                    float3 surfaceNormal = sign(lastStepDistance) * estimateSurfaceNormal(\n                        surfacePosition,\n                        distanceTravelled\n                    );\n\n                    if (surface.w > 0.0f)\n                    \{\n                        surfaceNormal = roughen(\n                            surfaceNormal,\n                            surface.w,\n                            (iterations * distanceTravelled + stepDistance)\n                            * fabs(surfaceNormal) * seed\n                        );\n                    \}\n\n                    if (outputType > 0)\n                    \{\n                        if (outputType == 1)\n                        \{\n                            return float4(\n                                surfacePosition.x,\n                                surfacePosition.y,\n                                surfacePosition.z,\n                                id\n                            );\n                        \}\n                        if (outputType == 2)\n                        \{\n                            return float4(\n                                surfaceNormal.x,\n                                surfaceNormal.y,\n                                surfaceNormal.z,\n                                id\n                            );\n                        \}\n                        if (outputType == 3)\n                        \{\n                            return float4(\n                                distanceTravelled,\n                                0,\n                                0,\n                                id\n                            );\n                        \}\n                    \}\n                    bounces++;\n\n                    lightIntensity = computeLightIntensityOnSurface(\n                        origin,\n                        surfaceNormal,\n                        colour,\n                        surface,\n                        seed,\n                        lightColour\n                    );\n\n                    rayColour = blend(\n                        iterGlowColour,\n                        blend(\n                            hazeColour,\n                            blend(\n                                lightColour * colour,\n                                rayColour,\n                                rayIntensity * (1 - surface.x - surface.y) * lightIntensity\n                            ),\n                            getHazeAmount(distanceTravelled)\n                        ),\n                        saturate(iterGlowAmount * iterations)\n                    );\n\n                    if (bounces >= numBounces)\n                    \{\n                        rayColour.w = id;\n                        return rayColour;\n                    \}\n\n                    const float incidentRefractiveIndex = rays\[currentRayIndex]\[7];\n                    const float refractedRefractiveIndex = colour.w;\n                    const float reflectivity = schlickReflectionCoefficient(\n                        direction,\n                        surfaceNormal,\n                        incidentRefractiveIndex,\n                        refractedRefractiveIndex\n                    );\n                    const float refraction = saturate(surface.y * (1 - reflectivity));\n                    float intensity = rayIntensity * refraction;\n                    float reflection = surface.x;\n\n                    if (surface.y > 0.0f && numRays < lastRay && intensity > hitTolerance)\n                    \{\n                        reflection = clamp(reflection + reflectivity, 0.0f, 1.0f - refraction);\n\n                        const float3 refractedDirection = refractRayThroughSurface(\n                            direction,\n                            surfaceNormal,\n                            incidentRefractiveIndex,\n                            refractedRefractiveIndex\n                        );\n                        const float3 refractedOrigin = offsetPoint(\n                            surfacePosition,\n                            refractedDirection - surfaceNormal,\n                            2.0f * hitTolerance + stepDistance\n                        );\n\n                        rays\[numRays]\[0] = refractedOrigin.x;\n                        rays\[numRays]\[1] = refractedOrigin.y;\n                        rays\[numRays]\[2] = refractedOrigin.z;\n\n                        rays\[numRays]\[3] = refractedDirection.x;\n                        rays\[numRays]\[4] = refractedDirection.y;\n                        rays\[numRays]\[5] = refractedDirection.z;\n\n                        rays\[numRays]\[6] = intensity;\n\n                        rays\[numRays]\[7] = refractedRefractiveIndex;\n\n                        numRays++;\n                    \}\n\n                    intensity = rayIntensity * reflection;\n                    if (reflection > 0.0f && numRays < lastRay && intensity > hitTolerance)\n                    \{\n                        const float3 reflectedDirection = reflectRayOffSurface(\n                            direction,\n                            surfaceNormal\n                        );\n                        const float3 reflectedOrigin = offsetPoint(\n                            origin,\n                            reflectedDirection + surfaceNormal,\n                            hitTolerance\n                        );\n\n                        rays\[numRays]\[0] = reflectedOrigin.x;\n                        rays\[numRays]\[1] = reflectedOrigin.y;\n                        rays\[numRays]\[2] = reflectedOrigin.z;\n\n                        rays\[numRays]\[3] = reflectedDirection.x;\n                        rays\[numRays]\[4] = reflectedDirection.y;\n                        rays\[numRays]\[5] = reflectedDirection.z;\n\n                        rays\[numRays]\[6] = intensity;\n\n                        rays\[numRays]\[7] = incidentRefractiveIndex;\n\n                        numRays++;\n                    \}\n\n                    madeContact = true;\n                    break;\n                \}\n\n                lastStepDistance = signedStepDistance;\n                iterations++;\n            \}\n\n            if (outputType > 0)\n            \{\n                return float4(0);\n            \}\n\n            if (!madeContact)\n            \{\n                rayColour = blend(\n                    blend(\n                        iterGlowColour,\n                        blend(\n                            hazeColour,\n                            saturate(readHDRIValue(direction)),\n                            getHazeAmount(distanceTravelled)\n                        ),\n                        saturate(iterGlowAmount * iterations)\n                    ),\n                    rayColour,\n                    rayIntensity\n                );\n            \}\n\n            currentRayIndex++;\n        \}\n\n        rayColour.w = (bounces > 0) * id;\n        return rayColour;\n    \}\n\n\n    /**\n     * Compute a raymarched pixel value\n     */\n    void process(int2 pos)\n    \{\n        SampleType(noise) seed = noise();\n\n        float4 resultPixel = float4(0);\n\n        float2 pixelLocation = float2(pos.x, pos.y);\n\n        float2 pixelOffset;\n        for (\n            pixelOffset.x = 0.0f;\n            pixelOffset.x < 1.0f;\n            pixelOffset.x += subdividedPixelSize\n        ) \{\n            for (\n                pixelOffset.y = 0.0f;\n                pixelOffset.y < 1.0f;\n                pixelOffset.y += subdividedPixelSize\n            ) \{\n                // Generate a ray from the camera\n                float3 rayOrigin;\n                float3 rayDirection;\n                createCameraRay(\n                    cameraWorldMatrix,\n                    inverseCameraProjectionMatrix,\n                    pixelsToUV(\n                        pixelLocation + pixelOffset,\n                        float2(formatWidth, formatHeight)\n                    ),\n                    rayOrigin,\n                    rayDirection\n                );\n\n                resultPixel += marchRay(\n                    rayOrigin,\n                    rayDirection,\n                    bouncesPerRay,\n                    maxRayDistance,\n                    float3(seed.x, seed.y, seed.z)\n                );\n            \}\n        \}\n\n        dst() = resultPixel / numSubPixels;\n    \}\n\};\n"
  rebuild ""
  "RayMarchKernel_Focal Length" {{parent.DummyCam.focal}}
  "RayMarchKernel_Horizontal Aperture" {{parent.DummyCam.haperture}}
  "RayMarchKernel_Near Plane" {{parent.DummyCam.near}}
  "RayMarchKernel_Far Plane" {{parent.DummyCam.far}}
  "RayMarchKernel_Camera World Matrix" {
      {{parent.DummyCam.world_matrix.0} {parent.DummyCam.world_matrix.1} {parent.DummyCam.world_matrix.2} {parent.DummyCam.world_matrix.3}}
      {{parent.DummyCam.world_matrix.4} {parent.DummyCam.world_matrix.5} {parent.DummyCam.world_matrix.6} {parent.DummyCam.world_matrix.7}}
      {{parent.DummyCam.world_matrix.8} {parent.DummyCam.world_matrix.9} {parent.DummyCam.world_matrix.10} {parent.DummyCam.world_matrix.11}}
      {{parent.DummyCam.world_matrix.12} {parent.DummyCam.world_matrix.13} {parent.DummyCam.world_matrix.14} {parent.DummyCam.world_matrix.15}}
    }
  "RayMarchKernel_Screen Width" {{parent.resolution_dot.width}}
  "RayMarchKernel_Screen Height" {{parent.resolution_dot.height}}
  "RayMarchKernel_HDRI Offset Angle" {{parent.hdri_offset_angle}}
  "RayMarchKernel_HDRI Width" {{parent.hdri_dot.width}}
  "RayMarchKernel_HDRI Height" {{parent.hdri_dot.height}}
  "RayMarchKernel_HDRI Lighting Gain" {{parent.hdri_lighting_gain}}
  "RayMarchKernel_HDRI Shadow Hardness" {{parent.hdri_shadow_hardness}}
  "RayMarchKernel_Soften HDRI Shadows" {{"parent.soften_shadows ? -1 : 1"}}
  "RayMarchKernel_HDRI Lighting Width" {{parent.hdri_light_dot.width}}
  "RayMarchKernel_HDRI Lighting Height" {{parent.hdri_light_dot.height}}
  "RayMarchKernel_Pixel Subdivisions" {{parent.pixel_subdivisions}}
  "RayMarchKernel_Max Rays Per Subpixel" {{parent.max_rays_per_subpixel}}
  "RayMarchKernel_Max Bounces" {{parent.max_bounces}}
  "RayMarchKernel_Max Ray Distance" {{parent.ray_distance}}
  "RayMarchKernel_Max Ray Steps" {{parent.max_ray_steps}}
  "RayMarchKernel_Hit Tolerance" {{parent.hit_tolerance}}
  "RayMarchKernel_Shadow Bias" {{parent.shadow_bias}}
  "RayMarchKernel_Index of Refraction" {{parent.refractive_index}}
  "RayMarchKernel_Object Texture Width" {{parent.obj_dot.width}}
  "RayMarchKernel_Light Texture Width" {{parent.light_dot.width}}
  "RayMarchKernel_Haze Amount" {{parent.haze}}
  "RayMarchKernel_Haze Start" {{parent.haze_start}}
  "RayMarchKernel_Haze Distance" {{parent.haze_distance}}
  "RayMarchKernel_Haze Colour" {{parent.haze_colour.r} {parent.haze_colour.g} {parent.haze_colour.b} 0}
  "RayMarchKernel_Iter Glow Amount" {{parent.iter_glow}}
  "RayMarchKernel_Iter Glow Colour" {{parent.iter_glow_colour.r} {parent.iter_glow_colour.g} {parent.iter_glow_colour.b} 0}
  "RayMarchKernel_Output Type" {{parent.output_type}}
  format "2048 1024 0 0 2048 1024 1 2K_LatLong"
  rebuild_finalise ""
  name BlinkRayMarcher
  xpos 1661
  ypos -461
 }
 Reformat {
  name Reformat1
  xpos 1661
  ypos -400
 }
 Output {
  name Output1
  xpos 1661
  ypos -122
 }
end_group
set N5f345600 [stack 0]
push $N5f345600
HueShift {
 inputs 1+1
 color_saturation 0.82
 hue_rotation -30
 name HueShift3
 xpos 180
 ypos 590
 disable true
}
Write {
 channels rgba
 file /home/ob1/software/nuke/dev/raymarch/images/snowman/snowman_test_0_depth.####.exr
 file_type exr
 write_ACES_compliant_EXR true
 first_part rgba
 checkHashOnRead false
 version 21
 in_colorspace scene_linear
 out_colorspace scene_linear
 name Write3
 xpos 180
 ypos 655
}
Read {
 inputs 0
 file_type exr
 file /home/ob1/software/nuke/dev/raymarch/images/snowman/snowman_test_0_depth.####.exr
 format "640 480 0 0 640 480 1 PC_Video"
 last 63
 origlast 63
 origset true
 name Read4
 xpos 1000
 ypos 379
}
Read {
 inputs 0
 file_type exr
 file /home/ob1/software/nuke/dev/raymarch/images/snowman/snowman_test_0.####.exr
 format "640 480 0 0 640 480 1 PC_Video"
 last 63
 origlast 63
 origset true
 name Read9
 xpos 1170
 ypos 283
}
ShuffleCopy {
 inputs 2
 in rgb
 alpha alpha2
 black red
 out2 depth
 name ShuffleCopy1
 xpos 1170
 ypos 409
}
MotionBlur {
 shutterSamples 10
 shutterTime 0.5
 motionEstimation Regularized
 vectorDetailReg 1
 name MotionBlur1
 xpos 1170
 ypos 517
}
ZDefocus2 {
 math depth
 center 9.25
 focal_point {322 349}
 max_size 16
 legacy_resize_mode false
 show_legacy_resize_mode false
 name ZDefocus1
 xpos 1170
 ypos 596
}
Write {
 channels rgba
 file /home/ob1/software/nuke/dev/raymarch/images/snowman/snowman.mov
 file_type mov
 mov64_format "mov (QuickTime / MOV)"
 mov64_codec h264
 mov_prores_codec_profile "ProRes 4:4:4:4 12-bit"
 mov64_pixel_format {{0}}
 mov64_quality High
 mov64_gop_size 12
 mov64_b_frames 0
 mov64_bitrate 28000
 mov64_bitrate_tolerance 0
 mov64_quality_min 1
 mov64_quality_max 3
 checkHashOnRead false
 version 1
 name Write1
 xpos 1170
 ypos 684
}
Read {
 inputs 0
 file_type mov
 file /home/ob1/software/nuke/dev/raymarch/images/snowman/snowman.mov
 format "640 480 0 0 640 480 1 PC_Video"
 last 63
 origlast 63
 origset true
 name Read2
 xpos 1533
 ypos 581
}
Viewer {
 frame 33
 frame_range 1-63
 name Viewer1
 xpos 454
 ypos 921
}
