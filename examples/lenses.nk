#! /usr/local/Nuke13.2v2/libnuke-13.2.2.so -nx
#write_info Write1 file:"" format:"1280 720 1" chans:":rgba.red:rgba.green:rgba.blue:rgba.alpha:variance.red:variance.green:variance.blue:variance.num_paths:" framerange:"1001 1111" fps:"0" colorspace:"default (linear)" datatype:"16 bit half" transfer:"unknown" views:"main" colorManagement:"Nuke"
version 13.2 v2
define_window_layout_xml {<?xml version="1.0" encoding="UTF-8"?>
<layout version="1.0">
    <window x="1976" y="188" w="2504" h="1376" maximized="1" screen="0">
        <splitter orientation="1">
            <split size="40"/>
            <dock id="" hideTitles="1" activePageId="Toolbar.1">
                <page id="Toolbar.1"/>
            </dock>
            <split size="1841" stretch="1"/>
            <splitter orientation="2">
                <split size="783"/>
                <dock id="" activePageId="Viewer.1">
                    <page id="Viewer.1"/>
                </dock>
                <split size="550"/>
                <dock id="" activePageId="DAG.1" focus="true">
                    <page id="DAG.1"/>
                    <page id="Curve Editor.1"/>
                    <page id="DopeSheet.1"/>
                </dock>
            </splitter>
            <split size="615"/>
            <dock id="" activePageId="Properties.1">
                <page id="Properties.1"/>
                <page id="uk.co.thefoundry.backgroundrenderview.1"/>
            </dock>
        </splitter>
    </window>
</layout>
}
Root {
 inputs 0
 name /home/ob1/software/nuke/dev/raymarch/examples/lenses.nk
 frame 1002
 first_frame 1001
 last_frame 1111
 format "1280 720 0 0 1280 720 1 HD_720"
 colorManagement Nuke
 workingSpaceLUT linear
 monitorLut sRGB
 monitorOutLUT rec709
 int8Lut sRGB
 int16Lut sRGB
 logLut Cineon
 floatLut linear
}
BackdropNode {
 inputs 0
 name BackdropNode1
 label "Set the read and write nodes to point to the\nsame sequence after rendering the first frame\nwithout any 'previous' input, this will create a\nfeedback loop allowing for adaptive sampling\nand allowing you to save and watch back the\nimprovement over time. The alternative to\nthis method of adaptive sampling is to simply\nplug the path_march node into another path_march\nnode's 'previous' input, but you will only save the\nfinal output."
 xpos 889
 ypos 111
 bdwidth 256
 bdheight 331
}
Read {
 inputs 0
 file_type exr
 format "1280 720 0 0 1280 720 1 HD_720"
 first 1001
 last 1100
 origfirst 1001
 origlast 1100
 origset true
 name Read1
 xpos 943
 ypos 266
}
FrameHold {
 firstFrame {{frame-1}}
 name FrameHold1
 xpos 943
 ypos 380
}
CheckerBoard2 {
 inputs 0
 format "2048 1024 0 0 2048 1024 1 2K_LatLong"
 centerlinewidth 0
 name CheckerBoard1
 xpos 745
 ypos 198
}
Grade {
 white 0.05
 name Grade1
 xpos 745
 ypos 279
}
Axis2 {
 inputs 0
 rotate {0 -5 0}
 name Axis2
 xpos 593
 ypos 140
}
Camera3 {
 translate {0 0 6}
 focal 19.4
 name Camera1
 xpos 593
 ypos 228
}
Dot {
 name Dot4
 xpos 617
 ypos 335
}
sdf_material {
 inputs 0
 name sdf_material10
 tile_color 0xff
 xpos 415
 ypos 245
 colour {0 0 0}
 transmission 1
 absorption_colour {0 0.3 0.7}
 refractive_index 1.52
 scattering_coefficient 0.585
}
push 0
sdf_material {
 inputs 0
 name sdf_material11
 tile_color 0xff
 xpos 240
 ypos 243
 colour {0 0 0}
 transmission 1
 absorption_colour {0.1 0.7 0}
 refractive_index 1.96
 scattering_coefficient 0.99
}
push 0
sdf_material {
 inputs 0
 name sdf_material5
 xpos -72
 ypos 320
 emission 10
}
sdf_material {
 inputs 0
 name sdf_material13
 tile_color 0xff
 xpos -76
 ypos 163
 colour {0 0 0}
 transmission 1
 absorption_colour {0.5 0 0.7}
 refractive_index 1.5
 scattering_coefficient 0.31
}
set Nb16e1e0 [stack 0]
push $Nb16e1e0
push 0
push 0
sdf_primitive {
 inputs 3
 name sdf_primitive15
 label cylinder
 xpos 79
 ypos 157
 shape cylinder
 dimension_x 1
 dimension_y 1
 dimension_z 1
 edge_radius 0.08
 translate {0 0.5 0}
 rotate {90 0 0}
 blend_type "smooth subtraction"
 blend_strength 0.095
}
push 0
sdf_primitive {
 inputs 3
 name sdf_primitive14
 label "rectangular prism"
 xpos 79
 ypos 233
 shape "rectangular prism"
 dimension_x 1
 dimension_y 2
 dimension_z 1
 edge_radius 0.08
 translate {0.5 0 0}
 rotate {0 0 90}
 blend_type "smooth subtraction"
 blend_strength 0.095
}
push 0
sdf_primitive {
 inputs 3
 name sdf_primitive5
 label sphere
 xpos 79
 ypos 314
 dimension_x 0.3
 translate {-2 0 0}
 blend_type union
}
sdf_primitive {
 inputs 3
 name sdf_primitive17
 label "cut sphere"
 xpos 240
 ypos 314
 shape "cut sphere"
 dimension_x 1
 dimension_y -0.7
 edge_radius 0.055
 rotate {0 0 -90}
 blend_type "smooth intersection"
 blend_strength 0.095
}
sdf_primitive {
 inputs 3
 name sdf_primitive11
 label "cut sphere"
 xpos 415
 ypos 314
 shape "cut sphere"
 dimension_x 1
 dimension_y -0.5
 edge_radius 0.07
 translate {2.5 0 0}
 rotate {0 0 -90}
 blend_type "smooth intersection"
 blend_strength 0.095
}
Dot {
 name Dot3
 xpos 449
 ypos 450
}
path_march {
 inputs 4
 name path_march1
 xpos 745
 ypos 446
 min_paths_per_pixel {{"frame % 5 != 0"}}
 hit_tolerance 0.001
 max_bounces 8
 ray_distance 10
 seeds {{random()} {random()} {random()}}
 max_light_sampling_bounces 8
 light_sampling_bias 0.8
 absorption_colour {0.1 0.1 0.1}
 equiangular_samples 14
 format 0
}
Write {
 channels all
 file_type exr
 first_part rgba
 version 1
 name Write1
 xpos 745
 ypos 498
}
