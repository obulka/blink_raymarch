#! /usr/local/Nuke13.2v2/libnuke-13.2.2.so -nx
#write_info Write1 file:"/home/ob1/software/nuke/dev/raymarch/images/volumetric_caustics/volumetric_caustics.%04d.exr" format:"1280 720 1" chans:":rgba.red:rgba.green:rgba.blue:" framerange:"1001 1111" fps:"0" colorspace:"default (linear)" datatype:"16 bit half" transfer:"unknown" views:"main" colorManagement:"Nuke"
version 13.2 v2
define_window_layout_xml {<?xml version="1.0" encoding="UTF-8"?>
<layout version="1.0">
    <window x="1976" y="188" w="2504" h="1376" maximized="1" screen="0">
        <splitter orientation="1">
            <split size="40"/>
            <dock id="" hideTitles="1" activePageId="Toolbar.1">
                <page id="Toolbar.1"/>
            </dock>
            <split size="1841" stretch="1"/>
            <splitter orientation="2">
                <split size="783"/>
                <dock id="" activePageId="Viewer.1">
                    <page id="Viewer.1"/>
                </dock>
                <split size="550"/>
                <dock id="" activePageId="DAG.1" focus="true">
                    <page id="DAG.1"/>
                    <page id="Curve Editor.1"/>
                    <page id="DopeSheet.1"/>
                    <page id="DAG.2"/>
                </dock>
            </splitter>
            <split size="615"/>
            <dock id="" activePageId="Properties.1">
                <page id="Properties.1"/>
                <page id="uk.co.thefoundry.backgroundrenderview.1"/>
            </dock>
        </splitter>
    </window>
</layout>
}
Root {
 inputs 0
 name /home/ob1/software/nuke/dev/raymarch/examples/pathmarch_test.nk
 frame 1051
 first_frame 1001
 last_frame 1111
 format "1280 720 0 0 1280 720 1 HD_720"
 colorManagement Nuke
 workingSpaceLUT linear
 monitorLut sRGB
 monitorOutLUT rec709
 int8Lut sRGB
 int16Lut sRGB
 logLut Cineon
 floatLut linear
}
BackdropNode {
 inputs 0
 name Spheres
 xpos 46
 ypos -22
 bdwidth 268
 bdheight 404
}
Constant {
 inputs 0
 channels rgb
 color 0.1
 format "2048 1024 0 0 2048 1024 1 2K_LatLong"
 name Constant1
 xpos 730
 ypos 39
}
Group {
 inputs 0
 name Group5
 knobChanged "__import__('sdf.material', fromlist='SDFMaterial').SDFMaterial().handle_knob_changed()"
 tile_color 0xffffffff
 xpos 60
 ypos 154
 addUserKnob {20 User l "SDF Primitive"}
 addUserKnob {18 colour l "diffuse colour" t "The diffuse colour of the shape."}
 colour {1 1 1}
 addUserKnob {6 colour_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 diffuse_use_trap_colour l "use trap colour" t "When enabled the surface of the mandelbox will be coloured algorithmically, rather than using the specified surface colour. However, reducing the surface colour channels will remove colour from the corresponding trap colour channel." -STARTLINE}
 diffuse_use_trap_colour true
 addUserKnob {26 ""}
 addUserKnob {7 specular t "The amount of light that is reflected off the shape's surface. This plus 'transmission' should be less than or equal to one."}
 addUserKnob {7 specular_roughness l "specular roughness" t "The object's surface will scatter the specularly reflected light more the higher this value is."}
 addUserKnob {18 specular_colour l "specular colour" t "The specular colour."}
 specular_colour {1 1 1}
 addUserKnob {6 specular_colour_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 specular_use_trap_colour l "use trap colour" t "Use the trap colour for specualrly reflected light." -STARTLINE}
 specular_use_trap_colour true
 addUserKnob {26 ""}
 addUserKnob {7 transmission t "The amount of light that is transmitted through the shape's surface. This plus 'reflection' should be less than or equal to one."}
 addUserKnob {7 transmission_roughness l "transmission roughness" t "The object's surface will scatter the transmitted light more the higher this value is."}
 addUserKnob {7 refractive_index l "refractive index" t "The index of refraction of the object." R 1 4}
 refractive_index 1.33
 addUserKnob {6 do_refraction l "do refraction" -STARTLINE}
 do_refraction true
 addUserKnob {18 extinction_colour l "extinction colour" t "The colour absorbed as light travels through the material."}
 extinction_colour {1 1 0.7}
 addUserKnob {6 extinction_colour_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 extinction_use_trap_colour l "use trap colour" t "Absorb the trap colour during transmission." -STARTLINE}
 extinction_use_trap_colour true
 addUserKnob {7 extinction_coefficient l "extinction coefficient" t "The amount of energy lost as the light travells through the material."}
 addUserKnob {18 scattering_colour l "scattering colour"}
 scattering_colour {1 1 1}
 addUserKnob {6 scattering_colour_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 scattering_use_trap_colour l "use trap colour" t "Scatter the trap colour during transmission." -STARTLINE}
 scattering_use_trap_colour true
 addUserKnob {7 scattering_coefficient l "scattering coefficient"}
 addUserKnob {26 ""}
 addUserKnob {7 emission t "The amount of light emitted by the object. Increase the 'hdri lighting samples' to give it less noise. This is more of a placeholder for when the path marched version is released :)" R 0 100}
 emission 100
 addUserKnob {18 emission_colour l "emission colour" t "The emission colour."}
 emission_colour {1 0.8 0.5}
 addUserKnob {6 emission_colour_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 emission_use_trap_colour l "use trap colour" t "Use the trap colour for emitted light." -STARTLINE}
 emission_use_trap_colour true
 addUserKnob {26 div0 l "" +STARTLINE}
 addUserKnob {26 info l "" +STARTLINE T "v2.0.0 - (c) Owen Bulka - 2022"}
}
 Input {
  inputs 0
  name noise
  xpos 1170
  ypos 446
 }
add_layer {sdf_colour sdf_colour.colour_r sdf_colour.colour_g sdf_colour.colour_b sdf_colour.colour_a}
 Constant {
  inputs 0
  channels sdf_colour
  color {{parent.colour.r} {parent.colour.g} {parent.colour.b} {parent.specular_roughness}}
  format "1 1 0 0 1 1 1 1x1"
  name diffuse_colour
  xpos 510
  ypos 417
 }
 Dot {
  name Dot3
  xpos 544
  ypos 618
 }
add_layer {sdf_spec_colour sdf_spec_colour.r sdf_spec_colour.g sdf_spec_colour.b sdf_spec_colour.x}
 Constant {
  inputs 0
  channels sdf_spec_colour
  color {{parent.specular_colour.r} {parent.specular_colour.g} {parent.specular_colour.b} {parent.specular}}
  format "1 1 0 0 1 1 1 1x1"
  name spec_colour
  xpos 620
  ypos 417
 }
 Copy {
  inputs 2
  channels all
  name Copy8
  xpos 620
  ypos 674
 }
add_layer {sdf_trans_colour sdf_trans_colour.r sdf_trans_colour.g sdf_trans_colour.b sdf_trans_colour.x}
 Constant {
  inputs 0
  channels sdf_trans_colour
  color {{"parent.extinction_colour.r * parent.extinction_coefficient"} {"parent.extinction_colour.g * parent.extinction_coefficient"} {"parent.extinction_colour.b * parent.extinction_coefficient"} {parent.transmission}}
  format "1 1 0 0 1 1 1 1x1"
  name trans_colour
  xpos 730
  ypos 417
 }
 Copy {
  inputs 2
  channels all
  name Copy9
  xpos 730
  ypos 674
 }
add_layer {sdf_scattering_colour sdf_scattering_colour.red sdf_scattering_colour.green sdf_scattering_colour.blue}
 Constant {
  inputs 0
  channels sdf_scattering_colour
  color {{"parent.scattering_colour.r * parent.scattering_coefficient"} {"parent.scattering_colour.g * parent.scattering_coefficient"} {"parent.scattering_colour.b * parent.scattering_coefficient"} 0}
  format "1 1 0 0 1 1 1 1x1"
  name scattering_colour
  xpos 840
  ypos 417
 }
 Copy {
  inputs 2
  channels all
  name Copy1
  xpos 840
  ypos 674
 }
add_layer {sdf_emm_colour sdf_emm_colour.r sdf_emm_colour.g sdf_emm_colour.b sdf_emm_colour.x}
 Constant {
  inputs 0
  channels sdf_emm_colour
  color {{"parent.emission_colour.r * parent.emission"} {"parent.emission_colour.g * parent.emission"} {"parent.emission_colour.b * parent.emission"} {parent.emission}}
  format "1 1 0 0 1 1 1 1x1"
  name emm_colour
  xpos 950
  ypos 417
 }
 Copy {
  inputs 2
  channels all
  name Copy10
  xpos 950
  ypos 674
 }
add_layer {sdf_surface sdf_surface.reflection sdf_surface.transmission sdf_surface.emission sdf_surface.roughness}
 Constant {
  inputs 0
  channels sdf_surface
  color {{parent.refractive_index} {"(parent.diffuse_use_trap_colour ? 8192 : 0)  | (parent.specular_use_trap_colour ? 16384 : 0) | (parent.extinction_use_trap_colour ? 32768 : 0) | (parent.emission_use_trap_colour ? 65536 : 0) | (parent.scattering_use_trap_colour ? 131072 : 0) | (parent.do_refraction ? 262144 : 0)"} {parent.transmission_roughness} 0}
  format "1 1 0 0 1 1 1 1x1"
  name surface
  xpos 1060
  ypos 417
 }
 Copy {
  inputs 2
  channels all
  name Copy5
  xpos 1060
  ypos 674
 }
 Copy {
  inputs 2
  channels all
  name Copy3
  xpos 1170
  ypos 674
 }
 Output {
  name Output1
  xpos 1170
  ypos 830
 }
end_group
push 0
push 0
sdf_primitive {
 inputs 3
 name sdf_primitive2
 label sphere
 xpos 207
 ypos 148
 dimension_x 0.2
 translate {-1 0 0}
 blend_strength 0.095
}
Group {
 inputs 0
 name Group6
 tile_color 0xffffffff
 xpos 840
 ypos 350
 addUserKnob {20 User l "SDF Primitive"}
 addUserKnob {7 size R 1 300}
 size 9
 addUserKnob {4 type M {fBm turbulence}}
 type turbulence
 addUserKnob {13 translation}
 translation {25 1 0}
 addUserKnob {3 octaves}
 octaves 7
 addUserKnob {7 lacunarity R 1 10}
 lacunarity 2.5
 addUserKnob {7 gain}
 gain 0.495
 addUserKnob {7 gamma}
 gamma 0.42
 addUserKnob {7 black_point l "black point"}
 addUserKnob {7 white_point l "white point"}
 white_point 1
 addUserKnob {7 lift}
 addUserKnob {6 invert +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {6 diffuse +STARTLINE}
 addUserKnob {6 specular -STARTLINE}
 addUserKnob {6 transmission -STARTLINE}
 addUserKnob {6 emission -STARTLINE}
 addUserKnob {6 specular_roughness l "specular roughness" +STARTLINE}
 addUserKnob {6 transmission_roughness l "transmission roughness" -STARTLINE}
 addUserKnob {6 refractive_index l "refractive index" +STARTLINE}
 addUserKnob {6 scattering +STARTLINE}
 scattering true
 addUserKnob {6 extinction -STARTLINE}
 extinction true
 addUserKnob {26 div0 l "" +STARTLINE}
 addUserKnob {26 info l "" +STARTLINE T "v2.0.0 - (c) Owen Bulka - 2022"}
}
add_layer {sdf_noise_params0 sdf_noise_params0.options sdf_noise_params0.x sdf_noise_params0.y sdf_noise_params0.z}
 Constant {
  inputs 0
  channels sdf_noise_params0
  color {{"(parent.extinction << 11) | (parent.scattering << 10) | (parent.invert << 9) | (parent.specular_roughness << 8) | (parent.transmission_roughness << 7) | (parent.refractive_index << 6) | (parent.emission << 5) | (parent.transmission << 4) | (parent.specular << 3) | (parent.diffuse << 2) | (parent.type << 1) | 1"} {parent.translation.x} {parent.translation.y} {parent.translation.z}}
  format "1 1 0 0 1 1 1 1x1"
  name noise_params0
  xpos 841
  ypos 447
 }
 Dot {
  name Dot3
  xpos 875
  ypos 646
 }
add_layer {sdf_noise_params1 sdf_noise_params1.octaves sdf_noise_params1.lacunarity sdf_noise_params1.gain sdf_noise_params1.gamma}
 Constant {
  inputs 0
  channels sdf_noise_params1
  color {{parent.octaves} {parent.lacunarity} {parent.gain} {parent.gamma}}
  format "1 1 0 0 1 1 1 1x1"
  name noise_params1
  xpos 966
  ypos 447
 }
 Copy {
  inputs 2
  channels all
  name Copy8
  xpos 966
  ypos 714
 }
add_layer {sdf_noise_params2 sdf_noise_params2.size sdf_noise_params2.white_point sdf_noise_params2.black_point sdf_noise_params2.lift}
 Constant {
  inputs 0
  channels sdf_noise_params2
  color {{parent.size} {parent.white_point} {parent.black_point} {parent.lift}}
  format "1 1 0 0 1 1 1 1x1"
  name noise_params2
  xpos 1082
  ypos 449
 }
 Copy {
  inputs 2
  channels all
  name Copy1
  xpos 1082
  ypos 714
 }
 Output {
  name Output1
  xpos 1082
  ypos 826
 }
end_group
Dot {
 name Dot1
 xpos 874
 ypos 415
}
Group {
 inputs 0
 name sdf_light
 onCreate "__import__('sdf.light', fromlist='SDFLight').SDFLight().handle_node_created()"
 knobChanged "__import__('sdf.light', fromlist='SDFLight').SDFLight().handle_knob_changed()"
 tile_color 0xffcc80ff
 label point
 xpos 568
 ypos 198
 addUserKnob {20 User l "SDF LIght"}
 addUserKnob {4 type t "The type of light." M {ambient "ambient occlusion" directional point}}
 type point
 addUserKnob {13 dimension_x l position t "The position of the light." R 1 10}
 addUserKnob {7 dimension_y l iterations t "The number of iterations to compute." +HIDDEN R 1 10}
 dimension_y 5
 addUserKnob {7 intensity t "The intensity of the light." R 0 10}
 intensity 1
 addUserKnob {7 falloff t "The power of the light's intensity falloff. Two is physically accurate." R 0 5}
 falloff 2
 addUserKnob {18 colour t "The colour of the light."}
 colour {1 0.8 0.5}
 addUserKnob {6 colour_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {7 shadow_hardness l "shadow hardness" t "The hardness of the shadows, this is a non-physically accurate effect, but can look nice." +DISABLED R 1 100}
 shadow_hardness 1
 addUserKnob {6 soften_shadows l "soften shadows" t "Soften the shadows using a non-phisically accurate effect." -STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {26 info l "" +STARTLINE T "v2.0.0 - (c) Owen Bulka - 2022"}
}
 Input {
  inputs 0
  name siblings
  xpos 803
  ypos 30
 }
 Dot {
  name Dot1
  xpos 837
  ypos 488
 }
add_layer {sdf_light sdf_light.light_pos_dir_x sdf_light.light_pos_dir_y sdf_light.light_pos_dir_z sdf_light.intensity}
 Constant {
  inputs 0
  channels sdf_light
  color {{parent.dimension_y} 0 0 {parent.intensity}}
  format "1 1 0 0 1 1 1 1x1"
  name light1
  xpos 229
  ypos 143
 }
 Constant {
  inputs 0
  channels sdf_light
  color {{parent.dimension_x.x} {parent.dimension_x.y} {parent.dimension_x.z} {parent.intensity}}
  format "1 1 0 0 1 1 1 1x1"
  name light
  xpos 363
  ypos 11
 }
 Switch {
  inputs 2
  which {{"parent.type < 2"}}
  name Switch1
  xpos 363
  ypos 172
 }
 Dot {
  name Dot9
  xpos 397
  ypos 324
 }
add_layer {sdf_light_properties sdf_light_properties.colour_r sdf_light_properties.colour_g sdf_light_properties.colour_b sdf_light_properties.type}
 Constant {
  inputs 0
  channels sdf_light_properties
  color {{parent.colour.r} {parent.colour.g} {parent.colour.b} {"parent.soften_shadows ? -parent.type : parent.type"}}
  format "1 1 0 0 1 1 1 1x1"
  name light_props
  xpos 501
  ypos 11
 }
 Copy {
  inputs 2
  channels all
  name Copy1
  xpos 501
  ypos 380
 }
add_layer {sdf_light_properties1 sdf_light_properties1.shadow_hardness sdf_light_properties1.falloff}
 Constant {
  inputs 0
  channels sdf_light_properties1
  color {{parent.shadow_hardness} {parent.falloff} 0 0}
  format "1 1 0 0 1 1 1 1x1"
  name light_props1
  xpos 646
  ypos 12
 }
 Copy {
  inputs 2
  channels all
  name Copy2
  xpos 642
  ypos 380
 }
 Group {
  inputs 2
  name sdf_merge
  xpos 642
  ypos 484
  disable {{"!(\[exists parent.input0] && !(parent.input0.disable && !\[exists parent.input0.input0]))"}}
  addUserKnob {20 User}
  addUserKnob {26 warning l Warning: T "Only merge lights with lights, and primitives with primitives"}
 }
  Reformat {
   inputs 0
   type "to box"
   box_width 1
   box_height 1
   box_fixed true
   name Reformat1
   xpos -119
   ypos 440
  }
  Input {
   inputs 0
   name Input2
   xpos 158
   ypos -28
   number 1
  }
  Dot {
   name Dot2
   xpos 192
   ypos -2
  }
set N991ca60 [stack 0]
  Dot {
   name Dot3
   xpos 329
   ypos -2
  }
  Dot {
   name Dot4
   xpos 329
   ypos 391
  }
  Input {
   inputs 0
   name Input1
   xpos 0
   ypos -32
  }
  Dot {
   name Dot1
   xpos 34
   ypos -6
  }
set N99305f0 [stack 0]
  Dot {
   name Dot6
   xpos -98
   ypos -6
  }
  Dot {
   name Dot5
   xpos -98
   ypos 336
  }
push $N991ca60
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop3
   xpos 158
   ypos 69
  }
  Crop {
   box {0 0 {parent.Dot2.width} 1}
   name Crop4
   xpos 158
   ypos 95
  }
  Transform {
   translate {{parent.Dot1.width} 0}
   center {1 0.5}
   name Transform2
   xpos 158
   ypos 121
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop5
   xpos 158
   ypos 167
  }
push $N99305f0
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop6
   xpos 0
   ypos 66
  }
  Crop {
   box {0 0 {parent.Dot1.width} 1}
   name Crop7
   xpos 0
   ypos 92
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop8
   xpos 0
   ypos 164
  }
  Merge2 {
   inputs 2
   also_merge all
   name Merge1
   xpos 0
   ypos 262
   disable {{"\[exists parent.input1] ? 0:1"}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input1] ? 0:1"}}
   name Switch2
   xpos 0
   ypos 332
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:1"}}
   name Switch1
   xpos 0
   ypos 387
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:\[exists parent.input1] ? 0:1"}}
   name Switch3
   xpos 0
   ypos 456
  }
  Dot {
   name out_dot
   xpos 36
   ypos 518
  }
  Output {
   name Output1
   xpos 2
   ypos 661
  }
 end_group
 Output {
  name Output1
  xpos 642
  ypos 562
 }
end_group
Dot {
 name Dot2
 xpos 602
 ypos 310
}
push 0
CheckerBoard2 {
 inputs 0
 format "2048 1024 0 0 2048 1024 1 2K_LatLong"
 centerlinewidth 0
 name CheckerBoard1
 xpos 840
 ypos 39
}
set N8d46e60 [stack 0]
Dot {
 name Dot6
 xpos 764
 ypos 238
}
Reformat {
 format "2048 1024 0 0 2048 1024 1 2K_LatLong"
 name Reformat1
 xpos 730
 ypos 343
}
Axis2 {
 inputs 0
 rotate {0 -5 0}
 name Axis2
 xpos 470
 ypos 18
}
Camera3 {
 translate {0 0 6}
 focal 19.4
 name Camera1
 xpos 470
 ypos 114
}
Dot {
 name Dot4
 xpos 494
 ypos 330
}
Group {
 inputs 0
 name Group1
 knobChanged "__import__('sdf.material', fromlist='SDFMaterial').SDFMaterial().handle_knob_changed()"
 tile_color 0xffffffff
 xpos 61
 ypos 321
 addUserKnob {20 User l "SDF Primitive"}
 addUserKnob {18 colour l "diffuse colour" t "The diffuse colour of the shape."}
 colour {1 1 1}
 addUserKnob {6 colour_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 diffuse_use_trap_colour l "use trap colour" t "When enabled the surface of the mandelbox will be coloured algorithmically, rather than using the specified surface colour. However, reducing the surface colour channels will remove colour from the corresponding trap colour channel." -STARTLINE}
 diffuse_use_trap_colour true
 addUserKnob {26 ""}
 addUserKnob {7 specular t "The amount of light that is reflected off the shape's surface. This plus 'transmission' should be less than or equal to one."}
 addUserKnob {7 specular_roughness l "specular roughness" t "The object's surface will scatter the specularly reflected light more the higher this value is."}
 addUserKnob {18 specular_colour l "specular colour" t "The specular colour."}
 specular_colour {1 1 1}
 addUserKnob {6 specular_colour_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 specular_use_trap_colour l "use trap colour" t "Use the trap colour for specualrly reflected light." -STARTLINE}
 specular_use_trap_colour true
 addUserKnob {26 ""}
 addUserKnob {7 transmission t "The amount of light that is transmitted through the shape's surface. This plus 'reflection' should be less than or equal to one."}
 addUserKnob {7 transmission_roughness l "transmission roughness" t "The object's surface will scatter the transmitted light more the higher this value is."}
 addUserKnob {7 refractive_index l "refractive index" t "The index of refraction of the object." R 1 4}
 refractive_index 1.33
 addUserKnob {6 do_refraction l "do refraction" -STARTLINE}
 do_refraction true
 addUserKnob {18 extinction_colour l "extinction colour" t "The colour absorbed as light travels through the material."}
 extinction_colour {0.1 0.3 0.7}
 addUserKnob {6 extinction_colour_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 extinction_use_trap_colour l "use trap colour" t "Absorb the trap colour during transmission." -STARTLINE}
 extinction_use_trap_colour true
 addUserKnob {7 extinction_coefficient l "extinction coefficient" t "The amount of energy lost as the light travells through the material."}
 extinction_coefficient 0.745
 addUserKnob {18 scattering_colour l "scattering colour"}
 scattering_colour {0.2 0.2 1}
 addUserKnob {6 scattering_colour_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 scattering_use_trap_colour l "use trap colour" t "Scatter the trap colour during transmission." -STARTLINE}
 scattering_use_trap_colour true
 addUserKnob {7 scattering_coefficient l "scattering coefficient"}
 scattering_coefficient 1
 addUserKnob {26 ""}
 addUserKnob {7 emission t "The amount of light emitted by the object. Increase the 'hdri lighting samples' to give it less noise. This is more of a placeholder for when the path marched version is released :)" R 0 100}
 addUserKnob {18 emission_colour l "emission colour" t "The emission colour."}
 emission_colour {1 0.8 0.5}
 addUserKnob {6 emission_colour_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 emission_use_trap_colour l "use trap colour" t "Use the trap colour for emitted light." -STARTLINE}
 emission_use_trap_colour true
 addUserKnob {26 div0 l "" +STARTLINE}
 addUserKnob {26 info l "" +STARTLINE T "v2.0.0 - (c) Owen Bulka - 2022"}
}
 Input {
  inputs 0
  name noise
  xpos 1170
  ypos 446
 }
 Constant {
  inputs 0
  channels sdf_colour
  color {{parent.colour.r} {parent.colour.g} {parent.colour.b} {parent.specular_roughness}}
  format "1 1 0 0 1 1 1 1x1"
  name diffuse_colour
  xpos 510
  ypos 417
 }
 Dot {
  name Dot3
  xpos 544
  ypos 618
 }
 Constant {
  inputs 0
  channels sdf_spec_colour
  color {{parent.specular_colour.r} {parent.specular_colour.g} {parent.specular_colour.b} {parent.specular}}
  format "1 1 0 0 1 1 1 1x1"
  name spec_colour
  xpos 620
  ypos 417
 }
 Copy {
  inputs 2
  channels all
  name Copy8
  xpos 620
  ypos 674
 }
 Constant {
  inputs 0
  channels sdf_trans_colour
  color {{"parent.extinction_colour.r * parent.extinction_coefficient"} {"parent.extinction_colour.g * parent.extinction_coefficient"} {"parent.extinction_colour.b * parent.extinction_coefficient"} {parent.transmission}}
  format "1 1 0 0 1 1 1 1x1"
  name trans_colour
  xpos 730
  ypos 417
 }
 Copy {
  inputs 2
  channels all
  name Copy9
  xpos 730
  ypos 674
 }
 Constant {
  inputs 0
  channels sdf_scattering_colour
  color {{"parent.scattering_colour.r * parent.scattering_coefficient"} {"parent.scattering_colour.g * parent.scattering_coefficient"} {"parent.scattering_colour.b * parent.scattering_coefficient"} 0}
  format "1 1 0 0 1 1 1 1x1"
  name scattering_colour
  xpos 840
  ypos 417
 }
 Copy {
  inputs 2
  channels all
  name Copy1
  xpos 840
  ypos 674
 }
 Constant {
  inputs 0
  channels sdf_emm_colour
  color {{"parent.emission_colour.r * parent.emission"} {"parent.emission_colour.g * parent.emission"} {"parent.emission_colour.b * parent.emission"} {parent.emission}}
  format "1 1 0 0 1 1 1 1x1"
  name emm_colour
  xpos 950
  ypos 417
 }
 Copy {
  inputs 2
  channels all
  name Copy10
  xpos 950
  ypos 674
 }
 Constant {
  inputs 0
  channels sdf_surface
  color {{parent.refractive_index} {"(parent.diffuse_use_trap_colour ? 8192 : 0)  | (parent.specular_use_trap_colour ? 16384 : 0) | (parent.extinction_use_trap_colour ? 32768 : 0) | (parent.emission_use_trap_colour ? 65536 : 0) | (parent.scattering_use_trap_colour ? 131072 : 0) | (parent.do_refraction ? 262144 : 0)"} {parent.transmission_roughness} 0}
  format "1 1 0 0 1 1 1 1x1"
  name surface
  xpos 1060
  ypos 417
 }
 Copy {
  inputs 2
  channels all
  name Copy5
  xpos 1060
  ypos 674
 }
 Copy {
  inputs 2
  channels all
  name Copy3
  xpos 1170
  ypos 674
 }
 Output {
  name Output1
  xpos 1170
  ypos 830
 }
end_group
push 0
push 0
sdf_primitive {
 inputs 3
 name sdf_primitive3
 label sphere
 xpos 207
 ypos 315
 dimension_x 0.7
 translate {1 0 0}
 blend_strength 0.54
}
Dot {
 name Dot3
 xpos 335
 ypos 450
}
Group {
 inputs 6
 name Group2
 knobChanged "__import__('sdf.path_march', fromlist='PathMarch').PathMarch().handle_knob_changed()"
 xpos 730
 ypos 446
 addUserKnob {20 User l "Ray March"}
 addUserKnob {3 rays_per_pixel l "rays per pixel" t "The number of ray marched rays. These will be used as a starting point for the path marched rays."}
 rays_per_pixel 1
 addUserKnob {3 max_rays_to_spawn l "max spawned rays" t "The number of rays that can be spawned as the rays bounce around the scene."}
 max_rays_to_spawn 10
 addUserKnob {26 "" +STARTLINE}
 addUserKnob {3 min_paths_per_pixel l "min paths per pixel"}
 addUserKnob {3 max_paths_per_pixel l "max paths per pixel"}
 max_paths_per_pixel 2
 addUserKnob {26 "" +STARTLINE}
 addUserKnob {7 hit_tolerance l "hit tolerance" t "The ray will be considered to have hit an object when it is within this distance of its surface" R 1e-06 0.01}
 hit_tolerance 0.001
 addUserKnob {3 max_bounces l "max bounces" t "Limits the number of times the rays can intersect an object per subpixel."}
 max_bounces 8
 addUserKnob {7 ray_distance l "max ray distance" t "Each ray, once spawned is only allowed to travel this distance before it is culled." R 10 10000}
 ray_distance 100
 addUserKnob {3 max_ray_steps l "max ray steps" t "Limit the number of steps a ray can be marched before it is culled. Shadow rays are given half this number of steps."}
 max_ray_steps 1000
 addUserKnob {7 shadow_bias l "shadow bias" R 1 5}
 shadow_bias 1
 addUserKnob {13 seeds t "The seeds used to generate per-pixel noise."}
 seeds {1 2 3}
 addUserKnob {6 enable_dof l "enable depth of field" t "Enable the use of depth of field." +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {3 max_light_sampling_bounces l "max light sampling bounces"}
 max_light_sampling_bounces 4
 addUserKnob {7 light_sampling_bias l "light sampling bias"}
 light_sampling_bias 0.9
 addUserKnob {6 sample_hdri l "sample hdri during light sampling" t "Sample the HDRI during light sampling." +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {7 refractive_index l "refractive index" t "The index of refraction of the medium that the camera is currently in." R 1 4}
 refractive_index 1
 addUserKnob {18 extinction_colour l "extinction colour" t "The colour absorbed as light travels through the material that the camera is in."}
 extinction_colour {1 1 1}
 addUserKnob {7 extinction_coefficient l "extinction coefficient" t "The amount of energy lost as the light travells through the material." R 0 10}
 addUserKnob {18 scattering_colour l "scattering colour" t "The colour being scattered."}
 scattering_colour {1 1 1}
 addUserKnob {7 scattering_coefficient l "scattering coefficient"}
 addUserKnob {3 equiangular_samples l "equi-angular samples"}
 equiangular_samples 10
 addUserKnob {6 sample_hdri_equiangular l "sample hdri during equi-angular sampling" t "Sample the HDRI during equi-angular sampling." +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {7 hdri_offset_angle l "hdri offset angle" t "Rotate the hdri image by this amount around the y-axis." R 0 360}
 hdri_offset_angle 90
 addUserKnob {6 use_precomputed_irradiance l "use precomputed irradiance" +STARTLINE}
 use_precomputed_irradiance true
 addUserKnob {7 hdri_lighting_scale l "hdri lighting scale" R 0.1 1}
 hdri_lighting_scale 0.25
 addUserKnob {3 hdri_irradiance_samples l "hdri irradiance samples"}
 hdri_irradiance_samples 100
 addUserKnob {7 hdri_lighting_blur l "hdri lighting blur" R 0 10}
 hdri_lighting_blur 10
 addUserKnob {26 ""}
 addUserKnob {3 variance_range l "variance range"}
 variance_range 1
 addUserKnob {26 ""}
 addUserKnob {4 output_type l output t "The AOV type to output.\n\nThe stats AOV has the average number of steps in the red channel, the average number of bounces in the green channel, and the total number of paths that have been traced for a pixel in the blue channel." M {Beauty "World Position" "Local Position" Normal Depth Stats "" "" "" "" "" "" "" ""}}
 addUserKnob {41 format T format_.format}
 addUserKnob {6 latlong l LatLong t "Output a LatLong." +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {26 info l "" +STARTLINE T "v2.0.0 - (c) Owen Bulka - 2022"}
}
 BackdropNode {
  inputs 0
  name Lights
  xpos -1085
  ypos -1626
  bdwidth 410
  bdheight 851
 }
 BackdropNode {
  inputs 0
  name Objects
  xpos -605
  ypos -1626
  bdwidth 1939
  bdheight 850
 }
 Input {
  inputs 0
  name camera
  xpos 1390
  ypos -1570
  number 1
 }
 Camera {
  projection_mode {{"\[expression \[value the_cam]projection_mode(\[value the_frame])]"}}
  focal {{"\[expression \[value the_cam]focal(\[value the_frame])]"}}
  haperture {{"\[expression \[value the_cam]haperture(\[value the_frame])]"}}
  vaperture {{"\[expression \[value the_cam]vaperture(\[value the_frame])]"}}
  near {{"\[expression \[value the_cam]near(\[value the_frame])]"}}
  far {{"\[expression \[value the_cam]far(\[value the_frame])]"}}
  win_translate {{"\[expression \[value the_cam]win_translate.u(\[value the_frame])]"} {"\[expression \[value the_cam]win_translate.v(\[value the_frame])]"}}
  win_scale {{"\[expression \[value the_cam]win_scale.u(\[value the_frame])]"} {"\[expression \[value the_cam]win_scale.v(\[value the_frame])]"}}
  winroll {{"\[expression \[value the_cam]winroll(\[value the_frame])]"}}
  focal_point {{"\[expression \[value the_cam]focal_point(\[value the_frame])]"}}
  fstop {{"\[expression \[value the_cam]fstop(\[value the_frame])]"}}
  name DummyCam
  help "DummyCam by Adrian Pueyo\n\nCamera that apart from the matrices also grabs all the \"Projection\" values from the upstream camera that it's connected to. Turns into a default Camera if no Camera connected. Can also be used inside of groups and gizmos, as many levels deep as you want :D All using live and super fast TCL.\n\nUpdated v1.1: Now grabs the correct frame too (thanks Erwan Leroy for the idea).\n\nUpdated v1.3: Now accepts Nuke13's Camera3\n\nadrianpueyo.com, 2019-2021"
  onCreate "n = nuke.thisNode()\nfor k in \[\"projection_mode\",\"focal\",\"haperture\",\"vaperture\",\"near\",\"far\",\"win_translate\",\"win_scale\",\"winroll\",\"focal_point\",\"fstop\"]:\n    n\[k].setFlag(0x0000000010000000)"
  xpos 1400
  ypos -1470
  addUserKnob {20 DummyCam l Defaults}
  addUserKnob {43 the_cam +INVISIBLE}
  the_cam "\[\n#DummyCam v1.3 - Updated 5 May 2021.\nset starting_point \"this.input0\"\nset default \"this.d_\"\n\n# If cam has no inputs, return the default.\nif \{\[exists \$starting_point]\} \{\n    set x \[node \$starting_point]\n\} \{ \n    return \$default\n\}\n\nset finished 0\nwhile \{\$finished != 1\} \{\n\n    # First look for a Cam or Input or topnode.\n    while \{\[class \$x] != \"Camera3\" && \[class \$x] != \"Camera2\" && \[class \$x] != \"Camera\" && \[class \$x] != \"Input\" && \$x != \[topnode \$x]\} \{\n        set x \[node \$x.input0]\n    \}\n\n    # Then, check if node is a cam (and return), and otherwise, if it's an input, see if the parent exists and move to it.\n    if \{\[class \$x]==\"Camera3\"||\[class \$x]==\"Camera2\"||\[class \$x]==\"Camera\"\} \{\n        set x \[append x \".\"]\n        return \$x\n    \} \{ \n        if \{ \[class \$x]==\"Input\" \} \{ \n            set inp \"\$x.parent.input\"\n            set inputNum \[value \$x.number]\n            set inp \[append inp \$inputNum]\n            if \{ \[exists \$inp] \} \{\n                set x \[node \$inp]\n            \} \{ \n                set finished 1\n            \}\n        \} \{ \n            set finished 1\n        \}\n    \}\n\}\nreturn \$default\n]"
  addUserKnob {43 the_frame +INVISIBLE}
  the_frame "\[\nset the_camera \[string trimright \[value the_cam] .]\nif \{\[exists \$the_camera]\} \{\n    return \[value \$the_camera.frame]\n\} \{ \n    return \[frame]\n\}\n]"
  addUserKnob {4 d_projection_mode l projection M {perspective orthographic uv spherical ""}}
  addUserKnob {7 d_focal l "focal length" R 0 100}
  d_focal 50
  addUserKnob {7 d_haperture l "horiz aperture" R 0 50}
  d_haperture 24.576
  addUserKnob {7 d_vaperture l "vert aperture" R 0 50}
  d_vaperture 18.672
  addUserKnob {7 d_near l near R 0 10}
  d_near 0.1
  addUserKnob {7 d_far l far R 0 10000}
  d_far 10000
  addUserKnob {30 d_win_translate l "window translate"}
  addUserKnob {30 d_win_scale l "window scale"}
  d_win_scale {1 1}
  addUserKnob {7 d_winroll l "window roll" R 0 45}
  addUserKnob {7 d_focal_point l "focal distance" R 0 10}
  d_focal_point 2
  addUserKnob {7 d_fstop l fstop R 0 30}
  d_fstop 16
  addUserKnob {26 version l " " t "Updated 5 May 2021" T "<span style=\"color:#666\"><br/><b>DummyCam v1.3</b> - <a href=\"http://www.adrianpueyo.com\" style=\"color:#666;text-decoration: none;\">adrianpueyo.com</a>, 2019-2021</span>"}
 }
 Constant {
  inputs 0
  format "2 1 0 0 2 1 1 lights"
  name Constant3
  xpos 1500
  ypos -1545
 }
 Input {
  inputs 0
  name hdri
  xpos 1610
  ypos -1594
  number 2
 }
 Merge2 {
  inputs 2
  name Merge1
  xpos 1610
  ypos -1522
 }
 Reformat {
  type scale
  format "1024 778 0 0 1024 778 1 1K_Super_35(full-ap)"
  black_outside true
  name Reformat5
  xpos 1610
  ypos -1498
 }
 Dot {
  name hdri_dot
  xpos 1644
  ypos -1494
 }
set Na239830 [stack 0]
 Reformat {
  type scale
  scale {{"floor(min(parent.hdri_dot.height, parent.hdri_dot.width) * parent.hdri_lighting_scale) > 0 ? parent.hdri_lighting_scale : 1"}}
  resize fill
  name Reformat
  xpos 1720
  ypos -1498
 }
 Blur {
  size {{parent.hdri_lighting_blur}}
  name Blur2
  xpos 1720
  ypos -1456
 }
 BlinkScript {
  kernelSourceFile /home/ob1/software/nuke/dev/raymarch/src/blink/kernels/hdri_irradiance.blink
  recompileCount 123
  ProgramGroup 1
  KernelDescription "2 \"HDRIrradiance\" iterate pixelWise b6fe72538f3dbd7884a14fb1011ef4825fa74b73f7af466a4f5e515697872221 2 \"hdri\" Read Random \"dst\" Write Point 1 \"Samples\" Int 2 ZAAAADIAAAA= 1 \"_samples\" 2 1 3 \"__hdriPixelSize\" Float 2 1 AAAAAAAAAAA= \"__up\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"__sampleStep\" Float 2 1 AAAAAAAAAAA="
  kernelSource "#include \"math.h\"\n\n\nkernel HDRIrradiance : ImageComputationKernel<ePixelWise>\n\{\n    Image<eRead, eAccessRandom, eEdgeClamped> hdri; // the input image\n    Image<eWrite> dst; // the output image\n\n    param:\n        int2 _samples;\n\n    local:\n        float2 __hdriPixelSize;\n        float3 __up;\n        float2 __sampleStep;\n\n\n    /**\n     * In define(), parameters can be given labels and default values.\n     */\n    void define()\n    \{\n        defineParam(_samples, \"Samples\", int2(100, 50));\n    \}\n\n\n    /**\n     * The init() function is run before any calls to process().\n     * Local variables can be initialized here.\n     */\n    void init()\n    \{\n        __hdriPixelSize = float2(hdri.bounds.width() / (2.0f * PI), hdri.bounds.height() / PI);\n        __up = float3(0, 1, 0);\n\n        __sampleStep = float2(\n            2.0f * PI / (float) _samples.x,\n            PI / (2.0f * (float) _samples.y)\n        );\n    \}\n\n\n    /**\n     * Get the value of hdri the ray would hit at infinite distance\n     *\n     * @arg rayDirection: The direction of the ray.\n     *\n     * @returns: The colour of the pixel in the direction of the ray.\n     */\n    float4 readHDRIValue(float3 rayDirection)\n    \{\n        const float2 angles = cartesionUnitVectorToSpherical(rayDirection);\n\n        // Why does bilinear give nans? :(\n        return hdri(\n            round(__hdriPixelSize.x * angles.x) - 1,\n            round(hdri.bounds.height() - (__hdriPixelSize.y * angles.y)) - 1\n        );\n    \}\n\n\n    /**\n     * Compute the irradiance of a pixel.\n     *\n     * @arg pos: The x, and y location we are currently processing.\n     */\n    void process(int2 pos)\n    \{\n        const float2 uvPosition = pixelsToUV(\n            float2(pos.x, pos.y),\n            float2(hdri.bounds.width(), hdri.bounds.height())\n        );\n        const float3 direction = sphericalUnitVectorToCartesion(\n            uvPositionToAngles(uvPosition)\n        );\n\n        const float3 tangentRight = normalize(cross(__up, direction));\n        const float3 tangentUp = normalize(cross(direction, tangentRight));\n\n        float4 irradiance = float4(0);\n\n        for (float theta = 0.0f; theta < 2.0f * PI; theta += __sampleStep.x)\n        \{\n            for (float phi = PI / 2.0f; phi > 0.0f; phi -= __sampleStep.y)\n            \{\n                const float3 tangent = sphericalUnitVectorToCartesion(float2(theta, phi));\n                const float3 sampleDirection = (\n                    tangent.x * tangentRight\n                    + tangent.z * tangentUp\n                    + tangent.y * direction\n                );\n\n                irradiance += readHDRIValue(sampleDirection) * cos(phi) * sin(phi);\n            \}\n        \}\n\n        dst() = PI * irradiance / (float) (_samples.x * _samples.y);\n    \}\n\};\n"
  rebuild ""
  HDRIrradiance_Samples {{parent.hdri_irradiance_samples} {parent.hdri_irradiance_samples/2}}
  rebuild_finalise ""
  name HDRIrradiance
  xpos 1720
  ypos -1432
 }
 Reformat {
  type scale
  format "1024 778 0 0 1024 778 1 1K_Super_35(full-ap)"
  black_outside true
  name Reformat3
  xpos 1720
  ypos -1378
 }
 Dot {
  name Dot33
  xpos 1754
  ypos -558
 }
 Constant {
  inputs 0
  format "1 1 0 0 1 1 1 1x1"
  name Constant4
  xpos -1580
  ypos -1713
 }
 Dot {
  name Dot7
  xpos -1546
  ypos -1542
 }
set Na296d30 [stack 0]
 Dot {
  name Dot25
  xpos -1106
  ypos -1542
 }
set Na29bd20 [stack 0]
 Dot {
  name Dot15
  xpos -1106
  ypos -1446
 }
push $Na29bd20
 Input {
  inputs 0
  name lights
  xpos -1030
  ypos -1594
  number 4
 }
 Merge2 {
  inputs 2
  name light_merge
  xpos -1030
  ypos -1498
 }
 Group {
  inputs 2
  name light_input_protection
  xpos -1030
  ypos -1450
  disable {{"width > 1"}}
  addUserKnob {20 User}
  addUserKnob {26 warning l Warning: T "Only merge lights with lights, and primitives with primitives"}
 }
  Reformat {
   inputs 0
   type "to box"
   box_width 1
   box_height 1
   box_fixed true
   name Reformat1
   xpos -119
   ypos 440
  }
  Input {
   inputs 0
   name Input2
   xpos 158
   ypos -28
   number 1
  }
  Dot {
   name Dot2
   xpos 192
   ypos -2
  }
set Na2d8ae0 [stack 0]
  Dot {
   name Dot3
   xpos 329
   ypos -2
  }
  Dot {
   name Dot4
   xpos 329
   ypos 391
  }
  Input {
   inputs 0
   name Input1
   xpos 0
   ypos -32
  }
  Dot {
   name Dot1
   xpos 34
   ypos -6
  }
set Na2ec670 [stack 0]
  Dot {
   name Dot6
   xpos -98
   ypos -6
  }
  Dot {
   name Dot5
   xpos -98
   ypos 336
  }
push $Na2d8ae0
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop3
   xpos 158
   ypos 69
  }
  Crop {
   box {0 0 {parent.Dot2.width} 1}
   name Crop4
   xpos 158
   ypos 95
  }
  Transform {
   translate {{parent.Dot1.width} 0}
   center {1 0.5}
   name Transform2
   xpos 158
   ypos 121
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop5
   xpos 158
   ypos 167
  }
push $Na2ec670
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop6
   xpos 0
   ypos 66
  }
  Crop {
   box {0 0 {parent.Dot1.width} 1}
   name Crop7
   xpos 0
   ypos 92
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop8
   xpos 0
   ypos 164
  }
  Merge2 {
   inputs 2
   also_merge all
   name Merge1
   xpos 0
   ypos 262
   disable {{"\[exists parent.input1] ? 0:1"}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input1] ? 0:1"}}
   name Switch2
   xpos 0
   ypos 332
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:1"}}
   name Switch1
   xpos 0
   ypos 387
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:\[exists parent.input1] ? 0:1"}}
   name Switch3
   xpos 0
   ypos 456
  }
  Dot {
   name out_dot
   xpos 36
   ypos 518
  }
  Output {
   name Output1
   xpos 2
   ypos 661
  }
 end_group
 Dot {
  name light_dot
  xpos -996
  ypos -1302
 }
set N93124f0 [stack 0]
 Shuffle {
  in sdf_light_properties1
  blue green
  alpha green
  name light_props1
  xpos -810
  ypos -994
 }
 Dot {
  name Dot22
  xpos -776
  ypos -822
 }
push $N93124f0
 Shuffle {
  in sdf_light_properties
  name light_props
  xpos -920
  ypos -994
 }
 Dot {
  name Dot23
  xpos -886
  ypos -822
 }
push $N93124f0
 Shuffle {
  in sdf_light
  name light
  xpos -1030
  ypos -994
 }
 Dot {
  name Dot24
  xpos -996
  ypos -822
 }
push $Na29bd20
 Dot {
  name Dot16
  xpos -560
  ypos -1542
 }
set N9359290 [stack 0]
 Dot {
  name Dot36
  xpos 874
  ypos -1542
 }
 Input {
  inputs 0
  name noise
  xpos 950
  ypos -1594
  number 5
 }
 Merge2 {
  inputs 2
  name noise_merge
  xpos 950
  ypos -1498
 }
push $N9359290
 Input {
  inputs 0
  name scene
  xpos -484
  ypos -1594
 }
 Merge2 {
  inputs 2
  name object_merge
  xpos -484
  ypos -1498
 }
 Dot {
  name Dot37
  xpos -450
  ypos -1446
 }
set N938e1e0 [stack 0]
 Group {
  inputs 2
  name noise_sdf_merge
  xpos 950
  ypos -1450
  addUserKnob {20 User}
  addUserKnob {26 warning l Warning: T "Only merge lights with lights, and primitives with primitives"}
 }
  Reformat {
   inputs 0
   type "to box"
   box_width 1
   box_height 1
   box_fixed true
   name Reformat1
   xpos -119
   ypos 440
  }
  Input {
   inputs 0
   name Input2
   xpos 158
   ypos -28
   number 1
  }
  Dot {
   name Dot2
   xpos 192
   ypos -2
  }
set N93b0420 [stack 0]
  Dot {
   name Dot3
   xpos 329
   ypos -2
  }
  Dot {
   name Dot4
   xpos 329
   ypos 391
  }
  Input {
   inputs 0
   name Input1
   xpos 0
   ypos -32
  }
  Dot {
   name Dot1
   xpos 34
   ypos -6
  }
set N93c3fb0 [stack 0]
  Dot {
   name Dot6
   xpos -98
   ypos -6
  }
  Dot {
   name Dot5
   xpos -98
   ypos 336
  }
push $N93b0420
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop3
   xpos 158
   ypos 69
  }
  Crop {
   box {0 0 {parent.Dot2.width} 1}
   name Crop4
   xpos 158
   ypos 95
  }
  Transform {
   translate {{parent.Dot1.width} 0}
   center {1 0.5}
   name Transform2
   xpos 158
   ypos 121
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop5
   xpos 158
   ypos 167
  }
push $N93c3fb0
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop6
   xpos 0
   ypos 66
  }
  Crop {
   box {0 0 {parent.Dot1.width} 1}
   name Crop7
   xpos 0
   ypos 92
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop8
   xpos 0
   ypos 164
  }
  Merge2 {
   inputs 2
   also_merge all
   name Merge1
   xpos 0
   ypos 262
   disable {{"\[exists parent.input1] ? 0:1"}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input1] ? 0:1"}}
   name Switch2
   xpos 0
   ypos 332
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:1"}}
   name Switch1
   xpos 0
   ypos 387
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:\[exists parent.input1] ? 0:1"}}
   name Switch3
   xpos 0
   ypos 456
  }
  Dot {
   name out_dot
   xpos 36
   ypos 518
  }
  Output {
   name Output1
   xpos 2
   ypos 661
  }
 end_group
 Dot {
  name Dot35
  xpos 984
  ypos -1230
 }
set N9454660 [stack 0]
 Shuffle {
  in sdf_noise_params2
  name noise_params2
  xpos 1170
  ypos -994
 }
 Dot {
  name Dot28
  xpos 1204
  ypos -822
 }
push $N9454660
 Shuffle {
  in sdf_noise_params1
  name noise_params1
  xpos 1060
  ypos -994
 }
 Dot {
  name Dot26
  xpos 1094
  ypos -822
 }
push $N9454660
 Shuffle {
  in sdf_noise_params0
  name noise_params0
  xpos 950
  ypos -994
 }
 Dot {
  name Dot27
  xpos 984
  ypos -822
 }
push $N9359290
 Dot {
  name Dot1
  xpos -560
  ypos -1374
 }
push $N938e1e0
 Group {
  inputs 2
  name object_input_protection
  xpos -484
  ypos -1378
  disable {{"width > 1"}}
  addUserKnob {20 User}
  addUserKnob {26 warning l Warning: T "Only merge lights with lights, and primitives with primitives"}
 }
  Reformat {
   inputs 0
   type "to box"
   box_width 1
   box_height 1
   box_fixed true
   name Reformat1
   xpos -119
   ypos 440
  }
  Input {
   inputs 0
   name Input2
   xpos 158
   ypos -28
   number 1
  }
  Dot {
   name Dot2
   xpos 192
   ypos -2
  }
set N94bcb70 [stack 0]
  Dot {
   name Dot3
   xpos 329
   ypos -2
  }
  Dot {
   name Dot4
   xpos 329
   ypos 391
  }
  Input {
   inputs 0
   name Input1
   xpos 0
   ypos -32
  }
  Dot {
   name Dot1
   xpos 34
   ypos -6
  }
set N94d0700 [stack 0]
  Dot {
   name Dot6
   xpos -98
   ypos -6
  }
  Dot {
   name Dot5
   xpos -98
   ypos 336
  }
push $N94bcb70
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop3
   xpos 158
   ypos 69
  }
  Crop {
   box {0 0 {parent.Dot2.width} 1}
   name Crop4
   xpos 158
   ypos 95
  }
  Transform {
   translate {{parent.Dot1.width} 0}
   center {1 0.5}
   name Transform2
   xpos 158
   ypos 121
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop5
   xpos 158
   ypos 167
  }
push $N94d0700
  Crop {
   box {0 0 {Dot1.width+Dot2.width} 1}
   reformat true
   crop false
   name Crop6
   xpos 0
   ypos 66
  }
  Crop {
   box {0 0 {parent.Dot1.width} 1}
   name Crop7
   xpos 0
   ypos 92
  }
  Crop {
   box {0 0 {width} {height}}
   crop false
   name Crop8
   xpos 0
   ypos 164
  }
  Merge2 {
   inputs 2
   also_merge all
   name Merge1
   xpos 0
   ypos 262
   disable {{"\[exists parent.input1] ? 0:1"}}
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input1] ? 0:1"}}
   name Switch2
   xpos 0
   ypos 332
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:1"}}
   name Switch1
   xpos 0
   ypos 387
  }
  Switch {
   inputs 2
   which {{"\[exists parent.input0] ? 0:\[exists parent.input1] ? 0:1"}}
   name Switch3
   xpos 0
   ypos 456
  }
  Dot {
   name out_dot
   xpos 36
   ypos 518
  }
  Output {
   name Output1
   xpos 2
   ypos 661
  }
 end_group
 Dot {
  name obj_dot
  xpos -450
  ypos -1326
 }
set N95615c0 [stack 0]
 Shuffle {
  in sdf_surface
  name surface
  xpos 726
  ypos -994
 }
 Dot {
  name Dot2
  xpos 760
  ypos -822
 }
push $N95615c0
add_layer {sdf_shape_mods_1 sdf_shape_mods_1.elongation_x sdf_shape_mods_1.elongation_y sdf_shape_mods_1.elongation_z sdf_shape_mods_1.edge_radius}
 Shuffle {
  in sdf_shape_mods_1
  name shape_mods_1
  xpos 616
  ypos -994
 }
 Dot {
  name Dot12
  xpos 650
  ypos -822
 }
push $N95615c0
add_layer {sdf_shape_mods_0 sdf_shape_mods_0.repetion_x sdf_shape_mods_0.repetion_y sdf_shape_mods_0.repetion_z sdf_shape_mods_0.repetion_w}
 Shuffle {
  in sdf_shape_mods_0
  name shape_mods_0
  xpos 506
  ypos -994
 }
 Dot {
  name Dot3
  xpos 540
  ypos -822
 }
push $N95615c0
add_layer {sdf_shape sdf_shape.shape_type sdf_shape.shape_operations sdf_shape.num_children sdf_shape.blend_strength}
 Shuffle {
  in sdf_shape
  name shape
  xpos 396
  ypos -994
 }
 Dot {
  name Dot4
  xpos 430
  ypos -822
 }
push $N95615c0
 Shuffle {
  in sdf_scattering_colour
  name scattering_colour
  xpos 286
  ypos -994
 }
 Dot {
  name Dot38
  xpos 320
  ypos -822
 }
push $N95615c0
 Shuffle {
  in sdf_emm_colour
  name emm_colour
  xpos 176
  ypos -994
 }
 Dot {
  name Dot20
  xpos 210
  ypos -822
 }
push $N95615c0
 Shuffle {
  in sdf_trans_colour
  name trans_colour
  xpos 66
  ypos -994
 }
 Dot {
  name Dot19
  xpos 100
  ypos -822
 }
push $N95615c0
 Shuffle {
  in sdf_spec_colour
  name spec_colour
  xpos -44
  ypos -994
 }
 Dot {
  name Dot18
  xpos -10
  ypos -822
 }
push $N95615c0
 Shuffle {
  in sdf_colour
  name diff_colour
  xpos -154
  ypos -994
 }
 Dot {
  name Dot5
  xpos -120
  ypos -822
 }
push $N95615c0
add_layer {sdf_dimensions sdf_dimensions.dimension_x sdf_dimensions.dimension_y sdf_dimensions.dimension_z sdf_dimensions.dimension_w}
 Shuffle {
  in sdf_dimensions
  name dimensions
  xpos -264
  ypos -994
 }
 Dot {
  name Dot10
  xpos -230
  ypos -822
 }
push $N95615c0
add_layer {sdf_rotation_wall_thickness sdf_rotation_wall_thickness.rotation_x sdf_rotation_wall_thickness.rotation_y sdf_rotation_wall_thickness.rotation_z sdf_rotation_wall_thickness.wall_thickness}
 Shuffle {
  in sdf_rotation_wall_thickness
  name rotation_wall_thickness
  xpos -374
  ypos -994
 }
 Dot {
  name Dot9
  xpos -340
  ypos -822
 }
push $N95615c0
add_layer {sdf_position_scale sdf_position_scale.position_x sdf_position_scale.position_y sdf_position_scale.position_z sdf_position_scale.uniform_scale}
 Shuffle {
  in sdf_position_scale
  name position_scale
  xpos -484
  ypos -994
 }
 Dot {
  name Dot6
  xpos -450
  ypos -822
 }
push $Na239830
push $Na296d30
 Reformat {
  format {{{parent.format_.format}}}
  name Reformat2
  xpos -1580
  ypos -1498
 }
set N966bb60 [stack 0]
 Input {
  inputs 0
  name previous
  xpos -1470
  ypos -1618
  number 3
 }
 Merge2 {
  inputs 2
  name previous_merge
  xpos -1470
  ypos -1498
 }
 Dot {
  name Dot14
  xpos -1436
  ypos -1374
 }
set N9690b40 [stack 0]
add_layer {variance variance.red variance.green variance.blue variance.num_paths}
 Shuffle {
  in variance
  name Shuffle1
  xpos -1470
  ypos -1330
 }
push $N966bb60
 Invert {
  channels rgb
  name Invert2
  xpos -1580
  ypos -1306
 }
 Switch {
  inputs 2
  which {{"\[exists parent.input3]"}}
  name Switch2
  xpos -1470
  ypos -1306
 }
 Dot {
  name Dot13
  xpos -1436
  ypos -462
 }
push $N9690b40
 Dot {
  name Dot34
  xpos -1326
  ypos -1374
 }
 Dot {
  name Dot21
  xpos -1326
  ypos -606
 }
 Constant {
  inputs 0
  channels {rgba.red rgba.green rgba.blue -rgba.alpha}
  name format_
  xpos 1940
  ypos -633
 }
 Noise {
  output {rgba.red -rgba.green -rgba.blue -rgba.alpha}
  type turbulence
  size 1
  zoffset {{parent.seeds.x}}
  lacunarity 1.6
  center {512 389}
  name Noise1
  xpos 1940
  ypos -562
 }
 Noise {
  output {-rgba.red rgba.green -rgba.blue -rgba.alpha}
  type turbulence
  size 1
  zoffset {{parent.seeds.y}}
  center {512 389}
  name Noise2
  xpos 1940
  ypos -538
 }
 Noise {
  output {-rgba.red -rgba.green rgba.blue -rgba.alpha}
  type turbulence
  size 1
  zoffset {{parent.seeds.z}}
  lacunarity 2.14
  center {512 389}
  name Noise3
  xpos 1940
  ypos -514
 }
 Dot {
  name resolution_dot
  xpos 1974
  ypos -462
 }
 BlinkScript {
  inputs 23
  kernelSourceFile /home/ob1/software/nuke/dev/raymarch/src/blink/kernels/pathmarch.blink
  recompileCount 3111
  ProgramGroup 1
  KernelDescription "2 \"PathMarchKernel\" iterate pixelWise d6ad0aafc7d4da41d765b2316819d2958aa44ed3849ec03203284f63a8dfee6a 24 \"noise\" Read Point \"src\" Read Point \"variance\" Read Point \"hdri\" Read Random \"positions\" Read Random \"rotations\" Read Random \"dimensions\" Read Random \"diffusivities\" Read Random \"specularities\" Read Random \"transmittances\" Read Random \"emittances\" Read Random \"scatteringCoefficients\" Read Random \"shapeProperties\" Read Random \"shapeModParameters0\" Read Random \"shapeModParameters1\" Read Random \"surfaceProperties\" Read Random \"noiseParams0\" Read Random \"noiseParams1\" Read Random \"noiseParams2\" Read Random \"lights\" Read Random \"lightProperties\" Read Random \"lightProperties1\" Read Random \"irradiance\" Read Random \"dst\" Write Point 33 \"Focal Length\" Float 1 AABIQg== \"Horizontal Aperture\" Float 1 ppvEQQ== \"Near Plane\" Float 1 zczMPQ== \"Far Plane\" Float 1 AEAcRg== \"Camera World Matrix\" Float 16 AACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPw== \"Focal Distance\" Float 1 AACAQA== \"fstop\" Float 1 AACAQQ== \"Enable Depth Of Field\" Bool 1 AQ== \"Screen Width\" Float 1 AABwRQ== \"Screen Height\" Float 1 AAAHRQ== \"HDRI Offset Angle\" Float 1 AAAAAA== \"Use Precomputed Irradiance\" Bool 1 AQ== \"Num Rays Per Pixel\" Int 1 AQAAAA== \"Max Rays To Spawn On Impact\" Int 1 AQAAAA== \"Min Paths Per Pixel\" Int 1 AQAAAA== \"Max Paths Per Pixel\" Int 1 AQAAAA== \"Max Bounces\" Int 1 AQAAAA== \"Max Light Sampling Bounces\" Int 1 AAAAAA== \"Sample HDRI\" Bool 1 AQ== \"Light Sampling Bias\" Float 1 AAAAAA== \"Max Ray Distance\" Float 1 AAB6RA== \"Max Ray Steps\" Int 1 gAAAAA== \"Hit Tolerance\" Float 1 bxKDOg== \"Shadow Bias\" Float 1 AACAPw== \"Index of Refraction\" Float 1 AACAPw== \"Scattering Coefficient\" Float 4 AAAAAAAAAAAAAAAAAAAAAA== \"Extinction Coefficient\" Float 4 AACAPwAAgD8AAIA/AACAPw== \"Equi-Angular Samples\" Int 1 BQAAAA== \"Sample HDRI Equi-Angular\" Bool 1 AQ== \"Object Texture Width\" Int 1 AAAAAA== \"Light Texture Width\" Int 1 AAAAAA== \"Output Type\" Int 1 AAAAAA== \"Output LatLong\" Bool 1 AA== 33 \"_focalLength\" 1 1 \"_horizontalAperture\" 1 1 \"_nearPlane\" 1 1 \"_farPlane\" 1 1 \"_cameraWorldMatrix\" 16 1 \"_focalDistance\" 1 1 \"_fStop\" 1 1 \"_depthOfFieldEnabled\" 1 1 \"_formatWidth\" 1 1 \"_formatHeight\" 1 1 \"_hdriOffsetAngle\" 1 1 \"_usePrecomputedIrradiance\" 1 1 \"_numRaysPerPixel\" 1 1 \"_maxSpawnableRays\" 1 1 \"_minPathsPerPixel\" 1 1 \"_maxPathsPerPixel\" 1 1 \"_maxBounces\" 1 1 \"_maxLightSamplingBounces\" 1 1 \"_sampleHDRI\" 1 1 \"_lightSamplingBias\" 1 1 \"_maxRayDistance\" 1 1 \"_maxRaySteps\" 1 1 \"_hitTolerance\" 1 1 \"_shadowBias\" 1 1 \"_refractiveIndex\" 1 1 \"_scatteringCoefficient\" 4 1 \"_extinctionCoefficient\" 4 1 \"_equiangularSamples\" 1 1 \"_sampleHDRIEquiangular\" 1 1 \"_objectTextureWidth\" 1 1 \"_lightTextureWidth\" 1 1 \"_outputType\" 1 1 \"_latLong\" 1 1 13 \"__inverseCameraProjectionMatrix\" Float 16 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== \"__aperture\" Float 1 1 AAAAAA== \"__bouncesPerRay\" Int 1 1 AAAAAA== \"__lightSamplingEnabled\" Bool 1 1 AA== \"__lightSamplingAngle\" Float 1 1 AAAAAA== \"__equiangularSamplingEnabled\" Bool 1 1 AA== \"__hdriPixelSize\" Float 2 1 AAAAAAAAAAA= \"__irradiancePixelSize\" Float 2 1 AAAAAAAAAAA= \"__hdriOffsetRadians\" Float 1 1 AAAAAA== \"__offset0\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"__offset1\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"__offset2\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"__offset3\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA=="
  kernelSource "// Copyright 2022 by Owen Bulka.\n// All rights reserved.\n// This file is released under the \"MIT License Agreement\".\n// Please see the LICENSE.md file that should have been included as part\n// of this package.\n\n//\n// BlinkScript Ray Marcher\n//\n\n#include \"math.h\"\n#include \"random.h\"\n#include \"noise.h\"\n#include \"conversion.h\"\n#include \"aovs.h\"\n#include \"lights.h\"\n#include \"material.h\"\n#include \"camera.h\"\n#include \"objectInteraction.h\"\n#include \"sdfModifications.h\"\n#include \"sdfs.h\"\n\n\n// Increase this if you want more than MAX_CHILD_DEPTH direct children\n#define MAX_CHILD_DEPTH 32\n#define MAX_MIS_EMISSIVE_SHAPES 32\n\n// Number of parameters needed in the parent stacks\n#define PARENT_STACK_PARAMS 8\n#define FULL_PARENT_STACK_PARAMS 29\n\n// Indices to store parent stack data\n#define NUM_CHILDREN 0\n#define TRANSFORM_X 1\n#define TRANSFORM_Y 2\n#define TRANSFORM_Z 3\n#define SCALE 4\n#define MODIFICATIONS 5\n#define BLEND_STRENGTH 6\n#define DISTANCE 7\n#define DIFFUSE_COLOUR_R 8\n#define DIFFUSE_COLOUR_G 9\n#define DIFFUSE_COLOUR_B 10\n#define SPECULAR_ROUGHNESS 11\n#define SPECULAR_COLOUR_R 12\n#define SPECULAR_COLOUR_G 13\n#define SPECULAR_COLOUR_B 14\n#define SPECULAR 15\n#define EXTINCTION_R 16\n#define EXTINCTION_G 17\n#define EXTINCTION_B 18\n#define TRANSMISSION 19\n#define EMISSION_R 20\n#define EMISSION_G 21\n#define EMISSION_B 22\n#define SCATTERING_R 23\n#define SCATTERING_G 24\n#define SCATTERING_B 25\n#define TRANSMISSION_ROUGHNESS 26\n#define PARENT_REFRACTIVE_INDEX 27\n#define PARENT_OBJECT_ID 28\n\n// Maximum recursion depth for ray marching\n#define MAX_RAYS_PER_SUBPIXEL 100\n\n\nkernel PathMarchKernel : ImageComputationKernel<ePixelWise>\n\{\n    // the input which specifies the format, process is called once per pixel\n    // in this image, which also provides random seeds\n    Image<eRead, eAccessPoint, eEdgeNone> noise;\n    Image<eRead, eAccessPoint, eEdgeNone> src;\n    Image<eRead, eAccessPoint, eEdgeNone> variance;\n\n    // the hdri in latlong format\n    Image<eRead, eAccessRandom, eEdgeNone> hdri;\n\n\n    // the shape positons.xyz, scale.w\n    Image<eRead, eAccessRandom, eEdgeNone> positions;\n\n    // the shape rotations.xyz, wall thickness.w\n    Image<eRead, eAccessRandom, eEdgeNone> rotations;\n\n    // the shape dimensions.xyzw (some shapes may not use all channels)\n    Image<eRead, eAccessRandom, eEdgeNone> dimensions;\n\n    // the shape diffusivities.xyz, specular roughness.w\n    Image<eRead, eAccessRandom, eEdgeNone> diffusivities;\n\n    Image<eRead, eAccessRandom, eEdgeNone> specularities;\n\n    Image<eRead, eAccessRandom, eEdgeNone> transmittances;\n\n    Image<eRead, eAccessRandom, eEdgeNone> emittances;\n\n    Image<eRead, eAccessRandom, eEdgeNone> scatteringCoefficients;\n\n\n    // shape type.x, operation.y, numChildren.z, blend strength.w\n    Image<eRead, eAccessRandom, eEdgeNone> shapeProperties;\n\n    // repetition params.xyzw\n    Image<eRead, eAccessRandom, eEdgeNone> shapeModParameters0;\n\n    // elongation.xyz edgeRadius.w\n    Image<eRead, eAccessRandom, eEdgeNone> shapeModParameters1;\n\n    // reflection.x, transmission.y, emission.z, roughness.w\n    Image<eRead, eAccessRandom, eEdgeNone> surfaceProperties;\n\n    // noise options.x translation.yzw\n    Image<eRead, eAccessRandom, eEdgeNone> noiseParams0;\n\n    // octaves.x, lacunarity.y, gain.z, gamma.w\n    Image<eRead, eAccessRandom, eEdgeNone> noiseParams1;\n\n    // size.x\n    Image<eRead, eAccessRandom, eEdgeNone> noiseParams2;\n\n    // the input lights direction/position.xyz intensity.w\n    Image<eRead, eAccessRandom, eEdgeNone> lights;\n\n    // colour.xyz, type.w\n    // w in \[0, 1) = directional, \[1, inf) = point\n    Image<eRead, eAccessRandom, eEdgeNone> lightProperties;\n\n    // shadow hardness.x\n    Image<eRead, eAccessRandom, eEdgeNone> lightProperties1;\n\n    // the precomputed irradiance of the hdri\n    Image<eRead, eAccessRandom, eEdgeClamped> irradiance;\n\n\n    // the output image\n    Image<eWrite> dst;\n\n\n    param:\n        // These parameters are made available to the user.\n\n        // Camera params\n        float _focalLength;\n        float _horizontalAperture;\n        float _nearPlane;\n        float _farPlane;\n        float4x4 _cameraWorldMatrix;\n        float _focalDistance;\n        float _fStop;\n        bool _depthOfFieldEnabled;\n\n        // Image params\n        float _formatWidth;\n        float _formatHeight;\n\n        float _hdriOffsetAngle;\n        bool _usePrecomputedIrradiance;\n\n        // Ray params\n        int _numRaysPerPixel;\n        int _maxSpawnableRays;\n\n        int _minPathsPerPixel;\n        int _maxPathsPerPixel;\n        int _maxBounces;\n        int _maxLightSamplingBounces;\n        bool _sampleHDRI;\n        float _lightSamplingBias;\n        float _maxRayDistance;\n        int _maxRaySteps;\n        float _hitTolerance;\n        float _shadowBias;\n\n        // Scene params\n        float _refractiveIndex;\n        float4 _scatteringCoefficient;\n        float4 _extinctionCoefficient;\n        int _equiangularSamples;\n        bool _sampleHDRIEquiangular;\n\n        // Shape Textures\n        int _objectTextureWidth;\n        int _lightTextureWidth;\n\n        int _outputType;\n\n        bool _latLong;\n\n\n    local:\n        // These local variables are not exposed to the user.\n\n        float4x4 __inverseCameraProjectionMatrix;\n        float __aperture;\n\n        int __bouncesPerRay;\n        bool __lightSamplingEnabled;\n        float __lightSamplingAngle;\n        bool __equiangularSamplingEnabled;\n\n        float2 __hdriPixelSize;\n        float2 __irradiancePixelSize;\n        float __hdriOffsetRadians;\n\n        float3 __offset0;\n        float3 __offset1;\n        float3 __offset2;\n        float3 __offset3;\n\n\n    /**\n     * In define(), parameters can be given labels and default values.\n     */\n    void define()\n    \{\n        // Camera params\n        defineParam(_focalLength, \"Focal Length\", 50.0f);\n        defineParam(_horizontalAperture, \"Horizontal Aperture\", 24.576f);\n        defineParam(_nearPlane, \"Near Plane\", 0.1f);\n        defineParam(_farPlane, \"Far Plane\", 10000.0f);\n        defineParam(\n            _cameraWorldMatrix,\n            \"Camera World Matrix\",\n            float4x4(\n                1, 0, 0, 0,\n                0, 1, 0, 0,\n                0, 0, 1, 0,\n                0, 0, 0, 1\n            )\n        );\n        defineParam(_focalDistance, \"Focal Distance\", 4.0f);\n        defineParam(_fStop, \"fstop\", 16.0f);\n        defineParam(_depthOfFieldEnabled, \"Enable Depth Of Field\", true);\n\n        // Image params\n        defineParam(_formatHeight, \"Screen Height\", 2160.0f);\n        defineParam(_formatWidth, \"Screen Width\", 3840.0f);\n        defineParam(_hdriOffsetAngle, \"HDRI Offset Angle\", 0.0f);\n        defineParam(_usePrecomputedIrradiance, \"Use Precomputed Irradiance\", true);\n\n        // Ray params\n        defineParam(_numRaysPerPixel, \"Num Rays Per Pixel\", 1);\n        defineParam(_maxSpawnableRays, \"Max Rays To Spawn On Impact\", 1);\n\n        defineParam(_minPathsPerPixel, \"Min Paths Per Pixel\", 1);\n        defineParam(_maxPathsPerPixel, \"Max Paths Per Pixel\", 1);\n        defineParam(_maxRayDistance, \"Max Ray Distance\", 1000.0f);\n        defineParam(_maxRaySteps, \"Max Ray Steps\", 128);\n        defineParam(_maxBounces, \"Max Bounces\", 1);\n        defineParam(_maxLightSamplingBounces, \"Max Light Sampling Bounces\", 0);\n        defineParam(_sampleHDRI, \"Sample HDRI\", true);\n        defineParam(_lightSamplingBias, \"Light Sampling Bias\", 0.0f);\n        defineParam(_hitTolerance, \"Hit Tolerance\", 0.001f);\n        defineParam(_shadowBias, \"Shadow Bias\", 1.0f);\n\n        // Scene params\n        defineParam(_refractiveIndex, \"Index of Refraction\", 1.0f);\n        defineParam(_scatteringCoefficient, \"Scattering Coefficient\", float4(0));\n        defineParam(_extinctionCoefficient, \"Extinction Coefficient\", float4(1));\n        defineParam(_equiangularSamples, \"Equi-Angular Samples\", 5);\n        defineParam(_sampleHDRIEquiangular, \"Sample HDRI Equi-Angular\", true);\n\n        // Shape Counts\n        defineParam(_objectTextureWidth, \"Object Texture Width\", 0);\n        defineParam(_lightTextureWidth, \"Light Texture Width\", 0);\n\n        defineParam(_outputType, \"Output Type\", 0);\n\n        defineParam(_latLong, \"Output LatLong\", false);\n    \}\n\n\n    /**\n     * The init() function is run before any calls to process().\n     * Local variables can be initialized here.\n     */\n    void init()\n    \{\n        __bouncesPerRay = _maxBounces <= 0 ? 1 : _maxBounces;\n\n        __lightSamplingEnabled = _maxLightSamplingBounces > 0;\n\n        __lightSamplingAngle = PI * (1.0f - saturate(_lightSamplingBias));\n\n        __equiangularSamplingEnabled = _equiangularSamples > 0;\n\n        float aspect = aspectRatio(_formatHeight, _formatWidth);\n        float4x4 cameraProjectionMatrix = projectionMatrix(\n            _focalLength,\n            _horizontalAperture,\n            aspect,\n            _nearPlane,\n            _farPlane\n        );\n        __inverseCameraProjectionMatrix = cameraProjectionMatrix.invert();\n\n        __aperture = fStopToAperture(_fStop, _focalLength);\n\n        __hdriPixelSize = float2(\n            hdri.bounds.width() / (2 * PI),\n            hdri.bounds.height() / PI\n        );\n        __irradiancePixelSize = float2(\n            irradiance.bounds.width() / (2 * PI),\n            irradiance.bounds.height() / PI\n        );\n        __hdriOffsetRadians = degreesToRadians(_hdriOffsetAngle);\n\n        __offset0 = 0.5773f * float3(1, -1, -1);\n        __offset1 = 0.5773f * float3(-1, -1, 1);\n        __offset2 = 0.5773f * float3(-1, 1, -1);\n        __offset3 = 0.5773f * float3(1, 1, 1);\n    \}\n\n\n    float getNoiseValue(const int index, const float3 &position, int &noiseOptions)\n    \{\n        noiseOptions = (int) noiseParams0(index, 0, 0);\n        if ((noiseOptions & 1) == 0)\n        \{\n            return -1.0f;\n        \}\n\n        const float3 translation = float3(\n            noiseParams0(index, 0, 1),\n            noiseParams0(index, 0, 2),\n            noiseParams0(index, 0, 3)\n        );\n\n        const int octaves = noiseParams1(index, 0, 0);\n        const float lacunarity = noiseParams1(index, 0, 1);\n        const float gain = noiseParams1(index, 0, 2);\n        const float gamma = noiseParams1(index, 0, 3);\n        const float size = noiseParams2(index, 0, 0);\n\n        const float3 noisePosition = worldToLocal(index, position + translation);\n\n        float noiseValue;\n        if (noiseOptions & 2)\n        \{\n            noiseValue = fractalBrownianMotionNoise(\n                octaves,\n                lacunarity,\n                size,\n                gain,\n                gamma,\n                noisePosition\n            );\n        \}\n        else\n        \{\n            noiseValue = turbulanceNoise(\n                octaves,\n                lacunarity,\n                size,\n                gain,\n                gamma,\n                noisePosition\n            );\n        \}\n\n\n        const float whitePoint = noiseParams2(index, 0, 1);\n        const float blackPoint = noiseParams2(index, 0, 2);\n        const float lift = noiseParams2(index, 0, 3);\n\n        if (whitePoint != blackPoint)\n        \{\n            noiseValue = saturate((noiseValue - blackPoint) / (whitePoint - blackPoint));\n        \}\n\n        noiseValue = saturate(noiseValue * (1.0f - lift) + lift);\n\n        if (noiseOptions & 512)\n        \{\n            noiseValue = 1.0f - noiseValue;\n        \}\n\n        return noiseValue;\n    \}\n\n\n    /**\n     * Get the value of hdri the ray would hit at infinite distance\n     *\n     * @arg rayDirection: The direction of the ray.\n     *\n     * @returns: The colour of the pixel in the direction of the ray.\n     */\n    float4 readHDRIValue(float3 rayDirection)\n    \{\n        const float2 angles = cartesionUnitVectorToSpherical(rayDirection, __hdriOffsetRadians);\n\n        // Should be able to say image access is eEdgeClamped and not do this\n        // but I see nan pixels sooo... :(\n        const float2 indices = clamp(\n            float2(\n                __hdriPixelSize.x * angles.x,\n                hdri.bounds.height() - (__hdriPixelSize.y * angles.y)\n            ),\n            float2(0),\n            float2(hdri.bounds.width(), hdri.bounds.height()) - 1.0f\n        );\n\n        return bilinear(hdri, indices.x, indices.y);\n    \}\n\n\n    /**\n     * Get the value of irradiance the hdri would provide in a direction\n     *\n     * @arg rayDirection: The direction of the ray.\n     *\n     * @returns: The colour of the pixel in the direction of the ray.\n     */\n    inline float4 readIrradianceValue(float3 rayDirection)\n    \{\n        const float2 angles = cartesionUnitVectorToSpherical(rayDirection, __hdriOffsetRadians);\n\n        // Should be able to say image access is eEdgeClamped and not do this\n        // but I see nan pixels sooo... :(\n        const float2 indices = clamp(\n            float2(\n                __irradiancePixelSize.x * angles.x,\n                irradiance.bounds.height() - (__irradiancePixelSize.y * angles.y)\n            ),\n            float2(0),\n            float2(irradiance.bounds.width(), irradiance.bounds.height()) - 1.0f\n        );\n\n        return bilinear(irradiance, indices.x, indices.y);\n    \}\n\n\n    float3 worldToLocal(const int objectIndex, const float3 &worldPosition)\n    \{\n        float3 localPosition = worldPosition;\n        for (int j=0; j <= objectIndex; j++)\n        \{\n            SampleType(shapeProperties) shapeProperty = shapeProperties(j, 0);\n            const float numChildren = shapeProperty.z;\n\n            if (j + numChildren < objectIndex)\n            \{\n                j += numChildren;\n                continue;\n            \}\n\n            // Read in the shape properties\n            const SampleType(positions) position = positions(j, 0);\n            const SampleType(rotations) rotation = rotations(j, 0);\n            const SampleType(dimensions) dimension = dimensions(j, 0);\n            const SampleType(shapeModParameters0) modParameters0 = shapeModParameters0(j, 0);\n            const SampleType(shapeModParameters1) modParameters1 = shapeModParameters1(j, 0);\n\n            // const float scale = position.w;\n            const int modifications = (int) shapeProperty.y;\n\n            // Use parent transform to position child\n            localPosition = transformRay(\n                localPosition,\n                float3(position.x, position.y, position.z),\n                float3(rotation.x, rotation.y, rotation.z),\n                modifications,\n                modParameters0,\n                modParameters1\n            );\n        \}\n\n        return localPosition;\n    \}\n\n\n    float3 localToWorld(const int objectIndex, const float3 &localPosition)\n    \{\n        float3 worldPosition = localPosition;\n        for (int j=objectIndex; j >= 0; j--)\n        \{\n            SampleType(shapeProperties) shapeProperty = shapeProperties(j, 0);\n            const float numChildren = shapeProperty.z;\n\n            if (j + numChildren < objectIndex)\n            \{\n                continue;\n            \}\n\n            // Read in the shape properties\n            const SampleType(positions) position = positions(j, 0);\n            const SampleType(rotations) rotation = rotations(j, 0);\n            const SampleType(dimensions) dimension = dimensions(j, 0);\n            const SampleType(shapeModParameters0) modParameters0 = shapeModParameters0(j, 0);\n            const SampleType(shapeModParameters1) modParameters1 = shapeModParameters1(j, 0);\n\n            // const float scale = position.w;\n            const int modifications = (int) shapeProperty.y;\n\n            // Use parent transform to position child\n            worldPosition = inverseTransformRay(\n                worldPosition,\n                float3(position.x, position.y, position.z),\n                float3(rotation.x, rotation.y, rotation.z),\n                modifications,\n                modParameters0,\n                modParameters1\n            );\n        \}\n\n        return worldPosition;\n    \}\n\n\n    float3 getObjectPosition(const int objectIndex)\n    \{\n        return localToWorld(objectIndex, float3(0));\n    \}\n\n\n    inline bool childInteractionIsNotUnion(const int objectIndex)\n    \{\n        return (int(shapeProperties(objectIndex, 0, 1)) & 3968) > 0;\n    \}\n\n\n    inline bool isParentOf(const int parentIndex, const int childIndex)\n    \{\n        return parentIndex + shapeProperties(parentIndex, 0, 2) >= childIndex;\n    \}\n\n\n    bool isExitingObject(const int currentMaterialIndex, const int objectIndex)\n    \{\n        return (\n            currentMaterialIndex >= 0\n            && (\n                currentMaterialIndex == objectIndex\n                || (\n                    isParentOf(objectIndex, currentMaterialIndex)\n                    && childInteractionIsNotUnion(objectIndex)\n                ) || (\n                    isParentOf(currentMaterialIndex, objectIndex)\n                    && childInteractionIsNotUnion(currentMaterialIndex)\n                )\n            )\n        );\n    \}\n\n\n    /**\n     * Compute the minimum distance to an object in the scene\n     *\n     * @arg rayOrigin: The origin position of the ray.\n     * @arg pixelFootprint: A value proportional to the amount of world\n     *     space that fills a pixel, like the distance from camera.\n     *\n     * @returns: The minimum distance to an object in the scene.\n     */\n    float getMinDistanceToObjectInScene(const float3 &rayOrigin, const float pixelFootprint)\n    \{\n        float distance = _maxRayDistance;\n\n        // numChildren, transformedRay, scale, mods, nextDistance, diffuse colour\n        // roughness, specular colour, specular, transmissive colour, transmission,\n        // emissive colour, emission, refractive index, objectId, blendStrength\n        float parentStack\[MAX_CHILD_DEPTH]\[PARENT_STACK_PARAMS];\n        int parentStackLength = 0;\n\n        for (int j=0; j < _objectTextureWidth; j++)\n        \{\n            // Read in the shape properties\n            SampleType(positions) position = positions(j, 0);\n            SampleType(rotations) rotation = rotations(j, 0);\n            SampleType(dimensions) dimension = dimensions(j, 0);\n            SampleType(shapeProperties) shapeProperty = shapeProperties(j, 0);\n            SampleType(shapeModParameters0) modParameters0 = shapeModParameters0(j, 0);\n            SampleType(shapeModParameters1) modParameters1 = shapeModParameters1(j, 0);\n\n            float scale = position.w;\n\n            const int modifications = (int) shapeProperty.y;\n            float numChildren = shapeProperty.z;\n            const float blendStrength = shapeProperty.w;\n\n            int stackLastIndex = parentStackLength - 1;\n\n            // Position relative to the parent if we have any\n            float3 parentTransformedRay = rayOrigin;\n            if (parentStackLength > 0)\n            \{\n                parentTransformedRay.x = parentStack\[stackLastIndex]\[TRANSFORM_X];\n                parentTransformedRay.y = parentStack\[stackLastIndex]\[TRANSFORM_Y];\n                parentTransformedRay.z = parentStack\[stackLastIndex]\[TRANSFORM_Z];\n                scale *= parentStack\[stackLastIndex]\[SCALE];\n            \}\n\n            // Use parent transform to position child\n            const float3 transformedRay = transformRay(\n                parentTransformedRay,\n                float3(position.x, position.y, position.z),\n                float3(rotation.x, rotation.y, rotation.z),\n                modifications,\n                modParameters0,\n                modParameters1\n            );\n\n            // Get distance to this child\n            float nextDistance = getModifiedDistance(\n                transformedRay,\n                (int) shapeProperty.x,\n                dimension,\n                scale,\n                modifications,\n                modParameters1.w,\n                rotation.w\n            );\n\n            // Track which object was hit for the alpha channel\n            float objectId = (float) j + 1.0f;\n\n            // If this is a bounding volume, we can skip its children\n            // if we aren't close to, or inside it\n            if (\n                modifications & 4096\n                && numChildren > 0\n                && nextDistance > _hitTolerance + pixelFootprint\n            ) \{\n                // Update the min distance if this bounding volume is closest.\n                // Otherwise we could step through it, or if every object in\n                // the scene is inside it, we would not step forward at all\n                if (fabs(nextDistance) < fabs(distance))\n                \{\n                    distance = nextDistance;\n                \}\n\n                // This was tagged as a boundary object, skip its children\n                // since we arent close to hitting it\n                j += numChildren;\n\n                for (int parentIndex=stackLastIndex; parentIndex >= 0; parentIndex--)\n                \{\n                    parentStack\[parentIndex]\[NUM_CHILDREN] -= numChildren + 1.0f;\n                \}\n\n                // If there are no parents, or still children of the parent\n                // we do not need to compute anything further for this loop\n                if (parentStackLength <= 0 || parentStack\[stackLastIndex]\[NUM_CHILDREN] > 0.0f)\n                \{\n                    continue;\n                \}\n\n                // pop stack\n                // we know that there will be no more children if we did not continue\n                numChildren = 0.0f;\n                nextDistance = parentStack\[stackLastIndex]\[DISTANCE];\n                stackLastIndex--;\n                parentStackLength--;\n            \}\n\n            if (numChildren <= 0.0f)\n            \{\n                // No Children left, compute interactions with parent\n                if (parentStackLength > 0)\n                \{\n                    // Process this object, along with all parents that do not\n                    // have any more children, removing them from the stack,\n                    // but descend all the way down the stack, without removing\n                    // the objects that still have children\n                    for (int stackIndex=stackLastIndex; stackIndex >= 0; stackIndex--)\n                    \{\n                        const int parentModifications = parentStack\[stackIndex]\[MODIFICATIONS];\n\n                        // Do not need to interact with bounding volumes.\n                        // They are in the stack for relative positioning\n                        // if they weren't then we would have to manually move\n                        // the bounding box to follow the children\n                        if (!(parentModifications & 4096))\n                        \{\n                            const float parentBlendStrength = parentStack\[stackIndex]\[BLEND_STRENGTH];\n                            const float parentNextDistance = parentStack\[stackIndex]\[DISTANCE];\n\n                            // Compute interaction between parent and this child\n                            nextDistance = performChildInteraction(\n                                parentModifications,\n                                parentNextDistance,\n                                nextDistance,\n                                parentBlendStrength\n                            );\n                        \}\n\n                        // Update the global min distance (and surface/colour)\n                        if (fabs(nextDistance) < fabs(distance))\n                        \{\n                            distance = nextDistance;\n                        \}\n                    \}\n\n                    do\n                    \{\n                        // Decrement the number of children each parent has\n                        for (int parentIndex=stackLastIndex; parentIndex >= 0; parentIndex--)\n                        \{\n                            parentStack\[parentIndex]\[NUM_CHILDREN] -= 1.0f;\n                        \}\n\n                        // Get the number of children still remaining for the parent\n                        // If there are still children, we can break out of this loop\n                        // to process the rest of them before the parent itself\n                        numChildren = parentStack\[stackLastIndex]\[NUM_CHILDREN];\n                    \}\n                    while (numChildren <= 0.0f && --stackLastIndex >= 0);\n\n                    parentStackLength = stackLastIndex + 1;\n                \}\n                // No parents to interact with, simply check the distance\n                else if (fabs(nextDistance) < fabs(distance))\n                \{\n                    distance = nextDistance;\n                \}\n            \}\n            else\n            \{\n                // Node has Children, push it to the stack for later\n                // processing when we have all its children\n                // parentStack.push()\n                parentStack\[parentStackLength]\[NUM_CHILDREN] = numChildren;\n                parentStack\[parentStackLength]\[TRANSFORM_X] = transformedRay.x;\n                parentStack\[parentStackLength]\[TRANSFORM_Y] = transformedRay.y;\n                parentStack\[parentStackLength]\[TRANSFORM_Z] = transformedRay.z;\n                parentStack\[parentStackLength]\[SCALE] = scale;\n                parentStack\[parentStackLength]\[MODIFICATIONS] = (float) modifications;\n                parentStack\[parentStackLength]\[BLEND_STRENGTH] = blendStrength;\n                parentStack\[parentStackLength]\[DISTANCE] = nextDistance;\n                parentStackLength++;\n            \}\n        \}\n\n        return distance;\n    \}\n\n\n    /**\n     * Compute the minimum distance to an object in the scene\n     *\n     * @arg rayOrigin: The origin position of the ray.\n     * @arg pixelFootprint: A value proportional to the amount of world\n     *     space that fills a pixel, like the distance from camera.\n     * @arg colour: Location to store the colour of the hit object.\n     * @arg surface: Location to store the surface properties of the hit\n     *     object.\n     *\n     * @returns: The minimum distance to an object in the scene, and the\n     *     unique identifier of the object.\n     */\n    float getMinDistanceToObjectInScene(\n            const float3 &rayOrigin,\n            const float pixelFootprint,\n            float4 &diffusivity,\n            float4 &specularity,\n            float4 &transmittance,\n            float4 &emittance,\n            float4 &scatteringCoefficient,\n            float &transmissionRoughness,\n            float &refractiveIndex,\n            bool &doRefraction,\n            int &id)\n    \{\n        float distance = _maxRayDistance;\n        id = 0;\n\n        // numChildren, transformedRay, scale, mods, nextDistance, diffuse colour\n        // roughness, specular colour, specular, transmissive colour, transmission,\n        // emissive colour, emission, refractive index, objectId, blendStrength\n        float parentStack\[MAX_CHILD_DEPTH]\[FULL_PARENT_STACK_PARAMS];\n        int parentStackLength = 0;\n\n        for (int j=0; j < _objectTextureWidth; j++)\n        \{\n            // Read in the shape properties\n            SampleType(positions) position = positions(j, 0);\n            SampleType(rotations) rotation = rotations(j, 0);\n            SampleType(dimensions) dimension = dimensions(j, 0);\n            SampleType(shapeProperties) shapeProperty = shapeProperties(j, 0);\n            SampleType(shapeModParameters0) modParameters0 = shapeModParameters0(j, 0);\n            SampleType(shapeModParameters1) modParameters1 = shapeModParameters1(j, 0);\n            SampleType(diffusivities) diffuseColour = diffusivities(j, 0);\n            SampleType(specularities) specularColour = specularities(j, 0);\n            SampleType(transmittances) transmissiveColour = transmittances(j, 0);\n            SampleType(emittances) emissiveColour = emittances(j, 0);\n            SampleType(scatteringCoefficients) scatteringColour = scatteringCoefficients(j, 0);\n            SampleType(surfaceProperties) surfaceProperty = surfaceProperties(j, 0);\n\n            const int modifications = ((int) shapeProperty.y) | ((int) surfaceProperty.y);\n            float scale = position.w;\n\n            const float blendStrength = shapeProperty.w;\n            float numChildren = shapeProperty.z;\n\n            int stackLastIndex = parentStackLength - 1;\n\n            float4 blendedDiffuseColour = diffuseColour;\n            float4 blendedSpecularColour = specularColour;\n            float4 blendedTransmissiveColour = transmissiveColour;\n            float4 blendedEmissiveColour = emissiveColour;\n            float4 blendedScatteringCoefficient = scatteringColour;\n            float blendedRefractiveIndex = surfaceProperty.x;\n            float blendedTransmissionRoughness = surfaceProperty.z;\n\n            // Position relative to the parent if we have any\n            float3 parentTransformedRay = rayOrigin;\n            if (parentStackLength > 0)\n            \{\n                parentTransformedRay.x = parentStack\[stackLastIndex]\[TRANSFORM_X];\n                parentTransformedRay.y = parentStack\[stackLastIndex]\[TRANSFORM_Y];\n                parentTransformedRay.z = parentStack\[stackLastIndex]\[TRANSFORM_Z];\n                scale *= parentStack\[stackLastIndex]\[SCALE];\n            \}\n\n            // Use parent transform to position child\n            const float3 transformedRay = transformRay(\n                parentTransformedRay,\n                float3(position.x, position.y, position.z),\n                float3(rotation.x, rotation.y, rotation.z),\n                modifications,\n                modParameters0,\n                modParameters1\n            );\n\n            // Get distance to this child\n            float nextDistance = getModifiedDistance(\n                transformedRay,\n                (int) shapeProperty.x,\n                dimension,\n                scale,\n                modifications,\n                modParameters1.w,\n                rotation.w,\n                blendedDiffuseColour,\n                blendedSpecularColour,\n                blendedTransmissiveColour,\n                blendedEmissiveColour,\n                blendedScatteringCoefficient\n            );\n\n            // Track which object was hit for the alpha channel\n            float objectId = (float) j + 1.0f;\n\n            // If this is a bounding volume, we can skip its children\n            // if we aren't close to, or inside it\n            if (\n                modifications & 4096\n                && numChildren > 0\n                && nextDistance > _hitTolerance + pixelFootprint\n            ) \{\n                // Update the min distance if this bounding volume is closest.\n                // Otherwise we could step through it, or if every object in\n                // the scene is inside it, we would not step forward at all\n                if (fabs(nextDistance) < fabs(distance))\n                \{\n                    distance = nextDistance;\n\n                    diffusivity = blendedDiffuseColour;\n                    specularity = blendedSpecularColour;\n                    transmittance = blendedTransmissiveColour;\n                    emittance = blendedEmissiveColour;\n                    scatteringCoefficient = blendedScatteringCoefficient;\n                    transmissionRoughness = blendedTransmissionRoughness;\n                    refractiveIndex = blendedRefractiveIndex;\n\n                    id = objectId;\n\n                    doRefraction = modifications & 262144;\n                \}\n\n                // This was tagged as a boundary object, skip its children\n                // since we arent close to hitting it\n                j += numChildren;\n\n                for (int parentIndex=stackLastIndex; parentIndex >= 0; parentIndex--)\n                \{\n                    parentStack\[parentIndex]\[NUM_CHILDREN] -= numChildren + 1.0f;\n                \}\n\n                // If there are no parents, or still children of the parent\n                // we do not need to compute anything further for this loop\n                if (parentStackLength <= 0 || parentStack\[stackLastIndex]\[NUM_CHILDREN] > 0.0f)\n                \{\n                    continue;\n                \}\n\n                // pop stack\n                // we know that there will be no more children if we did not continue\n                numChildren = 0.0f;\n                nextDistance = parentStack\[stackLastIndex]\[DISTANCE];\n                blendedDiffuseColour = float4(\n                    parentStack\[stackLastIndex]\[DIFFUSE_COLOUR_R],\n                    parentStack\[stackLastIndex]\[DIFFUSE_COLOUR_G],\n                    parentStack\[stackLastIndex]\[DIFFUSE_COLOUR_B],\n                    parentStack\[stackLastIndex]\[SPECULAR_ROUGHNESS]\n                );\n                blendedSpecularColour = float4(\n                    parentStack\[stackLastIndex]\[SPECULAR_COLOUR_R],\n                    parentStack\[stackLastIndex]\[SPECULAR_COLOUR_G],\n                    parentStack\[stackLastIndex]\[SPECULAR_COLOUR_B],\n                    parentStack\[stackLastIndex]\[SPECULAR]\n                );\n                blendedTransmissiveColour = float4(\n                    parentStack\[stackLastIndex]\[EXTINCTION_R],\n                    parentStack\[stackLastIndex]\[EXTINCTION_G],\n                    parentStack\[stackLastIndex]\[EXTINCTION_B],\n                    parentStack\[stackLastIndex]\[TRANSMISSION]\n                );\n                blendedEmissiveColour = float4(\n                    parentStack\[stackLastIndex]\[EMISSION_R],\n                    parentStack\[stackLastIndex]\[EMISSION_G],\n                    parentStack\[stackLastIndex]\[EMISSION_B],\n                    0\n                );\n                blendedScatteringCoefficient = float4(\n                    parentStack\[stackLastIndex]\[SCATTERING_R],\n                    parentStack\[stackLastIndex]\[SCATTERING_G],\n                    parentStack\[stackLastIndex]\[SCATTERING_B],\n                    0\n                );\n                blendedTransmissionRoughness = parentStack\[stackLastIndex]\[TRANSMISSION_ROUGHNESS];\n                blendedRefractiveIndex = parentStack\[stackLastIndex]\[PARENT_REFRACTIVE_INDEX];\n\n                objectId = parentStack\[stackLastIndex]\[PARENT_OBJECT_ID];\n                stackLastIndex--;\n                parentStackLength--;\n            \}\n\n            if (numChildren <= 0.0f)\n            \{\n                // No Children left, compute interactions with parent\n                if (parentStackLength > 0)\n                \{\n                    // Process this object, along with all parents that do not\n                    // have any more children, removing them from the stack,\n                    // but descend all the way down the stack, without removing\n                    // the objects that still have children\n                    for (int stackIndex=stackLastIndex; stackIndex >= 0; stackIndex--)\n                    \{\n                        const int parentModifications = (int) parentStack\[stackIndex]\[5];\n\n                        // Do not need to interact with bounding volumes.\n                        // They are in the stack for relative positioning\n                        // if they weren't then we would have to manually move\n                        // the bounding box to follow the children\n                        if (!(parentModifications & 4096))\n                        \{\n                            const float parentBlendStrength = (\n                                parentStack\[stackIndex]\[BLEND_STRENGTH]\n                            );\n                            const float parentNextDistance = parentStack\[stackIndex]\[DISTANCE];\n                            const float4 parentDiffuseColour = float4(\n                                parentStack\[stackIndex]\[DIFFUSE_COLOUR_R],\n                                parentStack\[stackIndex]\[DIFFUSE_COLOUR_G],\n                                parentStack\[stackIndex]\[DIFFUSE_COLOUR_B],\n                                parentStack\[stackIndex]\[SPECULAR_ROUGHNESS]\n                            );\n                            const float4 parentSpecularColour = float4(\n                                parentStack\[stackIndex]\[SPECULAR_COLOUR_R],\n                                parentStack\[stackIndex]\[SPECULAR_COLOUR_G],\n                                parentStack\[stackIndex]\[SPECULAR_COLOUR_B],\n                                parentStack\[stackIndex]\[SPECULAR]\n                            );\n                            const float4 parentTransmissiveColour = float4(\n                                parentStack\[stackIndex]\[EXTINCTION_R],\n                                parentStack\[stackIndex]\[EXTINCTION_G],\n                                parentStack\[stackIndex]\[EXTINCTION_B],\n                                parentStack\[stackIndex]\[TRANSMISSION]\n                            );\n                            const float4 parentEmissiveColour = float4(\n                                parentStack\[stackIndex]\[EMISSION_R],\n                                parentStack\[stackIndex]\[EMISSION_G],\n                                parentStack\[stackIndex]\[EMISSION_B],\n                                0\n                            );\n                            const float4 parentScatteringCoefficient = float4(\n                                parentStack\[stackIndex]\[SCATTERING_R],\n                                parentStack\[stackIndex]\[SCATTERING_G],\n                                parentStack\[stackIndex]\[SCATTERING_B],\n                                0\n                            );\n                            const float parentTransmissionRoughness = (\n                                parentStack\[stackLastIndex]\[TRANSMISSION_ROUGHNESS]\n                            );\n                            const float parentRefractiveIndex = (\n                                parentStack\[stackLastIndex]\[PARENT_REFRACTIVE_INDEX]\n                            );\n\n                            if (fabs(nextDistance) > fabs(parentNextDistance))\n                            \{\n                                objectId = parentStack\[stackIndex]\[PARENT_OBJECT_ID];\n                            \}\n\n                            // Compute interaction between parent and this child\n                            nextDistance = performChildInteraction(\n                                parentModifications,\n                                parentNextDistance,\n                                nextDistance,\n                                parentDiffuseColour,\n                                blendedDiffuseColour,\n                                parentSpecularColour,\n                                blendedSpecularColour,\n                                parentTransmissiveColour,\n                                blendedTransmissiveColour,\n                                parentEmissiveColour,\n                                blendedEmissiveColour,\n                                parentScatteringCoefficient,\n                                blendedScatteringCoefficient,\n                                parentTransmissionRoughness,\n                                blendedTransmissionRoughness,\n                                parentRefractiveIndex,\n                                blendedRefractiveIndex,\n                                parentBlendStrength\n                            );\n                        \}\n\n                        // Update the global min distance (and surface/colour)\n                        if (fabs(nextDistance) < fabs(distance))\n                        \{\n                            distance = nextDistance;\n\n                            diffusivity = blendedDiffuseColour;\n                            specularity = blendedSpecularColour;\n                            transmittance = blendedTransmissiveColour;\n                            emittance = blendedEmissiveColour;\n                            scatteringCoefficient = blendedScatteringCoefficient;\n                            transmissionRoughness = blendedTransmissionRoughness;\n                            refractiveIndex = blendedRefractiveIndex;\n\n                            id = objectId;\n\n                            doRefraction = parentModifications & 262144;\n                        \}\n                    \}\n\n                    do\n                    \{\n                        // Decrement the number of children each parent has\n                        for (int parentIndex=stackLastIndex; parentIndex >= 0; parentIndex--)\n                        \{\n                            parentStack\[parentIndex]\[NUM_CHILDREN] -= 1.0f;\n                        \}\n\n                        // Get the number of children still remaining for the parent\n                        // If there are still children, we can break out of this loop\n                        // to process the rest of them before the parent itself\n                        numChildren = parentStack\[stackLastIndex]\[NUM_CHILDREN];\n                    \}\n                    while (numChildren <= 0.0f && --stackLastIndex >= 0);\n\n                    parentStackLength = stackLastIndex + 1;\n                \}\n                // No parents to interact with, simply check the distance\n                else if (fabs(nextDistance) < fabs(distance))\n                \{\n                    distance = nextDistance;\n\n                    diffusivity = blendedDiffuseColour;\n                    specularity = blendedSpecularColour;\n                    transmittance = blendedTransmissiveColour;\n                    emittance = blendedEmissiveColour;\n                    scatteringCoefficient = blendedScatteringCoefficient;\n                    transmissionRoughness = blendedTransmissionRoughness;\n                    refractiveIndex = blendedRefractiveIndex;\n\n                    id = objectId;\n\n                    doRefraction = modifications & 262144;\n                \}\n            \}\n            else\n            \{\n                // Node has Children, push it to the stack for later\n                // processing when we have all its children\n                // parentStack.push()\n                parentStack\[parentStackLength]\[NUM_CHILDREN] = numChildren;\n                parentStack\[parentStackLength]\[TRANSFORM_X] = transformedRay.x;\n                parentStack\[parentStackLength]\[TRANSFORM_Y] = transformedRay.y;\n                parentStack\[parentStackLength]\[TRANSFORM_Z] = transformedRay.z;\n                parentStack\[parentStackLength]\[SCALE] = scale;\n                parentStack\[parentStackLength]\[MODIFICATIONS] = (float) modifications;\n                parentStack\[parentStackLength]\[BLEND_STRENGTH] = blendStrength;\n                parentStack\[parentStackLength]\[DISTANCE] = nextDistance;\n                parentStack\[parentStackLength]\[DIFFUSE_COLOUR_R] = blendedDiffuseColour.x;\n                parentStack\[parentStackLength]\[DIFFUSE_COLOUR_G] = blendedDiffuseColour.y;\n                parentStack\[parentStackLength]\[DIFFUSE_COLOUR_B] = blendedDiffuseColour.z;\n                parentStack\[parentStackLength]\[SPECULAR_ROUGHNESS] = blendedDiffuseColour.w;\n                parentStack\[parentStackLength]\[SPECULAR_COLOUR_R] = blendedSpecularColour.x;\n                parentStack\[parentStackLength]\[SPECULAR_COLOUR_G] = blendedSpecularColour.y;\n                parentStack\[parentStackLength]\[SPECULAR_COLOUR_B] = blendedSpecularColour.z;\n                parentStack\[parentStackLength]\[SPECULAR] = blendedSpecularColour.w;\n                parentStack\[parentStackLength]\[EXTINCTION_R] = blendedTransmissiveColour.x;\n                parentStack\[parentStackLength]\[EXTINCTION_G] = blendedTransmissiveColour.y;\n                parentStack\[parentStackLength]\[EXTINCTION_B] = blendedTransmissiveColour.z;\n                parentStack\[parentStackLength]\[TRANSMISSION] = blendedTransmissiveColour.w;\n                parentStack\[parentStackLength]\[EMISSION_R] = blendedEmissiveColour.x;\n                parentStack\[parentStackLength]\[EMISSION_G] = blendedEmissiveColour.y;\n                parentStack\[parentStackLength]\[EMISSION_B] = blendedEmissiveColour.z;\n                parentStack\[parentStackLength]\[SCATTERING_R] = blendedScatteringCoefficient.x;\n                parentStack\[parentStackLength]\[SCATTERING_G] = blendedScatteringCoefficient.y;\n                parentStack\[parentStackLength]\[SCATTERING_B] = blendedScatteringCoefficient.z;\n                parentStack\[parentStackLength]\[TRANSMISSION_ROUGHNESS] = blendedTransmissionRoughness;\n                parentStack\[parentStackLength]\[PARENT_REFRACTIVE_INDEX] = blendedRefractiveIndex;\n                parentStack\[parentStackLength]\[PARENT_OBJECT_ID] = objectId;\n                parentStackLength++;\n            \}\n        \}\n\n        return distance;\n    \}\n\n\n    /**\n     * Estimate the surface normal at the closest point on the closest\n     * object to a point\n     *\n     * @arg point: The point near which to get the surface normal\n     * @arg pixelFootprint: A value proportional to the amount of world\n     *     space that fills a pixel, like the distance from camera.\n     *\n     * @returns: The normalized surface normal.\n     */\n    float3 estimateSurfaceNormal(const float3 &point, const float pixelFootprint)\n    \{\n        return normalize(\n            __offset0 * getMinDistanceToObjectInScene(\n                point + __offset0 * _hitTolerance,\n                pixelFootprint\n            )\n            + __offset1 * getMinDistanceToObjectInScene(\n                point + __offset1 * _hitTolerance,\n                pixelFootprint\n            )\n            + __offset2 * getMinDistanceToObjectInScene(\n                point + __offset2 * _hitTolerance,\n                pixelFootprint\n            )\n            + __offset3 * getMinDistanceToObjectInScene(\n                point + __offset3 * _hitTolerance,\n                pixelFootprint\n            )\n        );\n    \}\n\n\n    /**\n     * Compute a soft shadow value.\n     *\n     * @arg rayDirection: The direction of the shadow ray.\n     * @arg distanceToShadePoint: The maximum distance to check for\n     *     a shadow casting object.\n     * @arg softness: The softness of the shadow.\n     * @arg rayOrigin: The origin of the ray.\n     * @arg colour: Will store the colour of the object which casts the\n     *     shadow.\n     * @arg surface: Will store the surface properties of the object\n     *     which casts the shadow.\n     *\n     * @returns: The intenstity of shadow.\n     */\n    inline float computeSoftShadow(\n            const float3 &rayDirection,\n            const float distanceToShadePoint,\n            const float softness,\n            float3 &rayOrigin)\n    \{\n        float distanceTravelled = 0;\n        float shadowIntensity = 1.0f;\n        float lastStepDistance = FLT_MAX;\n\n        int iterations = 0;\n        float pixelFootprint = _hitTolerance;\n        while (distanceTravelled < distanceToShadePoint && iterations < _maxRaySteps / 2)\n        \{\n            const float stepDistance = fabs(\n                getMinDistanceToObjectInScene(rayOrigin, pixelFootprint)\n            );\n            const float stepDistanceSquared = stepDistance * stepDistance;\n            float softOffset = stepDistanceSquared / (2.0f * lastStepDistance);\n            shadowIntensity = min(\n                shadowIntensity,\n                softness * sqrt(stepDistanceSquared - softOffset * softOffset)\n                / max(0.0f, distanceTravelled - softOffset)\n            );\n\n            if (stepDistance < pixelFootprint)\n            \{\n                shadowIntensity = saturate(shadowIntensity);\n                return shadowIntensity * shadowIntensity * (3.0f - 2.0f * shadowIntensity);\n            \}\n\n            lastStepDistance = stepDistance;\n            rayOrigin += rayDirection * stepDistance;\n            distanceTravelled += stepDistance;\n            pixelFootprint += stepDistance * _hitTolerance;\n            iterations++;\n        \}\n\n        shadowIntensity = saturate(shadowIntensity);\n        return shadowIntensity * shadowIntensity * (3.0f - 2.0f * shadowIntensity);\n    \}\n\n\n    /**\n     * Compute a shadow value.\n     *\n     * @arg rayDirection: The direction of the shadow ray.\n     * @arg distanceToShadePoint: The maximum distance to check for\n     *     a shadow casting object.\n     * @arg rayOrigin: The origin of the ray.\n     * @arg colour: Will store the colour of the object which casts the\n     *     shadow.\n     * @arg surface: Will store the surface properties of the object\n     *     which casts the shadow.\n     *\n     * @returns: The intenstity of shadow.\n     */\n    float computeShadow(\n            const float3 &rayDirection,\n            const float distanceToShadePoint,\n            float3 &rayOrigin)\n    \{\n        float distanceTravelled = 0;\n        int iterations = 0;\n        float pixelFootprint = _hitTolerance;\n        while (distanceTravelled < distanceToShadePoint && iterations < _maxRaySteps / 2)\n        \{\n            const float stepDistance = fabs(\n                getMinDistanceToObjectInScene(rayOrigin, pixelFootprint)\n            );\n\n            if (stepDistance < pixelFootprint)\n            \{\n                return 0;\n            \}\n\n            rayOrigin += rayDirection * stepDistance;\n            distanceTravelled += stepDistance;\n            pixelFootprint += stepDistance * _hitTolerance;\n            iterations++;\n        \}\n\n        return 1;\n    \}\n\n\n    /**\n     * Compute the ambient occlusion.\n     *\n     * @arg rayDirection: The direction of the shadow ray.\n     * @arg rayOrigin: The origin of the ray.\n     * @arg amount: The amount to scale the occlusion value by.\n     * @arg iterations: The number of iterations to refine the\n     *     occlusion.\n     * @arg colour: Will store the colour of the final occluding object.\n     * @arg surface: Will store the surface properties of the final\n     *     occluding object.\n     *\n     * @returns: The occlusion.\n     */\n    inline float computeAmbientOcclusion(\n            const float3 &rayDirection,\n            const float3 &rayOrigin,\n            const float amount,\n            const int iterations)\n    \{\n        float occlusion = 0.0f;\n        float occlusionScaleFactor = 1.0f;\n        for(int iteration=0; iteration < iterations; iteration++)\n        \{\n            const float stepDistance = 0.001f + 0.15f * float(iteration) / 4.0f;\n            const float distanceToClosestObject = fabs(\n                getMinDistanceToObjectInScene(\n                    rayOrigin + stepDistance * rayDirection,\n                    _hitTolerance\n                )\n            );\n            occlusion += (stepDistance - distanceToClosestObject) * occlusionScaleFactor;\n            occlusionScaleFactor *= 0.95;\n        \}\n\n        return (\n            amount\n            * saturate(0.5f + 0.5f * rayDirection.y)  // ambient\n            * saturate(1.0f - 1.5f * occlusion)       // occlusion\n        );\n    \}\n\n\n    /**\n     * Compute the combined intensity of all lights on the surface of an\n     * object.\n     *\n     * @arg pointOnSurface: The point on the surface to compute the\n     *     light intensity at.\n     * @arg surfaceNormal: The normal direction to the surface.\n     * @arg surfaceColour: The colour of the object.\n     * @arg surface: The surface properties of the object.\n     * @arg lightColour: Will store the light colour.\n     *\n     * @returns: The light intensity.\n     */\n    inline float4 sampleArtificialLight(\n            const float3 &pointOnSurface,\n            const float3 &surfaceNormal,\n            const float offset,\n            const float3 &lightDirection,\n            const float distanceToLight,\n            const int selectedLight)\n    \{\n        // Read the light properties\n        SampleType(lights) light = lights(selectedLight, 0);\n        SampleType(lightProperties) lightProperty = lightProperties(selectedLight, 0);\n        SampleType(lightProperties1) lightProperty1 = lightProperties1(selectedLight, 0);\n\n        float2 intensity;\n\n        int lightType = (int) lightProperty.w;\n        int absLightType = abs(lightType);\n\n        if (absLightType == 0)\n        \{\n            // Ambient light, simply return the intensity.\n            intensity = float2(light.w, 1);\n        \}\n        else if (absLightType == 1)\n        \{\n            intensity = float2(\n                1.0f,\n                computeAmbientOcclusion(\n                    surfaceNormal,\n                    pointOnSurface,\n                    light.w,\n                    (int) light.x\n                )\n            );\n        \}\n        else\n        \{\n            float intensityAtPosition = lightIntensity(\n                light.w,\n                lightProperty1.y,\n                distanceToLight\n            );\n            float3 surfaceOffset = offsetPoint(\n                pointOnSurface,\n                surfaceNormal,\n                offset\n            );\n\n            float shadowIntensityAtPosition;\n            if (lightType < 0)\n            \{\n                shadowIntensityAtPosition = computeSoftShadow(\n                    lightDirection,\n                    distanceToLight,\n                    lightProperty1.x,\n                    surfaceOffset\n                );\n            \}\n            else\n            \{\n                shadowIntensityAtPosition = computeShadow(\n                    lightDirection,\n                    distanceToLight,\n                    surfaceOffset\n                );\n            \}\n\n            intensity = float2(intensityAtPosition, shadowIntensityAtPosition);\n        \}\n\n        return intensity.x * intensity.y * float4(\n            lightProperty.x,\n            lightProperty.y,\n            lightProperty.z,\n            0\n        );\n    \}\n\n\n    /**\n     *\n     */\n    float sampleLightData(\n            const float3 &seed,\n            const float3 &pointOnSurface,\n            const float3 &surfaceNormal,\n            const int emissiveIndices\[MAX_MIS_EMISSIVE_SHAPES],\n            const int numEmissive,\n            const bool sampleHDRI,\n            float3 &lightDirection,\n            float3 &lightNormal,\n            float &distanceToLight,\n            int &selectedLight)\n    \{\n        const float rng = random(random(seed.x + seed.y) + random(seed.z));\n        const int numSamplingOptions = (\n            numEmissive\n            + _lightTextureWidth\n            + sampleHDRI\n        );\n        selectedLight = max(0, (int) floor(rng * (numSamplingOptions - 0.0001f)));\n\n        float visibleSurfaceArea = 1.0f;\n\n        if (selectedLight < _lightTextureWidth)\n        \{\n            // Selected a 'fake' light eg. point, directional, ambient\n            SampleType(lights) light = lights(selectedLight, 0);\n            const int lightType = abs((int) lightProperties(selectedLight, 0, 3));\n\n            if (lightType > 1)\n            \{\n                getLightData(\n                    pointOnSurface,\n                    float3(light.x, light.y, light.z),\n                    lightType,\n                    _maxRayDistance,\n                    distanceToLight,\n                    visibleSurfaceArea,\n                    lightDirection,\n                    lightNormal\n                );\n            \}\n        \}\n        else if (selectedLight - _lightTextureWidth < numEmissive)\n        \{\n            // Selected one of the emissive objects\n            const int objectIndex = emissiveIndices\[selectedLight - _lightTextureWidth];\n\n            const float3 position = getObjectPosition(objectIndex);\n\n            // TODO don't assume it's a sphere\n            const float radius = dimensions(objectIndex, 0, 0);\n\n            sphericalLightData(\n                seed,\n                pointOnSurface,\n                position,\n                radius,\n                lightDirection,\n                lightNormal,\n                distanceToLight,\n                visibleSurfaceArea\n            );\n        \}\n        else\n        \{\n            hdriLightData(\n                surfaceNormal,\n                _maxRayDistance,\n                lightDirection,\n                lightNormal,\n                distanceToLight,\n                visibleSurfaceArea\n            );\n        \}\n\n        return sampleLightsPDF(max(1, numSamplingOptions), visibleSurfaceArea);\n    \}\n\n\n    /**\n     * Compute the combined intensity of all lights on the surface of an\n     * object.\n     *\n     * @arg pointOnSurface: The point on the surface to compute the\n     *     light intensity at.\n     * @arg surfaceNormal: The normal direction to the surface.\n     * @arg surfaceColour: The colour of the object.\n     * @arg surface: The surface properties of the object.\n     * @arg lightColour: Will store the light colour.\n     *\n     * @returns: The light intensity.\n     */\n    inline float4 marchPath(\n            const float3 &rayOrigin,\n            const float3 &rayDirection,\n            const float3 &initialSeed,\n            const float4 &initialThroughput,\n            const float maxRayDistance,\n            const float currentNestedDielectrics\[MAX_NESTED_DIELECTRICS]\[NESTED_DIELECTRIC_PARAMS],\n            const int currentNumNestedDielectrics,\n            const int numEmissive,\n            float3 &lightNormal)\n    \{\n        const int numLights = _lightTextureWidth + numEmissive + _sampleHDRIEquiangular;\n\n        float nestedDielectrics\[MAX_NESTED_DIELECTRICS]\[NESTED_DIELECTRIC_PARAMS];\n        for (int nestedIndex=0; nestedIndex <= currentNumNestedDielectrics; nestedIndex++)\n        \{\n            for (int dataIndex=0; dataIndex < NESTED_DIELECTRIC_PARAMS; dataIndex++)\n            \{\n                nestedDielectrics\[nestedIndex]\[dataIndex] = (\n                    currentNestedDielectrics\[nestedIndex]\[dataIndex]\n                );\n            \}\n        \}\n        int numNestedDielectrics = currentNumNestedDielectrics;\n        float refractiveIndex = nestedDielectrics\[numNestedDielectrics]\[REFRACTIVE_INDEX];\n        float4 scatteringCoefficient = float4(\n            nestedDielectrics\[numNestedDielectrics]\[SCATTERING_X],\n            nestedDielectrics\[numNestedDielectrics]\[SCATTERING_Y],\n            nestedDielectrics\[numNestedDielectrics]\[SCATTERING_Z],\n            0\n        );\n\n        float4 rayColour = float4(0);\n        float4 throughput = initialThroughput;\n\n        float lastStepDistance = 1.0f;\n\n        float firstObjectId = 0.0f;\n\n        int iterations = 0;\n        int bounces = 0;\n\n        float distanceTravelled = 0;\n        float distanceSinceLastBounce = distanceTravelled;\n        float distanceTravelledThroughMaterial = distanceTravelled;\n\n        // Get the next ray\n        float3 origin = rayOrigin;\n        float3 direction = rayDirection;\n        float3 positionOnRay = origin;\n\n        float4 diffusivity;\n        float4 specularity;\n        float4 transmittance;\n        float4 emittance;\n\n        float pixelFootprint = _hitTolerance;\n\n        float previousMaterialPDF = 1.0f;\n\n        float3 seed = initialSeed;\n\n        // March the ray\n        while (\n            distanceTravelled < maxRayDistance\n            && iterations < _maxRaySteps\n            && sumComponent(throughput) > _hitTolerance\n        ) \{\n            positionOnRay = origin + distanceSinceLastBounce * direction;\n\n            // Get the closest distance to an object\n            bool doRefraction = true;\n            float4 refractedScatteringCoefficient = float4(0);\n            float refractedTransmissionRoughness = 0.0f;\n            float refractedRefractiveIndex = 1.0f;\n            int objectId = 0;\n\n            const float signedStepDistance = getMinDistanceToObjectInScene(\n                positionOnRay,\n                pixelFootprint,\n                diffusivity,\n                specularity,\n                transmittance,\n                emittance,\n                refractedScatteringCoefficient,\n                refractedTransmissionRoughness,\n                refractedRefractiveIndex,\n                doRefraction,\n                objectId\n            );\n\n            // Get the absolute value, the true shortest distance to a\n            // surface\n            const float stepDistance = fabs(signedStepDistance);\n\n            // Keep track of the distance the ray has travelled\n            distanceTravelled += stepDistance;\n            distanceSinceLastBounce += stepDistance;\n            distanceTravelledThroughMaterial += stepDistance;\n\n            pixelFootprint += _hitTolerance * stepDistance;\n\n            // Have we hit the nearest object?\n            if (stepDistance < pixelFootprint)\n            \{\n                float3 intersectionPosition = positionOnRay + stepDistance * direction;\n\n                // The normal to the surface at that position\n                float3 surfaceNormal = sign(lastStepDistance) * estimateSurfaceNormal(\n                    intersectionPosition,\n                    pixelFootprint\n                );\n\n                int noiseOptions;\n                const float noiseValue = getNoiseValue(\n                    objectId - 1,\n                    intersectionPosition,\n                    noiseOptions\n                );\n                if (noiseValue >= 0.0f)\n                \{\n                    useNoiseOnMaterial(\n                        noiseOptions,\n                        noiseValue,\n                        diffusivity,\n                        specularity,\n                        transmittance,\n                        emittance,\n                        refractedTransmissionRoughness,\n                        refractedRefractiveIndex\n                    );\n                \}\n\n                const float reflectionOffset = pixelFootprint * _shadowBias;\n                const float transmissionOffset = (\n                    (2.0f * pixelFootprint + stepDistance)\n                    * _shadowBias\n                );\n\n                float lightPDF = 0.0f;\n                float3 lightDirection = surfaceNormal;\n                float3 lightNormal = -surfaceNormal;\n                float distanceToLight = 0.0f;\n\n                // Get material data for material and light sampling\n                float4 materialBRDF;\n                float4 lightBRDF;\n                float4 materialEmissiveColour;\n                float3 bounceDirection;\n                float materialLightPDF;\n                const float materialPDF = sampleMaterial(\n                    seed,\n                    true,\n                    surfaceNormal,\n                    direction,\n                    lightDirection,\n                    diffusivity,\n                    reflectionOffset,\n                    transmissionOffset,\n                    transmittance,\n                    doRefraction,\n                    refractedRefractiveIndex,\n                    refractedScatteringCoefficient,\n                    refractedTransmissionRoughness,\n                    specularity,\n                    diffusivity.w,\n                    emittance,\n                    objectId,\n                    distanceToLight,\n                    isExitingObject(\n                        nestedDielectrics\[numNestedDielectrics]\[OBJECT_ID] - 1,\n                        objectId - 1\n                    ),\n                    materialEmissiveColour,\n                    materialBRDF,\n                    lightBRDF,\n                    bounceDirection,\n                    intersectionPosition,\n                    nestedDielectrics,\n                    numNestedDielectrics,\n                    refractiveIndex,\n                    scatteringCoefficient,\n                    distanceTravelledThroughMaterial,\n                    materialLightPDF\n                );\n\n                const float radius = dimensions(objectId - 1, 0, 0);\n                const float visibleSurfaceArea = 2.0f * PI * radius * radius;\n\n                rayColour += (\n                    materialEmissiveColour\n                    * throughput\n                    * balanceHeuristic(\n                        previousMaterialPDF,\n                        sampleLightsPDF(numLights, visibleSurfaceArea)\n                    )\n                );\n\n                throughput *= materialBRDF / materialPDF;\n\n                // Exit if we have reached the bounce limit\n                // or with a random chance\n                const float rng = random(random(seed.x) + random(seed.y + random(seed.z)));\n                const float exitProbability = max(\n                    throughput.x,\n                    throughput.y,\n                    throughput.z\n                );\n                if (\n                    ++bounces >= _maxLightSamplingBounces\n                    || emittance.w > 0.0f\n                    || exitProbability <= rng\n                ) \{\n                    return rayColour;\n                \}\n\n                // Prepare the variables for the next march\n                previousMaterialPDF = materialPDF;\n\n                distanceSinceLastBounce = 0.0f;\n\n                direction = bounceDirection;\n                origin = intersectionPosition;\n\n                // Account for the lost intensity from the early exits\n                throughput /= exitProbability;\n\n                // Reset the pixel footprint so multiple reflections don't\n                // reduce precision\n                pixelFootprint = _hitTolerance;\n\n                // Update the random seed\n                seed = 5.3749f * random(\n                    seed\n                    + rng\n                    + random(fabs(intersectionPosition + direction))\n                );\n            \}\n\n            lastStepDistance = signedStepDistance;\n            iterations++;\n        \}\n\n        lightNormal = -direction;\n\n        const float4 extinctionCoefficient = float4(\n            nestedDielectrics\[numNestedDielectrics]\[EXTINCTION_X],\n            nestedDielectrics\[numNestedDielectrics]\[EXTINCTION_Y],\n            nestedDielectrics\[numNestedDielectrics]\[EXTINCTION_Z],\n            0\n        );\n\n        const float correctedDistance = (\n            distanceSinceLastBounce\n            + _maxRayDistance\n            - distanceTravelled\n        );\n\n        // Read the hdri value in the direction the ray was last travelling\n        // and absorb an amount of light proportional to the distance travelled\n        // through the last material\n        rayColour += throughput * readHDRIValue(direction) * scatteringCoefficient * exp(\n            -extinctionCoefficient * correctedDistance\n        );\n\n        return rayColour;\n    \}\n\n\n    /**\n     * Compute the combined intensity of all lights on the surface of an\n     * object.\n     *\n     * @arg pointOnSurface: The point on the surface to compute the\n     *     light intensity at.\n     * @arg surfaceNormal: The normal direction to the surface.\n     *\n     * @returns: The light intensity.\n     */\n    inline float4 sampleArtificialLights(\n            const float3 &pointOnSurface,\n            const float3 &surfaceNormal,\n            const float4 &emittance,\n            const float diffuseProbability,\n            const float pixelFootprint)\n    \{\n        float2 lightIntensity = float2(emittance.w, 0);\n        float4 lightColour = emittance;\n\n        float2 currentLightIntensity;\n\n        // for each light in the scene\n        for (int lightIndex=0; lightIndex < _lightTextureWidth; lightIndex++)\n        \{\n            float3 lightDirection = surfaceNormal;\n            float3 lightNormal = -surfaceNormal;\n            float distanceToLight = 0.0f;\n            float visibleSurfaceArea = 1.0f;\n\n            SampleType(lights) light = lights(lightIndex, 0);\n            const int lightType = abs((int) lightProperties(lightIndex, 0, 3));\n\n            if (lightType > 1)\n            \{\n                getLightData(\n                    pointOnSurface,\n                    float3(light.x, light.y, light.z),\n                    lightType,\n                    _maxRayDistance,\n                    distanceToLight,\n                    visibleSurfaceArea,\n                    lightDirection,\n                    lightNormal\n                );\n            \}\n\n            // Compute the intensity\n            lightColour += sampleArtificialLight(\n                pointOnSurface,\n                surfaceNormal,\n                pixelFootprint * _shadowBias,\n                lightDirection,\n                distanceToLight,\n                lightIndex\n            );\n        \}\n\n        // Read the hdri diffuse light contribution\n        if (_usePrecomputedIrradiance && diffuseProbability > _hitTolerance)\n        \{\n            const float4 hdriLightColour = readIrradianceValue(surfaceNormal);\n            lightColour += diffuseProbability * hdriLightColour;\n            lightIntensity += float2(\n                diffuseProbability * length(\n                    float3(\n                        hdriLightColour.x,\n                        hdriLightColour.y,\n                        hdriLightColour.z\n                    )\n                ),\n                1.0f\n            );\n        \}\n\n        return saturate(lightColour);\n    \}\n\n\n    float4 sampleLight(\n            const float3 &seed,\n            const float4 &throughput,\n            const float4 &lightBRDF,\n            const float distanceToLight,\n            const float3 &surfaceNormal,\n            const float3 &position,\n            const float3 &lightDirection,\n            const float lightPDF,\n            const float materialPDF,\n            const float offset,\n            const int selectedLight,\n            const int numEmissive,\n            const bool sampleHDRI,\n            const float nestedDielectrics\[MAX_NESTED_DIELECTRICS]\[NESTED_DIELECTRIC_PARAMS],\n            const int numNestedDielectrics,\n            float3 &lightNormal)\n    \{\n        float4 lightEmissiveColour = float4(0);\n        float lightGeometryFactor = 1.0f;\n        if (selectedLight < _lightTextureWidth)\n        \{\n            lightEmissiveColour = throughput * sampleArtificialLight(\n                position,\n                surfaceNormal,\n                offset,\n                lightDirection,\n                distanceToLight,\n                selectedLight\n            );\n        \}\n        else if (selectedLight - _lightTextureWidth - sampleHDRI < numEmissive)\n        \{\n            float3 direction;\n            float distance = distanceToLight;\n            if (selectedLight - _lightTextureWidth == numEmissive)\n            \{\n                direction = cosineDirectionInHemisphere(\n                    lightDirection,\n                    seed * 1.97812f\n                );\n            \}\n            else if (_maxLightSamplingBounces > 1 && __lightSamplingAngle > 0.0f)\n            \{\n                direction = uniformDirectionInSolidAngle(\n                    lightDirection,\n                    __lightSamplingAngle,\n                    seed * 1.3179f\n                );\n                distance *= 2.0f;\n            \}\n            else\n            \{\n                direction = lightDirection;\n            \}\n\n            lightEmissiveColour = marchPath(\n                offsetPoint(\n                    position,\n                    surfaceNormal,\n                    offset\n                ),\n                direction,\n                seed,\n                throughput,\n                distance,\n                nestedDielectrics,\n                numNestedDielectrics,\n                numEmissive,\n                lightNormal\n            );\n            lightGeometryFactor = geometryFactor(\n                direction,\n                lightNormal,\n                distanceToLight\n            );\n        \}\n\n        return (\n            lightEmissiveColour\n            * lightBRDF\n            * lightGeometryFactor\n            * balanceHeuristic(\n                lightPDF,\n                materialPDF * lightGeometryFactor\n            ) / lightPDF\n        );\n    \}\n\n\n    /**\n     *\n     */\n    float4 sampleEquiangular(\n            const float3 &seed,\n            const float3 &intersectionPosition,\n            const float3 &rayOrigin,\n            const float3 &rayDirection,\n            const int emissiveIndices\[MAX_MIS_EMISSIVE_SHAPES],\n            const int numEmissive,\n            const float distanceSinceLastBounce,\n            const float nestedDielectrics\[MAX_NESTED_DIELECTRICS]\[NESTED_DIELECTRIC_PARAMS],\n            const int numNestedDielectrics,\n            float4 &throughput,\n            float4 &scatteringCoefficient)\n    \{\n        const float4 extinctionCoefficient = float4(\n            nestedDielectrics\[numNestedDielectrics]\[EXTINCTION_X],\n            nestedDielectrics\[numNestedDielectrics]\[EXTINCTION_Y],\n            nestedDielectrics\[numNestedDielectrics]\[EXTINCTION_Z],\n            0\n        );\n        int objectIndex = nestedDielectrics\[numNestedDielectrics]\[OBJECT_ID] - 1;\n        if (objectIndex < 0)\n        \{\n            // blink cannot handle single pixel images in versions < 12.1\n            // so we have a weird dummy pixel when only one object is passed\n            // to the scene\n            objectIndex = _objectTextureWidth == 0 ? 1 : _objectTextureWidth;\n        \}\n\n        float3 surfaceNormal = randomUnitVector(seed * 1.7324f);\n        float3 lightDirection = surfaceNormal;\n        float3 lightNormal = -surfaceNormal;\n        float distanceToLight = 0.0f;\n        int selectedLight;\n\n        const float lightPDF = sampleLightData(\n            seed * 1.3734f,\n            intersectionPosition,\n            surfaceNormal,\n            emissiveIndices,\n            numEmissive,\n            _sampleHDRIEquiangular,\n            lightDirection,\n            lightNormal,\n            distanceToLight,\n            selectedLight\n        );\n        const float3 lightPosition = intersectionPosition + lightDirection * distanceToLight;\n\n        const float offset = random(random(seed.z) + random(seed.y + random(seed.x)));\n\n        float scatteringNoiseSum = 0.0f;\n        float extinctionNoiseSum = 0.0f;\n\n        float4 scatteredColour = float4(0);\n        for (int step=1; step <= _equiangularSamples; step++)\n        \{\n            const float uniform = (step + offset - 1) / (float) _equiangularSamples;\n\n            float equiangularDistance;\n            float equiangularPDF = _equiangularSamples * sampleEquiangularPDF(\n                uniform,\n                distanceSinceLastBounce,\n                rayOrigin,\n                rayDirection,\n                lightPosition,\n                equiangularDistance\n            );\n\n            const float3 particlePosition = rayOrigin + equiangularDistance * rayDirection;\n            const float3 particleToLight = lightPosition - particlePosition;\n            distanceToLight = length(particleToLight);\n\n            if (distanceToLight > 0.0f)\n            \{\n                lightDirection = normalize(particleToLight);\n            \}\n\n            int noiseOptions;\n            float noiseValue = getNoiseValue(\n                objectIndex,\n                particlePosition,\n                noiseOptions\n            );\n            float scatteringNoise = noiseValue;\n            float extinctionNoise = noiseValue;\n            if (noiseValue < 0.0f || !(noiseOptions & 1024))\n            \{\n                scatteringNoise = 1.0f;\n            \}\n            if (noiseValue < 0.0f || !(noiseOptions & 2048))\n            \{\n                extinctionNoise = 1.0f;\n            \}\n\n            scatteringNoiseSum += scatteringNoise;\n            extinctionNoiseSum += extinctionNoise;\n\n            const float4 lightBRDF = exp(\n                -extinctionCoefficient\n                * extinctionNoise\n                * (distanceToLight + equiangularDistance)\n            );\n\n            scatteredColour += scatteringCoefficient * scatteringNoise * sampleLight(\n                seed * 1.9757f / step,\n                throughput * lightBRDF / lightPDF,\n                lightBRDF,\n                distanceToLight,\n                lightDirection,\n                particlePosition,\n                lightDirection,\n                equiangularPDF,\n                lightPDF,\n                0.0f,\n                selectedLight,\n                numEmissive,\n                _sampleHDRIEquiangular,\n                nestedDielectrics,\n                numNestedDielectrics,\n                lightNormal\n            );\n        \}\n\n        throughput *= exp(\n            -extinctionCoefficient\n            * extinctionNoiseSum\n            * distanceSinceLastBounce\n            / (float) _equiangularSamples\n        ) / lightPDF;\n\n        return scatteredColour;\n    \}\n\n\n    /**\n     * March a ray through the scene.\n     *\n     * @arg rayOrigin: The origin of the ray.\n     * @arg rayDirection: The direction of the ray.\n     * @arg seed: A random value to use as the seed for roughness.\n     *\n     * @returns: The ray colour.\n     */\n    float4 marchPath(\n            const float3 &rayOrigin,\n            const float3 &rayDirection,\n            const int emissiveIndices\[MAX_MIS_EMISSIVE_SHAPES],\n            const int numEmissive,\n            float3 &seed)\n    \{\n        const int numLights = _lightTextureWidth + numEmissive + _sampleHDRI;\n\n        float refractiveIndex = _refractiveIndex;\n        float4 scatteringCoefficient = _scatteringCoefficient;\n\n        float nestedDielectrics\[MAX_NESTED_DIELECTRICS]\[NESTED_DIELECTRIC_PARAMS];\n        nestedDielectrics\[0]\[EXTINCTION_X] = _extinctionCoefficient.x;\n        nestedDielectrics\[0]\[EXTINCTION_Y] = _extinctionCoefficient.y;\n        nestedDielectrics\[0]\[EXTINCTION_Z] = _extinctionCoefficient.z;\n        nestedDielectrics\[0]\[OBJECT_ID] = -1;\n        nestedDielectrics\[0]\[REFRACTIVE_INDEX] = refractiveIndex;\n        nestedDielectrics\[0]\[SCATTERING_X] = scatteringCoefficient.x;\n        nestedDielectrics\[0]\[SCATTERING_Y] = scatteringCoefficient.y;\n        nestedDielectrics\[0]\[SCATTERING_Z] = scatteringCoefficient.z;\n        nestedDielectrics\[0]\[DO_REFRACTION] = false;\n        int numNestedDielectrics = 0;\n\n        float4 rayColour = float4(0);\n        float4 throughput = float4(1);\n\n        float lastStepDistance = 1.0f;\n\n        float firstObjectId = 0.0f;\n\n        int iterations = 0;\n        int bounces = 0;\n\n        float distanceTravelled = 0;\n        float distanceSinceLastBounce = distanceTravelled;\n        float distanceTravelledThroughMaterial = distanceTravelled;\n\n        // Get the next ray\n        float3 origin = rayOrigin;\n        float3 direction = rayDirection;\n        float3 positionOnRay = origin;\n\n        float4 diffusivity;\n        float4 specularity;\n        float4 transmittance;\n        float4 emittance;\n\n        float pixelFootprint = _hitTolerance;\n\n        float previousMaterialPDF = 1.0f;\n\n        bool sampledLight = false;\n\n        // March the ray\n        while (\n            distanceTravelled < _maxRayDistance\n            && iterations < _maxRaySteps\n            && sumComponent(throughput) > _hitTolerance\n        ) \{\n            positionOnRay = origin + distanceSinceLastBounce * direction;\n\n            // Get the closest distance to an object\n            bool doRefraction = true;\n            float4 refractedScatteringCoefficient = float4(0);\n            float refractedTransmissionRoughness = 0.0f;\n            float refractedRefractiveIndex = 1.0f;\n            int objectId = 0;\n\n            // Keep the signed distance so we know whether or not we are\n            // inside the object\n            const float signedStepDistance = getMinDistanceToObjectInScene(\n                positionOnRay,\n                pixelFootprint,\n                diffusivity,\n                specularity,\n                transmittance,\n                emittance,\n                refractedScatteringCoefficient,\n                refractedTransmissionRoughness,\n                refractedRefractiveIndex,\n                doRefraction,\n                objectId\n            );\n\n            // Get the absolute value, the true shortest distance to a\n            // surface\n            const float stepDistance = fabs(signedStepDistance);\n\n            // Keep track of the distance the ray has travelled\n            distanceTravelled += stepDistance;\n            distanceSinceLastBounce += stepDistance;\n            distanceTravelledThroughMaterial += stepDistance;\n\n            pixelFootprint += _hitTolerance * stepDistance;\n\n            // Have we hit the nearest object?\n            if (stepDistance < pixelFootprint)\n            \{\n                float3 intersectionPosition = positionOnRay + stepDistance * direction;\n\n                // The normal to the surface at that position\n                float3 surfaceNormal = sign(lastStepDistance) * estimateSurfaceNormal(\n                    intersectionPosition,\n                    pixelFootprint\n                );\n\n                if (bounces == 0)\n                \{\n                    // Keep the ID of the first object hit, so we can\n                    // store it in the alpha channel\n                    firstObjectId = objectId;\n\n                    // Early exit for the various AOVs that are not 'beauty'\n                    if (_outputType > BEAUTY_AOV && _outputType < STATS_AOV)\n                    \{\n                        return earlyExitAOVs(\n                            _outputType,\n                            intersectionPosition,\n                            worldToLocal(firstObjectId - 1, intersectionPosition),\n                            surfaceNormal,\n                            fabs(matmul(\n                                _cameraWorldMatrix.invert(),\n                                float4(\n                                    intersectionPosition.x,\n                                    intersectionPosition.y,\n                                    intersectionPosition.z,\n                                    1.0f\n                                )\n                            )\[2]),\n                            firstObjectId\n                        );\n                    \}\n                \}\n\n                int noiseOptions;\n                const float noiseValue = getNoiseValue(\n                    objectId - 1,\n                    intersectionPosition,\n                    noiseOptions\n                );\n                if (noiseValue >= 0.0f)\n                \{\n                    useNoiseOnMaterial(\n                        noiseOptions,\n                        noiseValue,\n                        diffusivity,\n                        specularity,\n                        transmittance,\n                        emittance,\n                        refractedTransmissionRoughness,\n                        refractedRefractiveIndex\n                    );\n                \}\n\n                const float reflectionOffset = pixelFootprint * _shadowBias;\n                const float transmissionOffset = (\n                    (2.0f * pixelFootprint + stepDistance)\n                    * _shadowBias\n                );\n\n                if (\n                    __equiangularSamplingEnabled\n                    && (\n                        length(scatteringCoefficient) > 0.0f\n                        || nestedDielectrics\[numNestedDielectrics]\[EXTINCTION_X] > 0.0f\n                        || nestedDielectrics\[numNestedDielectrics]\[EXTINCTION_Y] > 0.0f\n                        || nestedDielectrics\[numNestedDielectrics]\[EXTINCTION_Z] > 0.0f\n                    )\n                ) \{\n                    // Perform Equi-Angular Sampling\n                    rayColour += sampleEquiangular(\n                        seed,\n                        intersectionPosition,\n                        origin,\n                        direction,\n                        emissiveIndices,\n                        numEmissive,\n                        distanceSinceLastBounce,\n                        nestedDielectrics,\n                        numNestedDielectrics,\n                        throughput,\n                        scatteringCoefficient\n                    );\n                \}\n\n                float lightPDF = 0.0f;\n                float3 lightDirection = surfaceNormal;\n                float3 lightNormal = -surfaceNormal;\n                float distanceToLight = 0.0f;\n                int selectedLight;\n\n                if (__lightSamplingEnabled && numLights > 0)\n                \{\n                    // Get data for light sampling\n                    lightPDF = sampleLightData(\n                        seed,\n                        intersectionPosition,\n                        surfaceNormal,\n                        emissiveIndices,\n                        numEmissive,\n                        _sampleHDRI,\n                        lightDirection,\n                        lightNormal,\n                        distanceToLight,\n                        selectedLight\n                    );\n                \}\n\n                // Get material data for material and light sampling\n                float4 materialBRDF;\n                float4 lightBRDF;\n                float4 materialEmissiveColour;\n                float3 bounceDirection;\n                float materialLightPDF;\n                const float materialPDF = sampleMaterial(\n                    seed * 1.73901f,\n                    !__equiangularSamplingEnabled,\n                    surfaceNormal,\n                    direction,\n                    lightDirection,\n                    diffusivity,\n                    reflectionOffset,\n                    transmissionOffset,\n                    transmittance,\n                    doRefraction,\n                    refractedRefractiveIndex,\n                    refractedScatteringCoefficient,\n                    refractedTransmissionRoughness,\n                    specularity,\n                    diffusivity.w,\n                    emittance,\n                    objectId,\n                    distanceToLight,\n                    isExitingObject(\n                        nestedDielectrics\[numNestedDielectrics]\[OBJECT_ID] - 1,\n                        objectId - 1\n                    ),\n                    materialEmissiveColour,\n                    materialBRDF,\n                    lightBRDF,\n                    bounceDirection,\n                    intersectionPosition,\n                    nestedDielectrics,\n                    numNestedDielectrics,\n                    refractiveIndex,\n                    scatteringCoefficient,\n                    distanceTravelledThroughMaterial,\n                    materialLightPDF\n                );\n\n                if (\n                    __lightSamplingEnabled\n                    && lightPDF > _hitTolerance\n                    && materialLightPDF > _hitTolerance\n                ) \{\n                    // Perform MIS light sampling\n                    rayColour += sampleLight(\n                        seed * 1.6912f,\n                        throughput,\n                        lightBRDF,\n                        distanceToLight,\n                        surfaceNormal,\n                        intersectionPosition,\n                        lightDirection,\n                        lightPDF,\n                        materialLightPDF,\n                        reflectionOffset,\n                        selectedLight,\n                        numEmissive,\n                        _sampleHDRI,\n                        nestedDielectrics,\n                        numNestedDielectrics,\n                        lightNormal\n                    );\n\n                    sampledLight = true;\n                \}\n\n                // Perform MIS material sampling\n                // TODO don't assume this object is a sphere\n                const float radius = dimensions(objectId - 1, 0, 0);\n                const float visibleSurfaceArea = 2.0f * PI * radius * radius;\n\n                rayColour += (\n                    materialEmissiveColour\n                    * throughput\n                    * balanceHeuristic(\n                        previousMaterialPDF,\n                        sampleLightsPDF(numLights, visibleSurfaceArea)\n                    )\n                );\n\n                throughput *= materialBRDF / materialPDF;\n\n                // Exit if we have reached the bounce limit\n                // or with a random chance\n                const float rng = random(random(seed.x) + random(seed.y + random(seed.z)));\n                const float exitProbability = max(\n                    throughput.x,\n                    throughput.y,\n                    throughput.z\n                );\n                if (++bounces >= __bouncesPerRay || exitProbability <= rng)\n                \{\n                    return finalAOVs(\n                        _outputType,\n                        iterations,\n                        bounces,\n                        firstObjectId,\n                        rayColour\n                    );\n                \}\n\n                // Prepare the variables for the next march\n                previousMaterialPDF = materialPDF;\n\n                distanceSinceLastBounce = 0.0f;\n\n                direction = bounceDirection;\n                origin = intersectionPosition;\n\n                // Account for the lost intensity from the early exits\n                throughput /= exitProbability;\n\n                // Reset the pixel footprint so multiple reflections don't\n                // reduce precision\n                pixelFootprint = _hitTolerance;\n\n                // Update the random seed\n                seed = 7.134f * random(\n                    seed\n                    + rng\n                    + random(fabs(intersectionPosition + direction))\n                );\n            \}\n\n            lastStepDistance = signedStepDistance;\n            iterations++;\n        \}\n\n        // If we are not computing the scene value and we have missed all\n        // objects, return an appropriate colour.\n        if (_outputType > BEAUTY_AOV)\n        \{\n            return rayMissAOVs(\n                _outputType,\n                iterations,\n                bounces,\n                firstObjectId\n            );\n        \}\n\n        if (\n            __equiangularSamplingEnabled\n            && (\n                length(scatteringCoefficient) > 0.0f\n                || nestedDielectrics\[numNestedDielectrics]\[EXTINCTION_X] > 0.0f\n                || nestedDielectrics\[numNestedDielectrics]\[EXTINCTION_Y] > 0.0f\n                || nestedDielectrics\[numNestedDielectrics]\[EXTINCTION_Z] > 0.0f\n            )\n        ) \{\n            const float correctedDistance = (\n                distanceSinceLastBounce\n                + _maxRayDistance\n                - distanceTravelled\n            );\n\n            // Perform Equi-Angular Sampling\n            rayColour += sampleEquiangular(\n                seed,\n                origin + correctedDistance * direction,\n                origin,\n                direction,\n                emissiveIndices,\n                numEmissive,\n                correctedDistance,\n                nestedDielectrics,\n                numNestedDielectrics,\n                throughput,\n                scatteringCoefficient\n            );\n        \}\n\n        // Read the hdri value in the direction the ray was last travelling\n        rayColour += throughput * readHDRIValue(direction);\n\n        rayColour.w = (bounces > 0) * firstObjectId;\n        return rayColour;\n    \}\n\n\n    /**\n     * March a ray through the scene.\n     *\n     * @arg rayOrigin: The origin of the ray.\n     * @arg rayDirection: The direction of the ray.\n     * @arg seed: A random value to use as the seed for roughness.\n     *\n     * @returns: The ray colour.\n     */\n    float4 marchRay(\n            const float3 &rayOrigin,\n            const float3 &rayDirection,\n            float3 &seed)\n    \{\n        const int lastRay = min(MAX_RAYS_PER_SUBPIXEL, _maxSpawnableRays);\n\n        // rayOrigin, rayDirection, rayIntensity, index of refraction\n        float rays\[MAX_RAYS_PER_SUBPIXEL]\[3 + 3 + 1 + 1];\n        rays\[0]\[0] = rayOrigin.x;\n        rays\[0]\[1] = rayOrigin.y;\n        rays\[0]\[2] = rayOrigin.z;\n\n        rays\[0]\[3] = rayDirection.x;\n        rays\[0]\[4] = rayDirection.y;\n        rays\[0]\[5] = rayDirection.z;\n\n        rays\[0]\[6] = 1.0f;\n\n        rays\[0]\[7] = _refractiveIndex;\n\n        int numRays = 1;\n        int currentRayIndex = 0;\n\n        float4 diffusivity;\n        float4 specularity;\n        float4 transmittance;\n        float4 emittance;\n\n        float4 rayColour = float4(0);\n        float4 lightColour = float4(0);\n\n        float lastStepDistance = 1.0f;\n\n        float firstObjectId = 0.0f;\n\n        float pixelFootprint = _hitTolerance;\n\n        float id = 0.0f;\n        float depth = 0.0f;\n\n        int bounces = 0;\n        int iterations = 1;\n\n        // While we have not reached the ray limit\n        while (currentRayIndex < numRays)\n        \{\n            // Reset these values\n            float lightIntensity = 1;\n            float distanceTravelled = 0;\n            bool madeContact = false;\n\n            // Get the next ray\n            float3 origin = float3(\n                rays\[currentRayIndex]\[0],\n                rays\[currentRayIndex]\[1],\n                rays\[currentRayIndex]\[2]\n            );\n            const float3 direction = float3(\n                rays\[currentRayIndex]\[3],\n                rays\[currentRayIndex]\[4],\n                rays\[currentRayIndex]\[5]\n            );\n            const float rayIntensity = rays\[currentRayIndex]\[6];\n\n            float3 positionOnRay = origin;\n\n            // March the ray\n            while (\n                distanceTravelled < _maxRayDistance\n                && iterations < _maxRaySteps\n                && rayIntensity > _hitTolerance\n            ) \{\n                positionOnRay = origin + distanceTravelled * direction;\n\n                // Get the closest distance to an object\n                bool doRefraction = true;\n                float4 refractedScatteringCoefficient = float4(0);\n                float refractedTransmissionRoughness = 0.0f;\n                float refractedRefractiveIndex = 1.0f;\n                int objectId = 0;\n\n                // Get the closest distance to an object\n                const float signedStepDistance = getMinDistanceToObjectInScene(\n                    positionOnRay,\n                    pixelFootprint,\n                    diffusivity,\n                    specularity,\n                    transmittance,\n                    emittance,\n                    refractedScatteringCoefficient,\n                    refractedTransmissionRoughness,\n                    refractedRefractiveIndex,\n                    doRefraction,\n                    objectId\n                );\n\n                // Get the absolute value, the true shortest distance to a\n                // surface\n                const float stepDistance = fabs(signedStepDistance);\n\n                // Keep track of the distance the ray has travelled\n                distanceTravelled += stepDistance;\n\n                pixelFootprint += _hitTolerance * stepDistance;\n\n                // Have we hit the nearest object?\n                if (stepDistance < pixelFootprint)\n                \{\n                    float3 intersectionPosition = positionOnRay + stepDistance * direction;\n\n                    // The normal to the surface at that position\n                    float3 surfaceNormal = sign(lastStepDistance) * estimateSurfaceNormal(\n                        intersectionPosition,\n                        pixelFootprint\n                    );\n\n                    // Roughen the surface\n                    if (diffusivity.w > 0.0f)\n                    \{\n                        surfaceNormal = uniformDirectionInSolidAngle(\n                            surfaceNormal,\n                            diffusivity.w * diffusivity.w,\n                            seed\n                        );\n                    \}\n\n                    // Keep the ID of the first object hit, so we can\n                    // store it in the alpha channel\n                    if (bounces == 0)\n                    \{\n                        // Keep the ID of the first object hit, so we can\n                        // store it in the alpha channel\n                        firstObjectId = objectId;\n\n                        // Early exit for the various AOVs that are not 'beauty'\n                        if (_outputType > BEAUTY_AOV && _outputType < STATS_AOV)\n                        \{\n                            return earlyExitAOVs(\n                                _outputType,\n                                intersectionPosition,\n                                worldToLocal(firstObjectId - 1, intersectionPosition),\n                                surfaceNormal,\n                                fabs(matmul(\n                                    _cameraWorldMatrix.invert(),\n                                    float4(\n                                        intersectionPosition.x,\n                                        intersectionPosition.y,\n                                        intersectionPosition.z,\n                                        1.0f\n                                    )\n                                )\[2]),\n                                firstObjectId\n                            );\n                        \}\n                    \}\n\n                    int noiseOptions;\n                    const float noiseValue = getNoiseValue(\n                        objectId - 1,\n                        intersectionPosition,\n                        noiseOptions\n                    );\n                    if (noiseValue >= 0.0f)\n                    \{\n                        useNoiseOnMaterial(\n                            noiseOptions,\n                            noiseValue,\n                            diffusivity,\n                            specularity,\n                            transmittance,\n                            emittance,\n                            refractedTransmissionRoughness,\n                            refractedRefractiveIndex\n                        );\n                    \}\n\n                    const float diffuseProbability = saturate(1 - specularity.w - transmittance.w);\n\n                    // Get the light intensity\n                    lightColour = sampleArtificialLights(\n                        intersectionPosition,\n                        surfaceNormal,\n                        emittance,\n                        diffuseProbability,\n                        pixelFootprint\n                    );\n\n                    // Update the colour of the ray\n                    rayColour = blend(\n                        lightColour * diffusivity,\n                        rayColour,\n                        rayIntensity * diffuseProbability * length(lightColour)\n                    );\n\n                    // Exit if we have reached the bounce limit\n                    if (++bounces >= __bouncesPerRay)\n                    \{\n                        return finalAOVs(\n                            _outputType,\n                            iterations,\n                            bounces,\n                            firstObjectId,\n                            rayColour\n                        );\n                    \}\n\n                    // Otherwise compute the refraction values\n                    const float incidentRefractiveIndex = rays\[currentRayIndex]\[7];\n                    const float reflectivity = schlickReflectionCoefficient(\n                        direction,\n                        surfaceNormal,\n                        incidentRefractiveIndex,\n                        refractedRefractiveIndex\n                    );\n                    const float refraction = saturate(transmittance.w * (1 - reflectivity));\n                    float intensity = rayIntensity * refraction;\n                    float reflection = specularity.w;\n\n                    // And spawn a refracted ray using them\n                    if (numRays < lastRay && intensity > _hitTolerance)\n                    \{\n                        reflection = clamp(reflection + reflectivity, 0.0f, 1.0f - refraction);\n\n                        const float3 refractedDirection = refractRayThroughSurface(\n                            direction,\n                            surfaceNormal,\n                            incidentRefractiveIndex,\n                            refractedRefractiveIndex\n                        );\n\n                        // Offset the point so that it doesn't get trapped on\n                        // surface.\n                        const float3 refractedOrigin = offsetPoint(\n                            intersectionPosition,\n                            -surfaceNormal,\n                            (2.0f * pixelFootprint + stepDistance) * _shadowBias\n                        );\n\n                        rays\[numRays]\[0] = refractedOrigin.x;\n                        rays\[numRays]\[1] = refractedOrigin.y;\n                        rays\[numRays]\[2] = refractedOrigin.z;\n\n                        rays\[numRays]\[3] = refractedDirection.x;\n                        rays\[numRays]\[4] = refractedDirection.y;\n                        rays\[numRays]\[5] = refractedDirection.z;\n\n                        rays\[numRays]\[6] = intensity;\n\n                        rays\[numRays]\[7] = refractedRefractiveIndex;\n\n                        numRays++;\n                    \}\n\n                    // Also spawn a reflected ray\n                    intensity = rayIntensity * reflection;\n                    if (numRays < lastRay && intensity > _hitTolerance)\n                    \{\n                        const float3 reflectedDirection = reflectRayOffSurface(\n                            direction,\n                            surfaceNormal\n                        );\n\n                        // Offset the point so that it doesn't get trapped on\n                        // surface.\n                        const float3 reflectedOrigin = offsetPoint(\n                            intersectionPosition,\n                            surfaceNormal,\n                            pixelFootprint * _shadowBias\n                        );\n\n                        rays\[numRays]\[0] = reflectedOrigin.x;\n                        rays\[numRays]\[1] = reflectedOrigin.y;\n                        rays\[numRays]\[2] = reflectedOrigin.z;\n\n                        rays\[numRays]\[3] = reflectedDirection.x;\n                        rays\[numRays]\[4] = reflectedDirection.y;\n                        rays\[numRays]\[5] = reflectedDirection.z;\n\n                        rays\[numRays]\[6] = intensity;\n\n                        rays\[numRays]\[7] = incidentRefractiveIndex;\n\n                        numRays++;\n                    \}\n\n                    // Flag that we have collided with at least one object.\n                    madeContact = true;\n                    pixelFootprint = _hitTolerance;\n\n                    // Update the random seed\n                    seed = 5.689f * random(\n                        seed + random(fabs(intersectionPosition + direction))\n                    );\n\n                    break;\n                \}\n\n                lastStepDistance = signedStepDistance;\n                iterations++;\n            \}\n\n            // If we are not computing the scene value and we have missed all\n            // objects, return black.\n            if (_outputType > 0)\n            \{\n                return rayMissAOVs(\n                    _outputType,\n                    iterations,\n                    bounces,\n                    firstObjectId\n                );\n            \}\n\n            // Otherwise, if we missed all objects, read the hdri value\n            // in the direction the ray was last travelling\n            if (!madeContact)\n            \{\n                rayColour = blend(\n                    saturate(readHDRIValue(direction)),\n                    rayColour,\n                    rayIntensity\n                );\n            \}\n\n            currentRayIndex++;\n        \}\n\n        rayColour.w = (bounces > 0) * firstObjectId;\n        return rayColour;\n    \}\n\n\n    /**\n     *\n     */\n    int getEmissiveIndices(int emissiveIndices\[MAX_MIS_EMISSIVE_SHAPES])\n    \{\n        int currentIndex = 0;\n        for (int j=0; j < min(_objectTextureWidth, MAX_MIS_EMISSIVE_SHAPES); j++)\n        \{\n            if (emittances(j, 0, 3) > 0.0f)\n            \{\n                emissiveIndices\[currentIndex++] = j;\n            \}\n        \}\n\n        return currentIndex;\n    \}\n\n\n    void getCameraRay(\n            const float3 &seed,\n            const float2 &pixelLocation,\n            float3 &rayOrigin,\n            float3 &rayDirection)\n    \{\n        const float2 uvCoordinates = pixelsToUV(\n            pixelLocation + random(float2(seed.x, seed.y)),\n            float2(_formatWidth, _formatHeight)\n        );\n        if (_latLong)\n        \{\n            createLatLongCameraRay(\n                _cameraWorldMatrix,\n                uvCoordinates,\n                rayOrigin,\n                rayDirection\n            );\n        \}\n        else if (_depthOfFieldEnabled)\n        \{\n            createCameraRay(\n                _cameraWorldMatrix,\n                __inverseCameraProjectionMatrix,\n                uvCoordinates,\n                __aperture,\n                _focalDistance,\n                seed,\n                rayOrigin,\n                rayDirection\n            );\n        \}\n        else\n        \{\n            createCameraRay(\n                _cameraWorldMatrix,\n                __inverseCameraProjectionMatrix,\n                uvCoordinates,\n                rayOrigin,\n                rayDirection\n            );\n        \}\n    \}\n\n\n    /**\n     * Compute a raymarched pixel value.\n     *\n     * @arg pos: The x, and y location we are currently processing.\n     */\n    void process(int2 pos)\n    \{\n        SampleType(noise) noisePixel = noise();\n        float3 seed = 43.67f * random(float3(noisePixel.x, noisePixel.y, noisePixel.z));\n\n        const float4 variancePixel = variance();\n\n        const float numPaths = adaptiveSamples(\n            _minPathsPerPixel,\n            _maxPathsPerPixel,\n            float3(variancePixel.x, variancePixel.y, variancePixel.z)\n        );\n        const float totalPaths = numPaths + _numRaysPerPixel;\n\n        float4 resultPixel = float4(0);\n\n        float2 pixelLocation = float2(pos.x, pos.y);\n\n        int emissiveMISOptions\[MAX_MIS_EMISSIVE_SHAPES];\n\n        const int numEmissive = getEmissiveIndices(emissiveMISOptions);\n\n        for (int ray=1; ray <= _numRaysPerPixel; ray++)\n        \{\n            // Generate a ray from the camera\n            float3 rayOrigin;\n            float3 rayDirection;\n            getCameraRay(\n                seed,\n                pixelLocation,\n                rayOrigin,\n                rayDirection\n            );\n\n            // Determine the colour of the ray\n            resultPixel += marchRay(\n                rayOrigin,\n                rayDirection,\n                seed\n            );\n\n            seed = 37.5798f * random(seed * ray * 1.79183324f);\n        \}\n\n        for (int path=1; path <= numPaths; path++)\n        \{\n            // Generate a ray from the camera\n            float3 rayOrigin;\n            float3 rayDirection;\n            getCameraRay(\n                seed,\n                pixelLocation,\n                rayOrigin,\n                rayDirection\n            );\n\n            // Determine the colour of the ray\n            resultPixel += marchPath(\n                rayOrigin,\n                rayDirection,\n                emissiveMISOptions,\n                numEmissive,\n                seed\n            );\n\n            seed = 53.1231f * random(seed * path * 1.31537f);\n        \}\n\n        const uint objectId = resultPixel.w / totalPaths;\n\n        const float numPrecomputedPaths = variancePixel.w;\n\n        dst() = (resultPixel + numPrecomputedPaths * src()) / (totalPaths + numPrecomputedPaths);\n\n        if (_outputType == STATS_AOV)\n        \{\n            dst(2) = totalPaths + numPrecomputedPaths;\n        \}\n\n        dst(3) = encodeTwoValuesInUint(objectId, totalPaths + numPrecomputedPaths);\n    \}\n\};\n"
  rebuild ""
  "PathMarchKernel_Focal Length" {{parent.DummyCam.focal}}
  "PathMarchKernel_Horizontal Aperture" {{parent.DummyCam.haperture}}
  "PathMarchKernel_Near Plane" {{parent.DummyCam.near}}
  "PathMarchKernel_Far Plane" {{parent.DummyCam.far}}
  "PathMarchKernel_Camera World Matrix" {
      {{parent.DummyCam.world_matrix.0} {parent.DummyCam.world_matrix.1} {parent.DummyCam.world_matrix.2} {parent.DummyCam.world_matrix.3}}
      {{parent.DummyCam.world_matrix.4} {parent.DummyCam.world_matrix.5} {parent.DummyCam.world_matrix.6} {parent.DummyCam.world_matrix.7}}
      {{parent.DummyCam.world_matrix.8} {parent.DummyCam.world_matrix.9} {parent.DummyCam.world_matrix.10} {parent.DummyCam.world_matrix.11}}
      {{parent.DummyCam.world_matrix.12} {parent.DummyCam.world_matrix.13} {parent.DummyCam.world_matrix.14} {parent.DummyCam.world_matrix.15}}
    }
  "PathMarchKernel_Focal Distance" {{parent.DummyCam.focal_point}}
  PathMarchKernel_fstop {{parent.DummyCam.fstop}}
  "PathMarchKernel_Enable Depth Of Field" {{parent.enable_dof}}
  "PathMarchKernel_Screen Width" {{parent.resolution_dot.width}}
  "PathMarchKernel_Screen Height" {{parent.resolution_dot.height}}
  "PathMarchKernel_HDRI Offset Angle" {{parent.hdri_offset_angle}}
  "PathMarchKernel_Use Precomputed Irradiance" {{parent.use_precomputed_irradiance}}
  "PathMarchKernel_Num Rays Per Pixel" {{parent.rays_per_pixel}}
  "PathMarchKernel_Max Rays To Spawn On Impact" {{parent.max_rays_to_spawn}}
  "PathMarchKernel_Min Paths Per Pixel" {{parent.min_paths_per_pixel}}
  "PathMarchKernel_Max Paths Per Pixel" {{parent.max_paths_per_pixel}}
  "PathMarchKernel_Max Bounces" {{parent.max_bounces}}
  "PathMarchKernel_Max Light Sampling Bounces" {{parent.max_light_sampling_bounces}}
  "PathMarchKernel_Sample HDRI" {{parent.sample_hdri}}
  "PathMarchKernel_Light Sampling Bias" {{parent.light_sampling_bias}}
  "PathMarchKernel_Max Ray Distance" {{parent.ray_distance}}
  "PathMarchKernel_Max Ray Steps" {{parent.max_ray_steps}}
  "PathMarchKernel_Hit Tolerance" {{parent.hit_tolerance}}
  "PathMarchKernel_Shadow Bias" {{parent.shadow_bias}}
  "PathMarchKernel_Index of Refraction" {{parent.refractive_index}}
  "PathMarchKernel_Scattering Coefficient" {{"parent.scattering_colour * parent.scattering_coefficient"} {"parent.scattering_colour * parent.scattering_coefficient"} {"parent.scattering_colour * parent.scattering_coefficient"} 0}
  "PathMarchKernel_Extinction Coefficient" {{"parent.extinction_colour * parent.extinction_coefficient"} {"parent.extinction_colour * parent.extinction_coefficient"} {"parent.extinction_colour * parent.extinction_coefficient"} 0}
  "PathMarchKernel_Equi-Angular Samples" {{parent.equiangular_samples}}
  "PathMarchKernel_Sample HDRI Equi-Angular" {{parent.sample_hdri_equiangular}}
  "PathMarchKernel_Object Texture Width" {{"parent.object_input_protection.disable ? parent.obj_dot.width : parent.scene.width == 1 ? 1 : 0"}}
  "PathMarchKernel_Light Texture Width" {{"parent.light_input_protection.disable ? parent.light_dot.width : parent.lights.width == 1 ? 1 : 0"}}
  "PathMarchKernel_Output Type" {{parent.output_type}}
  "PathMarchKernel_Output LatLong" {{parent.latlong}}
  rebuild_finalise ""
  name BlinkPathMarcher
  xpos 1610
  ypos -472
 }
 Reformat {
  format {{{parent.format_.format}}}
  name Reformat1
  xpos 1610
  ypos -418
 }
 Expression {
  expr0 "isnan(r) || isinf(r) ? 0 : r"
  expr1 "isnan(g) || isinf(g) ? 0 : g"
  expr2 "isnan(b) || isinf(b) ? 0 : b"
  name Expression1
  xpos 1610
  ypos -394
 }
 Dot {
  name Dot11
  xpos 1644
  ypos -270
 }
set N9722f30 [stack 0]
 BlinkScript {
  kernelSourceFile /home/ob1/software/nuke/dev/raymarch/src/blink/kernels/decode_alpha.blink
  recompileCount 2
  KernelDescription "2 \"DecodeAlpha\" iterate pixelWise c78baa225aec9ebe4aa69e8b7ba828c1ef9287218cd201c4b2ea4d65a7fe215f 2 \"src\" Read Point \"dst\" Write Point 0 0 0"
  kernelSource "// Copyright 2022 by Owen Bulka.\n// All rights reserved.\n// This file is released under the \"MIT License Agreement\".\n// Please see the LICENSE.md file that should have been included as part\n// of this package.\n\n#include \"conversion.h\"\n\n\nkernel DecodeAlpha : ImageComputationKernel<ePixelWise>\n\{\n    Image<eRead, eAccessPoint, eEdgeNone> src; // the input image\n    Image<eWrite> dst; // the output image\n\n\n    void process() \{\n        SampleType(src) srcPixel = src();\n\n        const int2 decoded = decodeTwoValuesFromUint(srcPixel.w);\n        dst() = float4(decoded.x, decoded.y, 0, 0);\n    \}\n\};\n"
  rebuild ""
  rebuild_finalise ""
  name BlinkScript1
  xpos 1610
  ypos -40
 }
set N9727f60 [stack 0]
push $N9722f30
 Dot {
  name Dot8
  xpos 1864
  ypos -270
 }
 ShuffleCopy {
  inputs 2
  in2 rgb
  alpha red
  green2 green2
  name ShuffleCopy2
  xpos 1830
  ypos -34
 }
push $N9722f30
 BlinkScript {
  kernelSourceFile /home/ob1/software/nuke/dev/raymarch/src/blink/kernels/variance.blink
  recompileCount 16
  KernelDescription "2 \"Variance\" iterate pixelWise 72a9b32925034fa68ef08a1e6db33df827dad615aa8efaadc6f33a2cc4cbd464 2 \"src\" Read Ranged2D \"dst\" Write Point 1 \"Range\" Float 2 AABAQAAAQEA= 1 \"_range\" 2 1 3 \"srcrangeMin\" Int 2 1 AAAAAAAAAAA= \"srcrangeMax\" Int 2 1 AAAAAAAAAAA= \"__pixelsInRange\" Float 1 1 AAAAAA=="
  kernelSource "#include \"math.h\"\n\n\nkernel Variance : ImageComputationKernel<ePixelWise>\n\{\n    Image<eRead, eAccessRanged2D, eEdgeClamped> src; // the input image\n    Image<eWrite> dst; // the output image\n\n    param:\n        float2 _range;\n\n    local:\n        float __pixelsInRange;\n\n\n    /**\n     * In define(), parameters can be given labels and default values.\n     */\n    void define()\n    \{\n        defineParam(_range, \"Range\", float2(3, 3));\n    \}\n\n\n    /**\n     * The init() function is run before any calls to process().\n     * Local variables can be initialized here.\n     */\n    void init()\n    \{\n        src.setRange(-_range.x, -_range.y, _range.x, _range.y);\n    \}\n\n\n    /**\n     * Compute the irradiance of a pixel.\n     * \n     * @arg pos: The x, and y location we are currently processing.\n     */\n    void process(int2 pos)\n    \{\n        float4 mean = float4(0);\n        float4 sumOfSquares = float4(0);\n        float numSamples = 0.0f;\n\n        for (int yOffset=-_range.y; yOffset <= _range.y; yOffset++)\n        \{\n            for (int xOffset=-_range.x; xOffset <= _range.x; xOffset++)\n            \{\n                numSamples += 1.0f;\n\n                const float4 sample = src(xOffset, yOffset);\n\n                mean += (sample - mean) / numSamples;\n\n                sumOfSquares += sample * sample;\n            \}\n        \}\n\n        dst() = (sumOfSquares - numSamples * mean * mean) / ((numSamples - 1.0f) * numSamples);\n    \}\n\};\n"
  rebuild ""
  Variance_Range {{parent.variance_range} {parent.variance_range}}
  rebuild_finalise ""
  name BlinkScript2
  xpos 1500
  ypos -280
 }
 Dot {
  name Dot17
  xpos 1534
  ypos -222
 }
set N97cd500 [stack 0]
 BlinkScript {
  kernelSourceFile /home/ob1/software/nuke/dev/raymarch/src/blink/kernels/minMax.blink
  recompileCount 6
  KernelDescription "2 \"MinMaxMeanDeviation\" iterate pixelWise 44845935fe107a1348476e59783f180899aebc673c5efdf36825b5dcba77871d 2 \"src\" Read Random \"dst\" Write Point 0 0 1 \"__numSamples\" Float 1 1 AAAAAA=="
  kernelSource "#include \"math.h\"\n\n\nkernel MinMaxMeanDeviation : ImageComputationKernel<ePixelWise>\n\{\n    Image<eRead, eAccessRandom, eEdgeNone> src; // the input image\n    Image<eWrite> dst; // the output image\n\n\n    local:\n        float __numSamples;\n\n\n    void init()\n    \{\n        __numSamples = 3.0f * src.bounds.width() * src.bounds.height();\n    \}\n\n\n    void process(int2 pos)\n    \{\n        if (length(float2(pos.x, pos.y)) > 0)\n        \{\n            dst() = 0;\n            return;\n        \}\n\n        float minValue = FLT_MAX;\n        float maxValue = -FLT_MAX;\n        float mean = 0.0f;\n\n        for (int y=src.bounds.y1; y < src.bounds.y2; y++)\n        \{\n            for (int x=src.bounds.x1; x < src.bounds.x2; x++)\n            \{\n                const float3 pixelValue = float3(\n                    src(x, y, 0),\n                    src(x, y, 1),\n                    src(x, y, 2)\n                );\n\n                minValue = min(minValue, minComponent(pixelValue));\n                maxValue = max(maxValue, maxComponent(pixelValue));\n\n                mean += sumComponent(pixelValue) / __numSamples;\n            \}\n        \}\n\n        float standardDeviation = 0.0f;\n\n        for (int y=src.bounds.y1; y < src.bounds.y2; y++)\n        \{\n            for (int x=src.bounds.x1; x < src.bounds.x2; x++)\n            \{\n                const float3 pixelValue = float3(\n                    src(x, y, 0),\n                    src(x, y, 1),\n                    src(x, y, 2)\n                );\n\n                const float3 difference = pixelValue - mean;\n\n                standardDeviation += sumComponent(difference * difference) / __numSamples;\n            \}\n        \}\n\n        dst() = float4(minValue, maxValue, mean, sqrt(standardDeviation));\n    \}\n\};\n"
  rebuild ""
  rebuild_finalise ""
  name BlinkScript3
  xpos 1390
  ypos -232
 }
 Dot {
  name Dot29
  xpos 1424
  ypos -150
 }
push $N97cd500
 BlinkScript {
  inputs 2
  kernelSourceFile /home/ob1/software/nuke/dev/raymarch/src/blink/kernels/normalize.blink
  recompileCount 9
  KernelDescription "2 \"Normalize\" iterate pixelWise 15596707b9f9c6e32c3d165235f6d746c644e34a42e0c804e9bb86d469def536 3 \"src\" Read Point \"minMax\" Read Random \"dst\" Write Point 2 \"Normalization Method\" Int 1 AAAAAA== \"Clamp To Standard Deviation\" Bool 1 AA== 2 \"_normalizationMethod\" 1 1 \"_clampToStdDev\" 1 1 1 \"minMaxconstEdgeColor\" Float 4 1 AAAAAAAAAAAAAAAAAAAAAA=="
  kernelSource "#include \"math.h\"\n\n\nkernel Normalize : ImageComputationKernel<ePixelWise>\n\{\n    Image<eRead, eAccessPoint, eEdgeNone> src; // the input image\n    Image<eRead, eAccessRandom, eEdgeConstant> minMax; // the input image\n    Image<eWrite> dst; // the output image\n\n\n    param:\n        int _normalizationMethod;\n        bool _clampToStdDev;\n\n    /**\n     * In define(), parameters can be given labels and default values.\n     */\n    void define()\n    \{\n        defineParam(_normalizationMethod, \"Normalization Method\", 0);\n        defineParam(_clampToStdDev, \"Clamp To Standard Deviation\", false);\n    \}\n\n\n    void process()\n    \{\n        float minValue = minMax(0, 0, 0);\n        float maxValue = minMax(0, 0, 1);\n        const float meanValue = minMax(0, 0, 2);\n        const float standardDeviationValue = minMax(0, 0, 3);\n\n        float4 srcValue;\n        if (_clampToStdDev)\n        \{\n            const float lowerBound = meanValue - standardDeviationValue;\n            const float upperBound = meanValue + standardDeviationValue;\n\n            srcValue = clamp(src(), lowerBound, upperBound);\n            minValue = clamp(minValue, lowerBound, upperBound);\n            maxValue = clamp(maxValue, lowerBound, upperBound);\n        \}\n        else\n        \{\n            srcValue = src();\n        \}\n\n        float4 output;\n\n        if (_normalizationMethod == 0 && minValue != maxValue)\n        \{\n            dst() = (srcValue - minValue) / (maxValue - minValue);\n        \}\n        else if (_normalizationMethod == 1 && standardDeviationValue != 0.0f)\n        \{\n            dst() = (srcValue - meanValue) / standardDeviationValue;\n        \}\n        else\n        \{\n            dst() = 0.0f;\n        \}\n    \}\n\};\n"
  rebuild ""
  "Normalize_Normalization Method" 1
  rebuild_finalise ""
  name BlinkScript4
  xpos 1500
  ypos -160
 }
 Dot {
  name Dot31
  xpos 1534
  ypos -102
 }
set N97fa120 [stack 0]
 BlinkScript {
  kernelSourceFile /home/ob1/software/nuke/dev/raymarch/src/blink/kernels/minMax.blink
  recompileCount 6
  KernelDescription "2 \"MinMaxMeanDeviation\" iterate pixelWise 44845935fe107a1348476e59783f180899aebc673c5efdf36825b5dcba77871d 2 \"src\" Read Random \"dst\" Write Point 0 0 1 \"__numSamples\" Float 1 1 AAAAAA=="
  kernelSource "#include \"math.h\"\n\n\nkernel MinMaxMeanDeviation : ImageComputationKernel<ePixelWise>\n\{\n    Image<eRead, eAccessRandom, eEdgeNone> src; // the input image\n    Image<eWrite> dst; // the output image\n\n\n    local:\n        float __numSamples;\n\n\n    void init()\n    \{\n        __numSamples = 3.0f * src.bounds.width() * src.bounds.height();\n    \}\n\n\n    void process(int2 pos)\n    \{\n        if (length(float2(pos.x, pos.y)) > 0)\n        \{\n            dst() = 0;\n            return;\n        \}\n\n        float minValue = FLT_MAX;\n        float maxValue = -FLT_MAX;\n        float mean = 0.0f;\n\n        for (int y=src.bounds.y1; y < src.bounds.y2; y++)\n        \{\n            for (int x=src.bounds.x1; x < src.bounds.x2; x++)\n            \{\n                const float3 pixelValue = float3(\n                    src(x, y, 0),\n                    src(x, y, 1),\n                    src(x, y, 2)\n                );\n\n                minValue = min(minValue, minComponent(pixelValue));\n                maxValue = max(maxValue, maxComponent(pixelValue));\n\n                mean += sumComponent(pixelValue) / __numSamples;\n            \}\n        \}\n\n        float standardDeviation = 0.0f;\n\n        for (int y=src.bounds.y1; y < src.bounds.y2; y++)\n        \{\n            for (int x=src.bounds.x1; x < src.bounds.x2; x++)\n            \{\n                const float3 pixelValue = float3(\n                    src(x, y, 0),\n                    src(x, y, 1),\n                    src(x, y, 2)\n                );\n\n                const float3 difference = pixelValue - mean;\n\n                standardDeviation += sumComponent(difference * difference) / __numSamples;\n            \}\n        \}\n\n        dst() = float4(minValue, maxValue, mean, sqrt(standardDeviation));\n    \}\n\};\n"
  rebuild ""
  rebuild_finalise ""
  name BlinkScript5
  xpos 1390
  ypos -112
 }
 Dot {
  name Dot32
  xpos 1424
  ypos -30
 }
push $N97fa120
 BlinkScript {
  inputs 2
  kernelSourceFile /home/ob1/software/nuke/dev/raymarch/src/blink/kernels/normalize.blink
  recompileCount 8
  KernelDescription "2 \"Normalize\" iterate pixelWise 15596707b9f9c6e32c3d165235f6d746c644e34a42e0c804e9bb86d469def536 3 \"src\" Read Point \"minMax\" Read Random \"dst\" Write Point 2 \"Normalization Method\" Int 1 AAAAAA== \"Clamp To Standard Deviation\" Bool 1 AA== 2 \"_normalizationMethod\" 1 1 \"_clampToStdDev\" 1 1 1 \"minMaxconstEdgeColor\" Float 4 1 AAAAAAAAAAAAAAAAAAAAAA=="
  kernelSource "#include \"math.h\"\n\n\nkernel Normalize : ImageComputationKernel<ePixelWise>\n\{\n    Image<eRead, eAccessPoint, eEdgeNone> src; // the input image\n    Image<eRead, eAccessRandom, eEdgeConstant> minMax; // the input image\n    Image<eWrite> dst; // the output image\n\n\n    param:\n        int _normalizationMethod;\n        bool _clampToStdDev;\n\n    /**\n     * In define(), parameters can be given labels and default values.\n     */\n    void define()\n    \{\n        defineParam(_normalizationMethod, \"Normalization Method\", 0);\n        defineParam(_clampToStdDev, \"Clamp To Standard Deviation\", false);\n    \}\n\n\n    void process()\n    \{\n        float minValue = minMax(0, 0, 0);\n        float maxValue = minMax(0, 0, 1);\n        const float meanValue = minMax(0, 0, 2);\n        const float standardDeviationValue = minMax(0, 0, 3);\n\n        float4 srcValue;\n        if (_clampToStdDev)\n        \{\n            const float lowerBound = meanValue - standardDeviationValue;\n            const float upperBound = meanValue + standardDeviationValue;\n\n            srcValue = clamp(src(), lowerBound, upperBound);\n            minValue = clamp(minValue, lowerBound, upperBound);\n            maxValue = clamp(maxValue, lowerBound, upperBound);\n        \}\n        else\n        \{\n            srcValue = src();\n        \}\n\n        float4 output;\n\n        if (_normalizationMethod == 0 && minValue != maxValue)\n        \{\n            dst() = (srcValue - minValue) / (maxValue - minValue);\n        \}\n        else if (_normalizationMethod == 1 && standardDeviationValue != 0.0f)\n        \{\n            dst() = (srcValue - meanValue) / standardDeviationValue;\n        \}\n        else\n        \{\n            dst() = 0.0f;\n        \}\n    \}\n\};\n"
  rebuild ""
  "Normalize_Clamp To Standard Deviation" true
  rebuild_finalise ""
  name BlinkScript6
  xpos 1500
  ypos -40
 }
 Dot {
  name Dot30
  xpos 1534
  ypos 90
 }
push $N9727f60
 ShuffleCopy {
  inputs 2
  in rgb
  in2 rgb
  red red
  green green
  blue blue
  alpha green2
  black red
  white green
  red2 blue
  green2 green2
  out variance
  name ShuffleCopy1
  xpos 1610
  ypos 86
 }
 Copy {
  inputs 2
  channels all
  name Copy1
  xpos 1830
  ypos 74
 }
 Output {
  name Output1
  xpos 1830
  ypos 182
 }
end_group
set Na1ceca0 [stack 0]
Write {
 file /home/ob1/software/nuke/dev/raymarch/images/volumetric_caustics/volumetric_caustics.####.exr
 file_type exr
 first_part rgba
 version 1
 name Write1
 xpos 730
 ypos 511
}
push $N8d46e60
Grade {
 name Grade1
 xpos 840
 ypos 134
}
Group {
 inputs 0
 name Group3
 tile_color 0xffffffff
 xpos 61
 ypos 232
 addUserKnob {20 User l "SDF Primitive"}
 addUserKnob {7 size R 1 1000}
 size 2
 addUserKnob {4 type M {fBm turbulence}}
 type turbulence
 addUserKnob {13 translation}
 addUserKnob {3 octaves}
 octaves 5
 addUserKnob {7 lacunarity R 1 10}
 lacunarity 2
 addUserKnob {7 gain}
 gain 0.56
 addUserKnob {7 gamma}
 gamma 0.5
 addUserKnob {7 black_point l "black point"}
 addUserKnob {7 white_point l "white point"}
 white_point 0.43
 addUserKnob {7 lift}
 addUserKnob {6 invert +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {6 diffuse +STARTLINE}
 addUserKnob {6 specular -STARTLINE}
 addUserKnob {6 transmission -STARTLINE}
 addUserKnob {6 emission -STARTLINE}
 addUserKnob {6 specular_roughness l "specular roughness" +STARTLINE}
 addUserKnob {6 transmission_roughness l "transmission roughness" -STARTLINE}
 addUserKnob {6 refractive_index l "refractive index" +STARTLINE}
 addUserKnob {6 scattering +STARTLINE}
 scattering true
 addUserKnob {6 extinction -STARTLINE}
 extinction true
 addUserKnob {26 div0 l "" +STARTLINE}
 addUserKnob {26 info l "" +STARTLINE T "v2.0.0 - (c) Owen Bulka - 2022"}
}
 Constant {
  inputs 0
  channels sdf_noise_params0
  color {{"(parent.extinction << 11) | (parent.scattering << 10) | (parent.invert << 9) | (parent.specular_roughness << 8) | (parent.transmission_roughness << 7) | (parent.refractive_index << 6) | (parent.emission << 5) | (parent.transmission << 4) | (parent.specular << 3) | (parent.diffuse << 2) | (parent.type << 1) | 1"} {parent.translation.x} {parent.translation.y} {parent.translation.z}}
  format "1 1 0 0 1 1 1 1x1"
  name noise_params0
  xpos 841
  ypos 447
 }
 Dot {
  name Dot3
  xpos 875
  ypos 646
 }
 Constant {
  inputs 0
  channels sdf_noise_params1
  color {{parent.octaves} {parent.lacunarity} {parent.gain} {parent.gamma}}
  format "1 1 0 0 1 1 1 1x1"
  name noise_params1
  xpos 966
  ypos 447
 }
 Copy {
  inputs 2
  channels all
  name Copy8
  xpos 966
  ypos 714
 }
 Constant {
  inputs 0
  channels sdf_noise_params2
  color {{parent.size} {parent.white_point} {parent.black_point} {parent.lift}}
  format "1 1 0 0 1 1 1 1x1"
  name noise_params2
  xpos 1082
  ypos 449
 }
 Copy {
  inputs 2
  channels all
  name Copy1
  xpos 1082
  ypos 714
 }
 Output {
  name Output1
  xpos 1082
  ypos 826
 }
end_group
push $Na1ceca0
Viewer {
 frame_range 1001-1111
 colour_sample_bbox {0.2765625119 0.05624999851 0.2781249881 0.05781250075}
 samplepoints {{-0.181250006 -0.001562500023}
   }
 monitorOutOutputTransform rec709
 name Viewer1
 xpos 887
 ypos 533
}
