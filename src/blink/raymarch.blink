#include "camera.h"
#include "lights.h"
#include "mmath.h"
#include "sdfs.h"
#include "sdfTransforms.h"
#include "sdTransforms.h"


kernel RayMarchKernel : ImageComputationKernel<ePixelWise>
{
    // the input for format, process called once per pixel
    Image<eRead, eAccessPoint, eEdgeNone> bg;

    // the skybox in latlong format
    Image<eRead, eAccessRandom, eEdgeNone> skyBox;


    // the shape positons.xyz, scale.w
    Image<eRead, eAccessRandom, eEdgeNone> positions;

    // the shape rotations.xyz, wall thickness.w
    Image<eRead, eAccessRandom, eEdgeNone> rotations;

    // the shape dimensions.xyzw (some shapes may not use all channels)
    Image<eRead, eAccessRandom, eEdgeNone> dimensions;

    // the shape colours.xyz
    Image<eRead, eAccessRandom, eEdgeNone> colours;


    // shape type.x, operation.y, numChildren.z, blend strength.w
    Image<eRead, eAccessRandom, eEdgeNone> shapeProperties;

    // repetition params.xyzw
    Image<eRead, eAccessRandom, eEdgeNone> shapeModParameters0;

    // elongation.xyz edgeRadius.w
    Image<eRead, eAccessRandom, eEdgeNone> shapeModParameters1;

    // reflection.x, transmission.y, emission.z, roughness.w (TODO)
    Image<eRead, eAccessRandom, eEdgeNone> surfaceProperties;


    // the input lights direction/position.xyz intensity.w
    Image<eRead, eAccessRandom, eEdgeNone> lights;

    // colour.xyz, type.w
    // w in [0, 1) = directional, [1, inf) = point
    Image<eRead, eAccessRandom, eEdgeNone> lightProperties;

    // shadow hardness.x
    Image<eRead, eAccessRandom, eEdgeNone> lightProperties1;

    // the output image
    Image<eWrite> dst;


    param:
        // These parameters are made available to the user.

        // Camera params
        float focalLength;
        float horizontalAperture;
        float nearPlane;
        float farPlane;
        float4x4 cameraWorldMatrix;

        // Image params
        float formatWidth;
        float formatHeight;

        float skyBoxOffsetAngle;
        int skyFormatWidth;
        int skyFormatHeight;

        // Ray params
        int subdivisions;
        int maxBounces;
        float maxRayDistance;
        int maxRaySteps;
        float hitTolerance;
        float shadowBias;

        // Scene params
        // Shape Textures
        int objectTextureHeight;
        int objectTextureWidth;

        // Light textures
        int lightTextureHeight;
        int lightTextureWidth;

        float hazeAmount;
        float hazeStart;
        float hazeDistance;
        float4 hazeColour;

        float iterGlowAmount;
        float4 iterGlowColour;

        int outputType;

    local:
        // These local variables are not exposed to the user.

        float4x4 inverseCameraProjectionMatrix;

        int bouncesPerRay;

        int numSubPixels;
        float subdividedPixelSize;

        float2 skyBoxPixelSize;
        float skyBoxOffsetRadians;



    // In define(), parameters can be given labels and default values.
    void define()
    {
        // Camera params
        defineParam(focalLength, "Focal Length", 50.0f);
        defineParam(horizontalAperture, "Horizontal Aperture", 24.576f);
        defineParam(nearPlane, "Near Plane", 0.1f);
        defineParam(farPlane, "Far Plane", 10000.0f);
        defineParam(
            cameraWorldMatrix,
            "Camera World Matrix",
            float4x4(
                1, 0, 0, 0,
                0, 1, 0, 0,
                0, 0, 1, 0,
                0, 0, 0, 1
            )
        );

        // Image params
        defineParam(formatHeight, "Screen Height", 2160.0f);
        defineParam(formatWidth, "Screen Width", 3840.0f);
        defineParam(skyBoxOffsetAngle, "SkyBox Offset Angle", 0.0f);
        defineParam(skyFormatHeight, "SkyBox Height", 1024);
        defineParam(skyFormatWidth, "SkyBox Width", 2048);

        // Ray params
        defineParam(subdivisions, "Pixel Subdivisions", 0);
        defineParam(maxRayDistance, "Max Ray Distance", 1000.0f);
        defineParam(maxRaySteps, "Max Ray Steps", 128);
        defineParam(maxBounces, "Max Bounces", 1);
        defineParam(hitTolerance, "Hit Tolerance", 0.001f);
        defineParam(shadowBias, "Shadow Bias", 1.0f);

        // Scene params

        // Shape Counts
        defineParam(objectTextureHeight, "Object Texture Height", 0);
        defineParam(objectTextureWidth, "Object Texture Width", 0);

        // Light Counts
        defineParam(lightTextureHeight, "Light Texture Height", 0);
        defineParam(lightTextureWidth, "Light Texture Width", 0);

        defineParam(hazeAmount, "Haze Amount", 0.0f);
        defineParam(hazeStart, "Haze Start", 0.0f);
        defineParam(hazeDistance, "Haze Distance", 1000.0f);
        defineParam(hazeColour, "Haze Colour", float4(1, 1, 1, 1));

        defineParam(iterGlowAmount, "Iter Glow Amount", 0.0f);
        defineParam(iterGlowColour, "Iter Glow Colour", float4(1, 1, 1, 1));

        defineParam(outputType, "Output Type", 0);
    }


    // The init() function is run before any calls to process().
    // Local variables can be initialized here.
    void init()
    {
        bouncesPerRay = maxBounces <= 0 ? 1 : maxBounces;

        // TODO use angles to allow -ve focal length like for latlongs
        float aspect = aspectRatio(formatHeight, formatWidth);
        float4x4 cameraProjectionMatrix = projectionMatrix(
            focalLength,
            horizontalAperture,
            aspect,
            nearPlane,
            farPlane
        );
        inverseCameraProjectionMatrix = cameraProjectionMatrix.invert();

        int subPixelDivisions = pow(2, abs(subdivisions));
        subdividedPixelSize = 1.0f / (float) subPixelDivisions;
        numSubPixels = pow(subPixelDivisions, 2);

        skyBoxPixelSize = float2(skyFormatWidth / (2 * PI), skyFormatHeight / PI);
        skyBoxOffsetRadians = skyBoxOffsetAngle * PI / 180.0f;
    }


    /**
     * Get the value of sky the ray would hit at infinite distance
     */
    float4 readSkyValue(float3 rayDirection)
    {
        float2 angles = cartesionUnitVectorToSpherical(rayDirection, skyBoxOffsetRadians);

        SampleType(skyBox) skyBoxPixel = bilinear(
            skyBox,
            skyBoxPixelSize.x * angles.x,
            skyFormatHeight - (skyBoxPixelSize.y * angles.y)
        );

        return saturate(skyBoxPixel);
    }


    //
    // Render Engine
    //


    float3 transformRay(
        const float3 &rayOrigin,
        const float3 &position,
        const float3 &rotation,
        const int modifications,
        const float4 &modParameters0,
        const float4 &modParameters1)
    {
        float3x3 rotMatrix;
        float3 transformedRay;
        rotationMatrix(rotation, rotMatrix);
        matmul(
            rotMatrix.invert(),
            rayOrigin - position,
            transformedRay
        );
        performShapeModification(
            modifications,
            modParameters0,
            modParameters1,
            transformedRay
        );

        return transformedRay;
    }


    float getNextDistance(
        const float3 &rayOrigin,
        const int shape,
        const float4 &dimension,
        const float uniformScale,
        const int modifications,
        const float edgeRadius,
        const float wallThickness)
    {
        float nextDistance = distanceToObject(
            rayOrigin / uniformScale,
            shape,
            dimension
        ) * uniformScale;

        return performDistanceModification(
            modifications,
            edgeRadius,
            wallThickness,
            nextDistance
        );
    }


    /**
     * Compute the minimum distance to an object in the scene
     */
    float getMinDistanceToObjectInScene(
            const float3 &rayOrigin,
            float4 &colour,
            float4 &surface)
    {
        float distance = maxRayDistance;

        for (int i=0; i < objectTextureHeight; i++)
        {
            for (int j=0; j < objectTextureWidth; j++)
            {
                SampleType(positions) position = positions(j, i);
                SampleType(rotations) rotation = rotations(j, i);
                SampleType(dimensions) dimension = dimensions(j, i);
                SampleType(shapeProperties) shapeProperty = shapeProperties(j, i);
                SampleType(shapeModParameters0) modParameters0 = shapeModParameters0(j, i);
                SampleType(shapeModParameters1) modParameters1 = shapeModParameters1(j, i);
                SampleType(colours) surfaceColour = colours(j, i);
                SampleType(surfaceProperties) surfaceProperty = surfaceProperties(j, i);

                const int modifications = (int) shapeProperty.y;
                const float scale = position.w;

                const float3 transformedRay = transformRay(
                    rayOrigin,
                    float3(position.x, position.y, position.z),
                    float3(rotation.x, rotation.y, rotation.z),
                    modifications,
                    modParameters0,
                    modParameters1
                );

                float nextDistance = getNextDistance(
                    transformedRay,
                    (int) shapeProperty.x,
                    dimension,
                    scale,
                    modifications,
                    modParameters1.w,
                    rotation.w
                );

                const int numChildren = (int) shapeProperty.z;
                const float blendStrength = shapeProperty.w;


                float4 parentColour = surfaceColour;
                float4 parentSurface = surfaceProperty;

                // TODO should be able to get rid of this duplication in a clever way
                // maybe cache the parent values as you compute the child then pop back
                // and allow infinite child depth
                for (int child=j + 1; child < j + 1 + numChildren; child++)
                {
                    SampleType(positions) childPosition = positions(child, i);
                    SampleType(rotations) childRotation = rotations(child, i);
                    SampleType(dimensions) childDimension = dimensions(child, i);
                    SampleType(shapeProperties) childShapeProperty = shapeProperties(child, i);
                    SampleType(shapeModParameters0) childModParameters0 = shapeModParameters0(child, i);
                    SampleType(shapeModParameters1) childModParameters1 = shapeModParameters1(child, i);
                    SampleType(colours) childColour = colours(child, i);
                    SampleType(surfaceProperties) childSurface = surfaceProperties(child, i);

                    const int childModifications = (int) childShapeProperty.y;
                    const float childScale = childPosition.w * scale;

                    const float3 childTransformedRay = transformRay(
                        transformedRay,
                        float3(childPosition.x, childPosition.y, childPosition.z),
                        float3(childRotation.x, childRotation.y, childRotation.z),
                        childModifications,
                        childModParameters0,
                        childModParameters1
                    );

                    const float childNextDistance = getNextDistance(
                        childTransformedRay,
                        (int) childShapeProperty.x,
                        childDimension,
                        childScale,
                        childModifications,
                        childModParameters1.w,
                        childRotation.w
                    );

                    nextDistance = performChildInteraction(
                        modifications,
                        childNextDistance,
                        nextDistance,
                        childColour,
                        parentColour,
                        childSurface,
                        parentSurface,
                        blendStrength
                    );
                }
                j += numChildren;

                if (nextDistance < distance)
                {
                    distance = nextDistance;

                    colour = float4(parentColour);
                    surface = float4(parentSurface);
                }
            }
        }

        return distance;
    }


    float computeSoftShadow(
            const float3 &rayDirection,
            const float distanceToShadePoint,
            const float softness,
            float3 &rayOrigin)
    {
        float distanceTravelled = 0;
        float shadowIntensity = 1.0f;
        float lastStepDistance = 1000000000000000000000000.0f;
        float4 colour;
        float4 surface;

        int iterations = 0;
        while (distanceTravelled < distanceToShadePoint && iterations < maxRaySteps / 2)
        {
            float stepDistance = getMinDistanceToObjectInScene(rayOrigin, colour, surface);

            float softOffset = stepDistance * stepDistance / (2.0f * lastStepDistance);
            shadowIntensity = min(
                shadowIntensity,
                softness * sqrt(stepDistance * stepDistance - softOffset * softOffset)
                / max(0.0f, distanceTravelled - softOffset)
            );

            if (fabs(stepDistance) < hitTolerance)
            {
                break;
            }

            lastStepDistance = stepDistance;
            rayOrigin += rayDirection * stepDistance;
            distanceTravelled += stepDistance;
            iterations++;
        }

        shadowIntensity = saturate(shadowIntensity);
        return shadowIntensity * shadowIntensity * (3.0f - 2.0f * shadowIntensity);
    }


    float computeShadow(
            const float3 &rayDirection,
            const float distanceToShadePoint,
            float3 &rayOrigin)
    {
        float distanceTravelled = 0;
        float4 colour;
        float4 surface;
        int iterations = 0;
        while (distanceTravelled < distanceToShadePoint && iterations < maxRaySteps / 2)
        {
            float stepDistance = getMinDistanceToObjectInScene(rayOrigin, colour, surface);

            if (fabs(stepDistance) < hitTolerance)
            {
                return 0;
            }

            rayOrigin += rayDirection * stepDistance;
            distanceTravelled += stepDistance;
            iterations++;
        }

        return 1;
    }


    float computeAmbientOcclusion(
            const float3 &rayDirection,
            const float3 &rayOrigin,
            const float amount,
            const int iterations)
    {
        float occlusion = 0.0f;
        float occlusionScaleFactor = 1.0f;
        float4 colour;
        float4 surface;
        for(int iteration=0; iteration < iterations; iteration++)
        {
            float stepDistance = 0.001f + 0.15f * float(iteration) / 4.0f;
            float distanceToClosestObject = getMinDistanceToObjectInScene(
                rayOrigin + stepDistance * rayDirection,
                colour,
                surface
            );
            occlusion += (stepDistance - distanceToClosestObject) * occlusionScaleFactor;
            occlusionScaleFactor *= 0.95;
        }

        return (
            amount
            * saturate(0.5f + 0.5f * rayDirection.y)  // ambient
            * saturate(1.0f - 1.5f * occlusion)       // occlusion
        );
    }


    float2 lightIntensityOnSurface(
            const float3 &pointOnSurface,
            const float3 &surfaceNormal,
            const float4 &surface,
            const float3 &reflectedDirection,
            const float3 &light,
            const int lightType,
            const float intensity,
            const float falloff,
            const float shadow_hardness)
    {
        int absLightType = abs(lightType);
        if (absLightType == 3)
        {
            return float2(
                1.0f,
                computeAmbientOcclusion(
                    surfaceNormal,
                    pointOnSurface,
                    intensity,
                    (int) light.x
                )
            );
        }

        float3 surfaceOffset;
        float distanceToLight;
        float3 lightDirection;
        float3 shadowOffsetLightDirection;
        float intensityAtPosition = getLightData(
            pointOnSurface,
            surfaceNormal,
            light,
            absLightType,
            intensity,
            falloff,
            hitTolerance,
            maxRayDistance,
            shadowBias,
            distanceToLight,
            surfaceOffset,
            lightDirection,
            shadowOffsetLightDirection
        );
        lightDirection = normalize(lightDirection);
        // float normalFactor = blend(
        //     saturate(dot(reflectedDirection, lightDirection)),
        //     saturate(dot(surfaceNormal, lightDirection)),
        //     surface.x
        // );
        float normalFactor = dot(surfaceNormal, lightDirection);

        float shadowIntensityAtPosition;
        if (lightType < 0)
        {
            shadowIntensityAtPosition = computeSoftShadow(
                normalize(shadowOffsetLightDirection),
                distanceToLight,
                shadow_hardness,
                surfaceOffset
            );
        }
        else
        {
            shadowIntensityAtPosition = computeShadow(
                normalize(shadowOffsetLightDirection),
                distanceToLight,
                surfaceOffset
            );
        }

        return saturate(
            normalFactor * float2(intensityAtPosition, shadowIntensityAtPosition)
        );
    }


    /**
     * Get the intensity of the light on the surface of an object
     *
     *
     */
    float computeLightIntensityOnSurface(
            const float3 &pointOnSurface,
            const float3 &surfaceNormal,
            const float4 &surface,
            const float3 &reflectedDirection,
            float4 &lightColour)
    {
        float2 lightIntensity = float2(0, 0);
        lightColour = float4(0);

        for (int i=0; i < lightTextureHeight; i++)
        {
            for (int j=0; j < lightTextureWidth; j++)
            {
                SampleType(lights) light = lights(j, i);
                SampleType(lightProperties) lightProperty = lightProperties(j, i);
                SampleType(lightProperties1) lightProperty1 = lightProperties1(j, i);

                int lightType = (int) lightProperty.w;
                float2 currentLightIntensity;
                if (lightType == 0)
                {
                    currentLightIntensity = float2(light.w, 1);
                }
                else
                {
                    currentLightIntensity = lightIntensityOnSurface(
                        pointOnSurface,
                        surfaceNormal,
                        surface,
                        reflectedDirection,
                        float3(light.x, light.y, light.z),
                        lightType,
                        light.w,
                        lightProperty1.y,
                        lightProperty1.x
                    );
                }
                lightColour += currentLightIntensity.x * currentLightIntensity.y * float4(
                    lightProperty.x,
                    lightProperty.y,
                    lightProperty.z,
                    0.0f
                );
                lightIntensity += currentLightIntensity;
            }
        }
        // lightColour /= lightTextureWidth * lightTextureHeight;

        return saturate(lightIntensity.x * lightIntensity.y);
    }


    float getHazeAmount(const float distance)
    {
        return hazeAmount * saturate((distance - hazeStart) / hazeDistance);
    }


    /**
     * Estimate the surface normal at the closest point on the closest
     * object to a point
     *
     * @arg point: The point near which to get the surface normal
     *
     * @returns: The normalized surface normal
     */
    float3 estimateSurfaceNormal(const float3 &point) {
        float4 colour;
        float4 surface;
        return normalize(
            float3(
                getMinDistanceToObjectInScene(
                    float3(
                        point.x + hitTolerance,
                        point.y,
                        point.z
                    ),
                    colour,
                    surface
                ) - getMinDistanceToObjectInScene(
                    float3(
                        point.x - hitTolerance,
                        point.y,
                        point.z
                    ),
                    colour,
                    surface
                ),
                getMinDistanceToObjectInScene(
                    float3(
                        point.x,
                        point.y + hitTolerance,
                        point.z
                    ),
                    colour,
                    surface
                ) - getMinDistanceToObjectInScene(
                    float3(
                        point.x,
                        point.y - hitTolerance,
                        point.z
                    ),
                    colour,
                    surface
                ),
                getMinDistanceToObjectInScene(
                    float3(
                        point.x,
                        point.y,
                        point.z+hitTolerance
                    ),
                    colour,
                    surface
                ) - getMinDistanceToObjectInScene(
                    float3(
                        point.x,
                        point.y,
                        point.z - hitTolerance
                    ),
                    colour,
                    surface
                )
        ));
    }


    /**
     * March a ray through the scene
     *
     * @returns: The ray colour
     */
    float4 marchRay(
            const float3 &rayOrigin,
            const float3 &rayDirection,
            const int numBounces,
            const float rayDistance)
    {
        float3 origin = rayOrigin;
        float3 direction = rayDirection;
        float4 colour;
        float4 surface;

        int bounces = 0;
        float distanceTravelled = 0;
        float lastHitDistance = distanceTravelled;

        float lightIntensity = 1;

        float4 rayColour = float4(0);
        float4 lightColour = float4(0);

        float rayStrength = 1;

        int iterations = 1;
        while (distanceTravelled < rayDistance && rayStrength > 0 && iterations <= maxRaySteps)
        {
            float stepDistance = getMinDistanceToObjectInScene(origin, colour, surface);
            distanceTravelled += stepDistance;
            origin += direction * stepDistance;

            if (fabs(stepDistance) < hitTolerance)
            {
                float3 surfaceNormal = estimateSurfaceNormal(
                    origin - direction * hitTolerance
                );
                if (outputType > 0)
                {
                    if (outputType == 1)
                    {
                        return float4(
                            origin.x,
                            origin.y,
                            origin.z,
                            1
                        );
                    }
                    if (outputType == 2)
                    {
                        return float4(
                            surfaceNormal.x,
                            surfaceNormal.y,
                            surfaceNormal.z,
                            1
                        );
                    }
                    if (outputType == 3)
                    {
                        return float4(
                            distanceTravelled,
                            0,
                            0,
                            1
                        );
                    }
                }
                bounces++;


                direction = reflectRayOffSurface(
                    direction,
                    surfaceNormal
                );

                float radialOffset = surface.w * random(
                    (iterations * distanceTravelled + stepDistance)
                    * (surfaceNormal.x + surfaceNormal.y + surfaceNormal.z)
                );
                float angularOffset = 2.0f * PI * random(radialOffset * distanceTravelled);

                // Update the ray direction to send a scattered cluster of rays
                float3 orthogonal = cross(direction, float3(1, 0, 0));
                float3 rayNormal;
                if (length(orthogonal) == 0.0f)
                {
                    rayNormal = normalize(cross(direction, float3(0, 1, 0)));
                }
                else
                {
                    rayNormal = normalize(orthogonal);
                }
                rayNormal = (
                    cos(angularOffset)
                    * rayNormal
                    + sin(angularOffset)
                    * cross(direction, rayNormal)
                );

                direction = normalize(radialOffset * rayNormal + direction);

                lightIntensity = computeLightIntensityOnSurface(
                    origin,
                    surfaceNormal,
                    surface,
                    direction,
                    lightColour
                );

                rayColour = blend(
                    iterGlowColour,
                    blend(
                        hazeColour,
                        blend(
                            lightColour * colour,
                            rayColour,
                            rayStrength * (1 - surface.x) * lightIntensity
                        ),
                        getHazeAmount(distanceTravelled - lastHitDistance)
                    ),
                    saturate(iterGlowAmount * iterations)
                );

                if (bounces >= numBounces)
                {
                    rayColour.w = 1.0f;
                    return rayColour;
                }

                rayStrength *= surface.x;
                origin = offsetPoint(
                    origin,
                    direction + surfaceNormal,
                    hitTolerance
                );

                lastHitDistance = distanceTravelled;
            }
            iterations++;
        }

        if (outputType > 0)
        {
            return float4(0);
        }

        rayColour = blend(
            readSkyValue(direction),
            blend(
                iterGlowColour,
                blend(
                    hazeColour,
                    rayColour,
                    getHazeAmount(distanceTravelled - lastHitDistance)
                ),
                saturate(iterGlowAmount * iterations)
            ),
            rayStrength
        );
        rayColour.w = bounces > 0;
        return rayColour;
    }


    /**
     * Compute a raymarched pixel value
     */
    void process(int2 pos)
    {
        float4 resultPixel(0, 0, 0, 0);

        float2 pixelLocation = float2(pos.x, pos.y);

        float2 pixelOffset;
        for (
            pixelOffset.x = 0.0f;
            pixelOffset.x < 1.0f;
            pixelOffset.x += subdividedPixelSize
        ) {
            for (
                pixelOffset.y = 0.0f;
                pixelOffset.y < 1.0f;
                pixelOffset.y += subdividedPixelSize
            ) {
                // Generate a ray from the camera
                float3 rayOrigin;
                float3 rayDirection;
                createCameraRay(
                    cameraWorldMatrix,
                    inverseCameraProjectionMatrix,
                    pixelsToUV(
                        pixelLocation + pixelOffset,
                        float2(formatWidth, formatHeight)
                    ),
                    rayOrigin,
                    rayDirection
                );

                resultPixel += marchRay(
                    rayOrigin,
                    rayDirection,
                    bouncesPerRay,
                    maxRayDistance
                );
            }
        }

        dst() = resultPixel / numSubPixels;
    }
};
