#include "math.h"


kernel MinMaxMeanDeviation : ImageComputationKernel<ePixelWise>
{
    Image<eRead, eAccessRandom, eEdgeNone> src; // the input image
    Image<eWrite> dst; // the output image

    param:
        float _maximum;

    local:
        float __numSamples;


    /**
     * In define(), parameters can be given labels and default values.
     */
    void define()
    {
        defineParam(_maximum, "Inclusive Range", 99999.9f);
    }


    /**
     * The init() function is run before any calls to process().
     * Local variables can be initialized here.
     */
    void init()
    {
        __numSamples = 3.0f * src.bounds.width() * src.bounds.height();
    }


    void process(int2 pos)
    {
        if (length(float2(pos.x, pos.y)) > 0)
        {
            dst() = 0;
            return;
        }

        float minValue = FLT_MAX;
        float maxValue = 0.0f;
        float mean = 0.0f;

        for (int y=src.bounds.y1; y < src.bounds.y2; y++)
        {
            for (int x=src.bounds.x1; x < src.bounds.x2; x++)
            {
                const float3 pixelValue = float3(
                    src(x, y, 0),
                    src(x, y, 1),
                    src(x, y, 2)
                );

                minValue = min(minValue, minComponent(pixelValue));
                maxValue = max(maxValue, maxComponent(pixelValue));

                mean += sumComponent(pixelValue) / __numSamples;
            }
        }

        float standardDeviation = 0.0f;

        for (int y=src.bounds.y1; y < src.bounds.y2; y++)
        {
            for (int x=src.bounds.x1; x < src.bounds.x2; x++)
            {
                const float3 pixelValue = float3(
                    src(x, y, 0),
                    src(x, y, 1),
                    src(x, y, 2)
                );

                const float deviation = sumComponent(fabs(pixelValue - mean));

                standardDeviation += min(deviation * deviation, _maximum) / __numSamples;
            }
        }

        dst() = float4(minValue, maxValue, mean, sqrt(standardDeviation));
    }
};
