#include "math.h"


kernel Variance : ImageComputationKernel<ePixelWise>
{
    Image<eRead, eAccessRanged2D, eEdgeClamped> src; // the input image
    Image<eWrite> dst; // the output image

    param:
        float2 _range;

    local:
        float __numSamples;


    /**
     * In define(), parameters can be given labels and default values.
     */
    void define()
    {
        defineParam(_range, "Range", float2(3, 3));
    }


    /**
     * The init() function is run before any calls to process().
     * Local variables can be initialized here.
     */
    void init()
    {
        src.setRange(-_range.x, -_range.y, _range.x, _range.y);

        __numSamples = (2.0f * _range.x + 1.0f) * (2.0f * _range.y + 1.0f);
    }


    /**
     * Compute the irradiance of a pixel.
     * 
     * @arg pos: The x, and y location we are currently processing.
     */
    void process(int2 pos)
    {
        float4 mean = float4(0);
        for (int yOffset=-_range.y; yOffset <= _range.y; yOffset++)
        {
            for (int xOffset=-_range.x; xOffset <= _range.x; xOffset++)
            {
                mean += src(xOffset, yOffset) / __numSamples;
            }
        }

        float4 sumOfSquares = float4(0);
        for (int yOffset=-_range.y; yOffset <= _range.y; yOffset++)
        {
            for (int xOffset=-_range.x; xOffset <= _range.x; xOffset++)
            {
                const float4 sample = src(xOffset, yOffset);

                const float4 deviation = src(xOffset, yOffset) - mean;

                sumOfSquares += deviation * deviation / (__numSamples - 1.0f);
            }
        }

        dst() = sumOfSquares;
    }
};
